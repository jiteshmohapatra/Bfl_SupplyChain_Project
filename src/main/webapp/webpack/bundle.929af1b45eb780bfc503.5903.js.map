{"version":3,"file":"bundle.929af1b45eb780bfc503.5903.js","mappings":"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","sources":["webpack://openboxes/./src/js/components/form-elements/TableRowWithSubfields.jsx","webpack://openboxes/./src/js/components/form-elements/ModalWrapper.jsx","webpack://openboxes/./src/js/utils/Checkbox.jsx","webpack://openboxes/./src/js/components/form-elements/CheckboxField.jsx","webpack://openboxes/./src/js/components/replenishment/CreateReplenishment.jsx","webpack://openboxes/./src/js/components/replenishment/ReplenishmentCheckPage.jsx","webpack://openboxes/./src/js/components/replenishment/EditPickModal.jsx","webpack://openboxes/./src/js/components/replenishment/ReplenishmentSecondPage.jsx","webpack://openboxes/./src/js/components/replenishment/ReplenishmentWizard.jsx","webpack://openboxes/./src/js/components/form-elements/ButtonField.jsx"],"sourcesContent":["import React, { Component } from \"react\";\n\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport { FieldArray } from \"react-final-form-arrays\";\n\nimport TableBody from \"components/form-elements/TableBody\";\nimport TableRow from \"components/form-elements/TableRow\";\n\nclass TableRowWithSubfields extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fieldRefs = [];\n    this.focusField = this.focusField.bind(this);\n    this.copyDown = this.copyDown.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return !_.isEqualWith(this.props, nextProps, (objValue, othValue) => {\n      if (typeof objValue === \"function\" || typeof othValue === \"function\") {\n        return true;\n      }\n\n      return undefined;\n    });\n  }\n\n  focusField(index, fieldName) {\n    const field = _.get(this.fieldRefs, `[${index}].${fieldName}`);\n\n    if (field) {\n      field.focus();\n    }\n  }\n\n  copyDown(index, fieldName) {\n    const field = _.get(this.fieldRefs, `[${index}].${fieldName}`);\n    const valueToCopy = _.get(\n      this.fieldRefs,\n      `[${index - 1}].${fieldName}.value`,\n    );\n\n    if (field && valueToCopy && !field.disabled) {\n      field.value = valueToCopy;\n      field.focus();\n    }\n  }\n\n  render() {\n    const {\n      fieldsConfig,\n      index,\n      field,\n      properties,\n      rowValues = {},\n    } = this.props;\n    const dynamicAttr = fieldsConfig.getDynamicRowAttr\n      ? fieldsConfig.getDynamicRowAttr({ ...properties, index, rowValues })\n      : {};\n    const { subfieldKey } = fieldsConfig;\n\n    return (\n      <div>\n        <TableRow {...this.props} />\n        {!dynamicAttr.hideSubfields && (\n          <FieldArray\n            name={`${field}.${subfieldKey}`}\n            component={TableBody}\n            fieldsConfig={fieldsConfig}\n            properties={{\n              ...properties,\n              parentIndex: index,\n              subfield: true,\n              focusField: this.focusField,\n              copyDown: this.copyDown,\n            }}\n            tableRef={(el, fieldName, elIndex) => {\n              if (!this.fieldRefs[elIndex]) {\n                this.fieldRefs[elIndex] = {};\n              }\n\n              this.fieldRefs[elIndex][fieldName] = el;\n            }}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TableRowWithSubfields;\n\nTableRowWithSubfields.propTypes = {\n  fieldsConfig: PropTypes.shape({\n    getDynamicAttr: PropTypes.func,\n  }).isRequired,\n  index: PropTypes.number.isRequired,\n  field: PropTypes.string.isRequired,\n  addRow: PropTypes.func.isRequired,\n  removeRow: PropTypes.func.isRequired,\n  properties: PropTypes.shape({}).isRequired,\n  rowValues: PropTypes.shape({}),\n};\n\nTableRowWithSubfields.defaultProps = {\n  rowValues: {},\n};\n","import React, { Component } from \"react\";\n\nimport arrayMutators from \"final-form-arrays\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"react-final-form\";\nimport Modal from \"react-modal\";\n\nimport { renderFormField } from \"utils/form-utils\";\nimport Translate from \"utils/Translate\";\n\nclass ModalWrapper extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showModal: false,\n    };\n\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.save = this.save.bind(this);\n  }\n\n  openModal() {\n    this.props.onOpen();\n    this.setState({ showModal: true });\n  }\n\n  closeModal() {\n    this.props.onClose();\n    this.setState({ showModal: false });\n  }\n\n  save(values) {\n    this.props.onSave(values);\n    this.setState({ showModal: false });\n  }\n\n  render() {\n    const Title = this.props.title;\n    const { defaultTitleMessage } = this.props;\n\n    return (\n      <div className={this.props.wrapperClassName}>\n        {this.props.renderButton ? (\n          this.props.renderButton({ openModal: this.openModal })\n        ) : (\n          <button\n            type=\"button\"\n            className={`btn-xs ${this.props.btnOpenClassName}`}\n            style={this.props.btnOpenStyle}\n            disabled={this.props.btnOpenDisabled}\n            onClick={() => this.openModal()}\n          >\n            {this.props.btnOpenIcon && (\n              <i\n                className={`fa ${this.props.btnOpenIcon} mr-1`}\n                aria-hidden=\"true\"\n              />\n            )}\n            {this.props.btnOpenText && !this.props.btnOpenAsIcon && (\n              <Translate\n                id={this.props.btnOpenText}\n                defaultMessage={this.props.btnOpenDefaultText}\n              />\n            )}\n          </button>\n        )}\n        <Modal\n          isOpen={this.props.showModal || this.state.showModal}\n          onRequestClose={this.closeModal}\n          className=\"modal-content-custom\"\n          shouldCloseOnOverlayClick={false}\n        >\n          <div\n            className={this.props.bodyContainerClassName}\n            style={this.props.bodyContainerStyle}\n          >\n            {typeof Title === \"string\" ? (\n              <h5 className=\"text-center\">\n                {\" \"}\n                <Translate id={Title} defaultMessage={defaultTitleMessage} />\n              </h5>\n            ) : (\n              <Title />\n            )}\n            <hr />\n            <Form\n              onSubmit={(values) => this.save(values)}\n              initialValues={this.props.initialValues}\n              validate={this.props.validate}\n              mutators={{ ...arrayMutators }}\n              render={({ handleSubmit, values }) => (\n                <form id=\"modalForm\" onSubmit={handleSubmit}>\n                  {this.props.children}\n                  {this.props.renderBodyWithValues(values)}\n\n                  {_.map(this.props.fields, (fieldConfig, fieldName) =>\n                    renderFormField(fieldConfig, fieldName, {\n                      ...this.props.formProps,\n                      values,\n                    }),\n                  )}\n\n                  <hr />\n\n                  <div\n                    className={this.props.btnContainerClassName}\n                    role=\"group\"\n                    style={this.props.btnContainerStyle}\n                  >\n                    <button\n                      type=\"button\"\n                      className={this.props.btnCancelClassName}\n                      style={this.props.btnCancelStyle}\n                      onClick={() => this.closeModal()}\n                    >\n                      <Translate\n                        id={this.props.btnCancelText}\n                        defaultMessage={this.props.btnCancelDefaultText}\n                      />\n                    </button>\n                    <button\n                      type=\"submit\"\n                      className={this.props.btnSaveClassName}\n                      style={this.props.btnSaveStyle}\n                      disabled={this.props.btnSaveDisabled}\n                    >\n                      <Translate\n                        id={this.props.btnSaveText}\n                        defaultMessage={this.props.btnSaveDefaultText}\n                      />\n                    </button>\n                  </div>\n                </form>\n              )}\n            />\n          </div>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default ModalWrapper;\n\nModalWrapper.propTypes = {\n  /** Open button properties */\n  btnOpenText: PropTypes.string,\n  btnOpenDefaultText: PropTypes.string,\n  btnOpenClassName: PropTypes.string,\n  btnOpenStyle: PropTypes.shape({}),\n  btnOpenDisabled: PropTypes.bool,\n  btnOpenAsIcon: PropTypes.bool,\n  btnOpenIcon: PropTypes.string,\n\n  /** Modal title property */\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n  defaultTitleMessage: PropTypes.string.isRequired,\n\n  /** Modal body container properties */\n  children: PropTypes.element,\n  bodyContainerClassName: PropTypes.string,\n  bodyContainerStyle: PropTypes.shape({}),\n\n  /** Button container properties */\n  btnContainerClassName: PropTypes.string,\n  btnContainerStyle: PropTypes.shape({}),\n  renderButton: PropTypes.func,\n\n  /** Wrapper properties */\n  wrapperClassName: PropTypes.string,\n\n  /** Save button properties */\n  btnSaveText: PropTypes.string,\n  btnSaveDefaultText: PropTypes.string,\n  btnSaveClassName: PropTypes.string,\n  btnSaveStyle: PropTypes.shape({}),\n  btnSaveDisabled: PropTypes.bool,\n\n  /** Cancel button properties */\n  btnCancelText: PropTypes.string,\n  btnCancelDefaultText: PropTypes.string,\n  btnCancelClassName: PropTypes.string,\n  btnCancelStyle: PropTypes.shape({}),\n\n  /** Functional properties */\n  onOpen: PropTypes.func,\n  onSave: PropTypes.func,\n  onClose: PropTypes.func,\n\n  /** Form elements */\n  validate: PropTypes.func,\n  renderBodyWithValues: PropTypes.func,\n  initialValues: PropTypes.oneOfType([\n    PropTypes.shape({}),\n    PropTypes.arrayOf(PropTypes.shape({})),\n  ]),\n  fields: PropTypes.shape({}),\n  formProps: PropTypes.shape({}),\n  showModal: PropTypes.bool,\n};\n\nModalWrapper.defaultProps = {\n  btnOpenText: \"react.default.button.open.label\",\n  btnOpenDefaultText: \"Open\",\n  btnOpenClassName: \"btn btn-outline-primary\",\n  btnOpenStyle: {},\n  btnOpenDisabled: false,\n  btnOpenAsIcon: false,\n  btnOpenIcon: \"\",\n\n  children: null,\n  bodyContainerClassName: \"modal-body-container\",\n  bodyContainerStyle: {},\n\n  btnContainerClassName: \"btn-group float-right\",\n  btnContainerStyle: {},\n\n  wrapperClassName: null,\n\n  btnSaveText: \"react.default.button.save.label\",\n  btnSaveDefaultText: \"Save\",\n  btnSaveClassName: \"btn btn-outline-success\",\n  btnSaveStyle: {},\n  btnSaveDisabled: false,\n\n  btnCancelText: \"react.default.button.cancel.label\",\n  btnCancelDefaultText: \"Cancel\",\n  btnCancelClassName: \"btn btn-outline-secondary\",\n  btnCancelStyle: {},\n\n  renderButton: undefined,\n\n  onOpen: () => null,\n  onSave: () => null,\n  onClose: () => null,\n\n  validate: () => null,\n  renderBodyWithValues: () => null,\n  initialValues: [],\n  fields: {},\n  formProps: {},\n  showModal: false,\n};\n","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nimport Translate from \"utils/Translate\";\n\nconst Checkbox = ({\n  value,\n  indeterminate,\n  custom,\n  fieldRef,\n  withLabel,\n  label,\n  defaultMessage,\n  ...props\n}) => {\n  const onChange = (event) => {\n    const { checked } = event.target;\n\n    if (props.onChange) {\n      props.onChange(checked);\n    }\n  };\n\n  if (custom) {\n    return (\n      <div data-testid=\"custom-checkbox\" className=\"custom-checkbox\">\n        <label htmlFor={props.id}>\n          <input\n            id={props.id}\n            type=\"checkbox\"\n            ref={fieldRef}\n            checked={value}\n            {...props}\n            onChange={onChange}\n          />\n        </label>\n      </div>\n    );\n  }\n\n  if (withLabel) {\n    return (\n      <div\n        data-testid=\"with-label-checkbox\"\n        className=\"d-flex align-items-center\"\n      >\n        <input\n          type=\"checkbox\"\n          ref={(elem) => {\n            if (elem) {\n              // eslint-disable-next-line no-param-reassign\n              elem.indeterminate = indeterminate;\n            }\n            if (fieldRef) {\n              fieldRef(elem);\n            }\n          }}\n          checked={value}\n          {...props}\n          onChange={onChange}\n        />\n        <label htmlFor={props.id} style={{ margin: \"0 0 0 5px\" }}>\n          <Translate id={label} defaultMessage={defaultMessage || label} />\n        </label>\n      </div>\n    );\n  }\n\n  return (\n    <input\n      data-testid=\"checkbox\"\n      type=\"checkbox\"\n      ref={(elem) => {\n        if (elem) {\n          // eslint-disable-next-line no-param-reassign\n          elem.indeterminate = indeterminate;\n        }\n        if (fieldRef) {\n          fieldRef(elem);\n        }\n      }}\n      checked={value}\n      {...props}\n      onChange={onChange}\n    />\n  );\n};\n\nexport default Checkbox;\n\nCheckbox.propTypes = {\n  onChange: PropTypes.func,\n  value: PropTypes.bool,\n  indeterminate: PropTypes.bool,\n  custom: PropTypes.bool,\n  id: PropTypes.string,\n  fieldRef: PropTypes.func,\n  withLabel: PropTypes.bool,\n  label: PropTypes.string,\n  defaultMessage: PropTypes.string,\n};\n\nCheckbox.defaultProps = {\n  onChange: null,\n  value: null,\n  indeterminate: false,\n  custom: false,\n  id: \"\",\n  fieldRef: undefined,\n  withLabel: false,\n  label: \"\",\n  defaultMessage: \"\",\n};\n","import React from \"react\";\n\nimport BaseField from \"components/form-elements/BaseField\";\nimport Checkbox from \"utils/Checkbox\";\n\nconst CheckboxField = (props) => {\n  // eslint-disable-next-line react/prop-types\n  const renderInput = ({ value, ...attributes }) => (\n    <Checkbox {...attributes} value={value || false} />\n  );\n\n  return <BaseField {...props} renderInput={renderInput} />;\n};\n\nexport default CheckboxField;\n","import React, { Component } from \"react\";\n\nimport arrayMutators from \"final-form-arrays\";\nimport update from \"immutability-helper\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport { confirmAlert } from \"react-confirm-alert\";\nimport { Form } from \"react-final-form\";\nimport { getTranslate } from \"react-localize-redux\";\nimport { connect } from \"react-redux\";\n\nimport { createInfoBar, hideInfoBar, hideSpinner, showSpinner } from \"actions\";\nimport ArrayField from \"components/form-elements/ArrayField\";\nimport CheckboxField from \"components/form-elements/CheckboxField\";\nimport LabelField from \"components/form-elements/LabelField\";\nimport TextField from \"components/form-elements/TextField\";\nimport { REPLENISHMENT_URL } from \"consts/applicationUrls\";\nimport { InfoBar, InfoBarConfigs } from \"consts/infoBar\";\nimport apiClient, { flattenRequest, parseResponse } from \"utils/apiClient\";\nimport { renderFormField } from \"utils/form-utils\";\nimport Select from \"utils/Select\";\nimport Translate, { translateWithDefaultMessage } from \"utils/Translate\";\n\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\n\nconst FIELD = {\n  requirements: {\n    type: ArrayField,\n    arrowsNavigation: true,\n    fields: {\n      checked: {\n        type: CheckboxField,\n        label: \"react.stockMovement.selectAll.label\",\n        defaultMessage: \"Select All\",\n        flexWidth: 4,\n        getDynamicAttr: ({\n          rowIndex,\n          allRowsSelected,\n          selectAllCode,\n          updateSelectedItems,\n        }) => ({\n          headerHtml: () => (\n            <input\n              type=\"checkbox\"\n              className=\"mt-1\"\n              checked={allRowsSelected}\n              onClick={selectAllCode}\n            />\n          ),\n          onChange: (checkState) => updateSelectedItems(checkState, rowIndex),\n        }),\n      },\n      \"product.productCode\": {\n        type: LabelField,\n        label: \"react.stockMovement.productCode.label\",\n        defaultMessage: \"Code\",\n        flexWidth: 5,\n        headerAlign: \"left\",\n        attributes: {\n          cellClassName: \"text-left\",\n        },\n      },\n      \"product.name\": {\n        type: LabelField,\n        label: \"react.stockMovement.product.label\",\n        defaultMessage: \"Product\",\n        flexWidth: 30,\n        headerAlign: \"left\",\n        attributes: {\n          cellClassName: \"text-left\",\n          showValueTooltip: true,\n        },\n      },\n      zone: {\n        type: LabelField,\n        label: \"react.replenishment.zone.label\",\n        defaultMessage: \"Zone\",\n        headerAlign: \"left\",\n        attributes: {\n          className: \"text-left\",\n        },\n      },\n      \"binLocation.name\": {\n        type: LabelField,\n        label: \"react.replenishment.bin.label\",\n        defaultMessage: \"Bin\",\n        headerAlign: \"left\",\n        attributes: {\n          formatValue: (value) => {\n            if (value) {\n              return value;\n            }\n            return \"DEFAULT\";\n          },\n          className: \"text-left\",\n        },\n      },\n      quantityInBin: {\n        type: LabelField,\n        label: \"react.replenishment.quantityInBin.label\",\n        defaultMessage: \"Qty in Bin\",\n        headerAlign: \"right\",\n        flexWidth: 8,\n        attributes: {\n          cellClassName: \"text-right\",\n        },\n      },\n      maxQuantity: {\n        type: LabelField,\n        label: \"react.replenishment.maxQuantity.label\",\n        defaultMessage: \"Max Qty\",\n        headerAlign: \"right\",\n        flexWidth: 8,\n        attributes: {\n          cellClassName: \"text-right\",\n        },\n      },\n      quantityAvailable: {\n        type: LabelField,\n        label: \"react.replenishment.quantityAvailable.label\",\n        defaultMessage: \"Qty available\",\n        headerAlign: \"right\",\n        flexWidth: 8,\n        attributes: {\n          cellClassName: \"text-right\",\n        },\n      },\n      quantity: {\n        type: TextField,\n        label: \"react.stockMovement.quantityToTransfer.label\",\n        defaultMessage: \"Qty to Transfer\",\n        headerAlign: \"center\",\n        attributes: {\n          type: \"number\",\n          cellClassName: \"text-center\",\n        },\n        flexWidth: 10,\n        fieldKey: \"\",\n        getDynamicAttr: ({ updateRow, values, rowIndex }) => ({\n          onBlur: () => updateRow(values, rowIndex),\n        }),\n      },\n    },\n  },\n};\n\nfunction validate(values) {\n  const errors = {};\n  errors.requirements = [];\n  _.forEach(values.requirements, (item, key) => {\n    // If item not checked, we don't want to validate\n    if (!item.checked) {\n      return;\n    }\n    if (!item.quantity) {\n      errors.requirements[key] = {\n        quantity: \"react.replenishment.error.emptyQtyToTransfer.label\",\n      };\n      return;\n    }\n    if (item.quantity < 1) {\n      errors.requirements[key] = {\n        quantity: \"react.replenishment.error.quantity.label\",\n      };\n      return;\n    }\n    if (item.quantity > item.quantityAvailable) {\n      errors.requirements[key] = {\n        quantity: \"react.replenishment.error.quantity.greaterThanQATP.label\",\n      };\n    }\n  });\n\n  const anyRowSelected = _.find(values.requirements, (row) => row.checked);\n  if (!anyRowSelected) {\n    _.forEach(values.requirements, (item, key) => {\n      errors.requirements[key] = {\n        ...errors.requirements[key],\n        checked: \"react.replenishment.error.selected.label\",\n      };\n    });\n  }\n  return errors;\n}\n\nconst DEFAULT_OPTION = \"BELOW_MINIMUM\";\n\nclass CreateReplenishment extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inventoryLevelStatus: DEFAULT_OPTION,\n      statusOptions: [],\n      values: { ...this.props.initialValues, requirements: [] },\n      isDirty: false,\n    };\n    this.updateRow = this.updateRow.bind(this);\n    this.updateSelectedItems = this.updateSelectedItems.bind(this);\n    this.selectAllRows = this.selectAllRows.bind(this);\n    this.allRowsSelected = this.allRowsSelected.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.replenishmentTranslationsFetched) {\n      this.dataFetched = true;\n      this.fetchStatusOptions();\n      this.fetchRequirements(this.props.locationId);\n    }\n\n    this.props.createInfoBar(\n      InfoBarConfigs[InfoBar.STOCK_REPLENISHMENT_DESCRIPTION],\n    );\n  }\n\n  componentWillUnmount() {\n    this.props.hideInfoBar(InfoBar.STOCK_REPLENISHMENT_DESCRIPTION);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.replenishmentTranslationsFetched) {\n      if (!this.dataFetched) {\n        this.dataFetched = true;\n\n        this.fetchStatusOptions();\n        this.fetchRequirements(this.props.locationId);\n      } else if (this.props.locationId !== nextProps.locationId) {\n        this.fetchRequirements(nextProps.locationId);\n      }\n    }\n  }\n\n  allRowsSelected() {\n    return !_.find(this.state.values.requirements, (row) => !row.checked);\n  }\n\n  selectAllRows() {\n    const isAllSelected = this.allRowsSelected();\n    this.setState((prev) => ({\n      values: update(prev.values, {\n        requirements: {\n          $apply: (req) =>\n            req.map((it) => ({\n              ...it,\n              checked: !isAllSelected,\n            })),\n        },\n      }),\n    }));\n  }\n\n  updateSelectedItems(checkedValue, index) {\n    this.setState((prev) => ({\n      values: update(prev.values, {\n        requirements: { [index]: { checked: { $set: checkedValue } } },\n      }),\n    }));\n  }\n\n  updateRow(values, index) {\n    const item = values.requirements[index];\n    if (item.quantity !== this.state.values.requirements[index].quantity) {\n      this.setState({\n        values: update(values, {\n          requirements: { [index]: { $set: item } },\n        }),\n        isDirty: true,\n      });\n    }\n  }\n\n  dataFetched = false;\n\n  fetchStatusOptions() {\n    const url = \"/api/replenishments/statusOptions\";\n    return apiClient\n      .get(url)\n      .then((resp) => {\n        const statusOptions = resp.data.data;\n        this.setState({ statusOptions });\n      })\n      .catch(() => {});\n  }\n\n  fetchRequirements(locationId) {\n    this.props.showSpinner();\n    const { inventoryLevelStatus } = this.state;\n    let url = `/api/requirements?location.id=${locationId}`;\n    if (inventoryLevelStatus.id) {\n      url += `&inventoryLevelStatus=${inventoryLevelStatus.id}`;\n    }\n\n    return apiClient\n      .get(url)\n      .then((resp) => {\n        const requirements = _.map(\n          parseResponse(resp.data.data),\n          (requirement) => ({\n            ...requirement,\n            quantity: requirement.quantityNeeded,\n            checked: true,\n          }),\n        );\n        this.setState({ values: { requirements }, isDirty: false }, () =>\n          this.props.hideSpinner(),\n        );\n      })\n      .catch(() => this.props.hideSpinner());\n  }\n\n  createReplenishment(values) {\n    this.props.showSpinner();\n    const url = \"/api/replenishments/\";\n    const payload = {\n      replenishmentItems: values.requirements.filter(\n        (item) => item.checked && item.quantity > 0,\n      ),\n    };\n\n    apiClient\n      .post(url, flattenRequest(payload))\n      .then((response) => {\n        this.props.hideSpinner();\n        this.props.history.push(\n          REPLENISHMENT_URL.edit(response.data?.data?.id),\n        );\n        this.props.nextPage(response.data?.data);\n      })\n      .catch(() => this.props.hideSpinner());\n  }\n\n  inventoryLevelStatusChange(value) {\n    if (this.state.isDirty) {\n      confirmAlert({\n        title: this.props.translate(\n          \"react.replenishment.message.confirmStatusChange.label\",\n          \"Confirm inventory level status change\",\n        ),\n        message: this.props.translate(\n          \"react.replenishment.confirmStatusChange.label\",\n          \"Previously edited quantities will be lost after this change. Are you sure?\",\n        ),\n        buttons: [\n          {\n            label: this.props.translate(\"react.default.yes.label\", \"Yes\"),\n            onClick: () =>\n              this.setState(\n                {\n                  inventoryLevelStatus: value,\n                },\n                () => this.fetchRequirements(this.props.locationId),\n              ),\n          },\n          {\n            label: this.props.translate(\"react.default.no.label\", \"No\"),\n          },\n        ],\n      });\n    } else {\n      this.setState(\n        {\n          inventoryLevelStatus: value,\n        },\n        () => this.fetchRequirements(this.props.locationId),\n      );\n    }\n  }\n\n  render() {\n    return (\n      <Form\n        onSubmit={() => {}}\n        validate={validate}\n        mutators={{ ...arrayMutators }}\n        initialValues={this.state.values}\n        render={({ handleSubmit, values, invalid }) => (\n          <div className=\"d-flex flex-column\">\n            <div className=\"d-flex justify-content-between submit-buttons mt-0 mb-3\">\n              <div className=\"d-flex flex-column\">\n                <label htmlFor=\"stock-level-filter\">\n                  <Translate\n                    id=\"react.replenishment.filter.label\"\n                    defaultMessage=\"Replenish bins that have a stock level\"\n                  />\n                  :\n                </label>\n                <Select\n                  name=\"stock-level-filter\"\n                  value={this.state.inventoryLevelStatus}\n                  onChange={(value) => this.inventoryLevelStatusChange(value)}\n                  options={this.state.statusOptions}\n                  className=\"select-sm stocklist-select\"\n                  clearable={false}\n                />\n              </div>\n              <button\n                type=\"submit\"\n                onClick={() => {\n                  if (!invalid) {\n                    this.createReplenishment(values);\n                  }\n                }}\n                className=\"btn btn-outline-primary float-right btn-xs\"\n                disabled={invalid}\n              >\n                <Translate\n                  id=\"react.replenishment.next.label\"\n                  defaultMessage=\"Next\"\n                />\n              </button>\n            </div>\n            <form onSubmit={handleSubmit}>\n              <div className=\"table-form\">\n                {_.map(FIELD, (fieldConfig, fieldName) =>\n                  renderFormField(fieldConfig, fieldName, {\n                    values,\n                    updateRow: this.updateRow,\n                    updateSelectedItems: this.updateSelectedItems,\n                    allRowsSelected: this.allRowsSelected(),\n                    selectAllCode: this.selectAllRows,\n                  }),\n                )}\n              </div>\n              <div className=\"submit-buttons\">\n                <button\n                  type=\"submit\"\n                  onClick={() => {\n                    if (!invalid) {\n                      this.createReplenishment(values);\n                    }\n                  }}\n                  className=\"btn btn-outline-primary btn-form float-right btn-xs\"\n                  disabled={invalid}\n                >\n                  <Translate\n                    id=\"react.replenishment.next.label\"\n                    defaultMessage=\"Next\"\n                  />\n                </button>\n              </div>\n            </form>\n          </div>\n        )}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  replenishmentTranslationsFetched:\n    state.session.fetchedTranslations.replenishment,\n  translate: translateWithDefaultMessage(getTranslate(state.localize)),\n});\n\nconst mapDispatchToProps = {\n  showSpinner,\n  hideSpinner,\n  createInfoBar,\n  hideInfoBar,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(CreateReplenishment);\n\nCreateReplenishment.propTypes = {\n  initialValues: PropTypes.shape({}),\n  showSpinner: PropTypes.func.isRequired,\n  hideSpinner: PropTypes.func.isRequired,\n  nextPage: PropTypes.func.isRequired,\n  locationId: PropTypes.string.isRequired,\n  history: PropTypes.shape({ push: PropTypes.func }).isRequired,\n  replenishmentTranslationsFetched: PropTypes.bool.isRequired,\n  translate: PropTypes.func.isRequired,\n};\n\nCreateReplenishment.defaultProps = {\n  initialValues: {},\n};\n","import React, { Component } from \"react\";\n\nimport arrayMutators from \"final-form-arrays\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"react-final-form\";\nimport { getTranslate } from \"react-localize-redux\";\nimport { connect } from \"react-redux\";\n\nimport { hideSpinner, showSpinner } from \"actions\";\nimport ArrayField from \"components/form-elements/ArrayField\";\nimport LabelField from \"components/form-elements/LabelField\";\nimport TableRowWithSubfields from \"components/form-elements/TableRowWithSubfields\";\nimport { STOCK_TRANSFER_URL } from \"consts/applicationUrls\";\nimport apiClient, { flattenRequest } from \"utils/apiClient\";\nimport { renderFormField } from \"utils/form-utils\";\nimport Translate, { translateWithDefaultMessage } from \"utils/Translate\";\n\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\n\nconst FIELDS = {\n  replenishmentItems: {\n    type: ArrayField,\n    rowComponent: TableRowWithSubfields,\n    subfieldKey: \"picklistItems\",\n    getDynamicRowAttr: ({ rowValues, subfield }) => {\n      let className = rowValues.initial ? \"crossed-out \" : \"\";\n      if (!subfield) {\n        className += \"font-weight-bold\";\n      }\n      return { className };\n    },\n    fields: {\n      \"product.productCode\": {\n        type: LabelField,\n        label: \"react.stockMovement.productCode.label\",\n        defaultMessage: \"Code\",\n        flexWidth: \"0.5\",\n        headerAlign: \"left\",\n        attributes: {\n          cellClassName: \"text-left\",\n        },\n      },\n      \"product.name\": {\n        type: LabelField,\n        label: \"react.stockMovement.product.label\",\n        defaultMessage: \"Product\",\n        flexWidth: \"2\",\n        headerAlign: \"left\",\n        attributes: {\n          showValueTooltip: true,\n          cellClassName: \"text-left\",\n        },\n      },\n      \"currentZone.name\": {\n        type: LabelField,\n        label: \"react.replenishment.currentZone.label\",\n        defaultMessage: \"Current Zone\",\n        flexWidth: \"0.5\",\n        attributes: {\n          showValueTooltip: true,\n        },\n      },\n      \"currentBinLocation.name\": {\n        type: LabelField,\n        label: \"react.replenishment.currentBinLocation.label\",\n        defaultMessage: \"Current Bin Location\",\n        flexWidth: \"1\",\n        attributes: {\n          showValueTooltip: true,\n        },\n        getDynamicAttr: ({ subfield }) => ({\n          formatValue: (value) => {\n            if (subfield || value) {\n              return value;\n            }\n            return \"DEFAULT\";\n          },\n        }),\n      },\n      quantityNeeded: {\n        type: LabelField,\n        label: \"react.replenishment.quantityInBin.label\",\n        defaultMessage: \"Qty Needed\",\n        flexWidth: \"1\",\n        headerAlign: \"right\",\n        attributes: {\n          cellClassName: \"text-right\",\n        },\n      },\n      \"zone.name\": {\n        type: LabelField,\n        label: \"react.replenishment.zone.label\",\n        defaultMessage: \"Zone\",\n        flexWidth: \"0.5\",\n        attributes: {\n          showValueTooltip: true,\n        },\n      },\n      \"binLocation.name\": {\n        type: LabelField,\n        label: \"react.replenishment.bin.label\",\n        defaultMessage: \"Bin\",\n        flexWidth: \"1\",\n        attributes: {\n          showValueTooltip: true,\n        },\n      },\n      lotNumber: {\n        type: LabelField,\n        label: \"react.replenishment.lot.label\",\n        defaultMessage: \"Lot\",\n        flexWidth: \"1\",\n      },\n      expirationDate: {\n        type: LabelField,\n        label: \"react.replenishment.exp.label\",\n        defaultMessage: \"Exp\",\n        flexWidth: \"1\",\n      },\n      quantity: {\n        type: LabelField,\n        label: \"react.stockMovement.quantityToTransfer.label\",\n        defaultMessage: \"Qty to Transfer\",\n        flexWidth: \"1\",\n        headerAlign: \"right\",\n        attributes: {\n          cellClassName: \"text-right\",\n        },\n      },\n    },\n  },\n};\n\n/* eslint class-methods-use-this: [\"error\",{ \"exceptMethods\": [\"checkForInitialPicksChanges\"] }] */\nclass ReplenishmentSecondPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      values: { replenishment: { ...this.props.initialValues } },\n    };\n\n    this.fetchReplenishment = this.fetchReplenishment.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.replenishmentTranslationsFetched) {\n      this.dataFetched = true;\n      this.fetchReplenishment();\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.replenishmentTranslationsFetched && !this.dataFetched) {\n      this.dataFetched = true;\n      this.fetchReplenishment();\n    }\n  }\n\n  dataFetched = false;\n\n  fetchReplenishment() {\n    this.props.showSpinner();\n    const url = `/api/replenishments/${this.props.match.params.replenishmentId}`;\n\n    return apiClient\n      .get(url)\n      .then((resp) => {\n        const replenishment = resp.data.data;\n        this.setState(\n          {\n            values: {\n              replenishment: {\n                ...replenishment,\n                replenishmentItems: _.map(\n                  replenishment.replenishmentItems,\n                  (item) => this.checkForInitialPicksChanges(item),\n                ),\n              },\n            },\n          },\n          () => this.props.hideSpinner(),\n        );\n      })\n      .catch(() => this.props.hideSpinner());\n  }\n\n  checkForInitialPicksChanges(pickPageItem) {\n    if (pickPageItem.picklistItems.length) {\n      const initialPicks = [];\n      _.forEach(pickPageItem.suggestedItems, (suggestion) => {\n        // search if suggested picks are inside picklist\n        // if no -> add suggested pick as initial pick (to be crossed out)\n        // if yes -> compare quantityPicked of item in picklist with suggestion\n        const pick = _.find(\n          pickPageItem.picklistItems,\n          (item) =>\n            _.get(suggestion, \"inventoryItem.id\") ===\n              _.get(item, \"inventoryItem.id\") &&\n            _.get(item, \"binLocation.id\") ===\n              _.get(suggestion, \"binLocation.id\"),\n        );\n        if (_.isEmpty(pick) || pick.quantity !== suggestion.quantityPicked) {\n          initialPicks.push({\n            ...suggestion,\n            quantity: suggestion.quantityPicked,\n            initial: true,\n          });\n        }\n      });\n\n      return {\n        ...pickPageItem,\n        picklistItems: _.concat(\n          initialPicks,\n          _.sortBy(pickPageItem.picklistItems, [\"binLocation.name\", \"initial\"]),\n        ),\n      };\n    }\n\n    return pickPageItem;\n  }\n\n  completeReplenishment() {\n    if (this.state.values.replenishment.status === \"APPROVED\") {\n      this.props.showSpinner();\n      const url = `/api/replenishments/${this.props.match.params.replenishmentId}`;\n      const payload = { status: \"COMPLETED\" };\n      apiClient\n        .post(url, flattenRequest(payload))\n        .then(() => {\n          window.location = STOCK_TRANSFER_URL.show(\n            this.props.match.params.replenishmentId,\n          );\n          this.props.hideSpinner();\n        })\n        .catch(() => this.props.hideSpinner());\n    }\n  }\n\n  previousPage() {\n    this.props.previousPage(this.state.values.replenishment);\n  }\n\n  render() {\n    return (\n      <Form\n        onSubmit={() => this.completeReplenishment()}\n        mutators={{ ...arrayMutators }}\n        initialValues={this.state.values.replenishment}\n        render={({ handleSubmit }) => (\n          <div className=\"d-flex flex-column\">\n            <form onSubmit={handleSubmit} className=\"print-mt\">\n              <div className=\"table-form\">\n                {_.map(FIELDS, (fieldConfig, fieldName) =>\n                  renderFormField(fieldConfig, fieldName, {\n                    replenishmentId: this.props.match.params.replenishmentId,\n                    translate: this.props.translate,\n                  }),\n                )}\n              </div>\n              <div className=\"submit-buttons\">\n                <button\n                  type=\"button\"\n                  onClick={() => this.previousPage()}\n                  className=\"btn btn-outline-primary btn-form btn-xs\"\n                >\n                  <Translate\n                    id=\"react.default.button.previous.label\"\n                    defaultMessage=\"Previous\"\n                  />\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={() => this.completeReplenishment()}\n                  className=\"btn btn-outline-success float-right btn-xs mr-3\"\n                >\n                  <Translate\n                    id=\"react.stockTransfer.completeStockTransfer.label\"\n                    defaultMessage=\"Complete Stock Transfer\"\n                  />\n                </button>\n              </div>\n            </form>\n          </div>\n        )}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  replenishmentTranslationsFetched:\n    state.session.fetchedTranslations.replenishment,\n  translate: translateWithDefaultMessage(getTranslate(state.localize)),\n});\n\nexport default connect(mapStateToProps, {\n  showSpinner,\n  hideSpinner,\n})(ReplenishmentSecondPage);\n\nReplenishmentSecondPage.propTypes = {\n  showSpinner: PropTypes.func.isRequired,\n  hideSpinner: PropTypes.func.isRequired,\n  previousPage: PropTypes.func.isRequired,\n  initialValues: PropTypes.shape({\n    replenishment: PropTypes.arrayOf(PropTypes.shape({})),\n  }).isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      replenishmentId: PropTypes.string,\n    }),\n  }).isRequired,\n  replenishmentTranslationsFetched: PropTypes.bool.isRequired,\n  translate: PropTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\n\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport { getTranslate } from \"react-localize-redux\";\nimport { connect } from \"react-redux\";\n\nimport { hideSpinner, showSpinner } from \"actions\";\nimport ArrayField from \"components/form-elements/ArrayField\";\nimport LabelField from \"components/form-elements/LabelField\";\nimport ModalWrapper from \"components/form-elements/ModalWrapper\";\nimport TextField from \"components/form-elements/TextField\";\nimport apiClient from \"utils/apiClient\";\nimport Translate, { translateWithDefaultMessage } from \"utils/Translate\";\n\nconst FIELDS = {\n  availableItems: {\n    type: ArrayField,\n    getDynamicRowAttr: ({ rowValues }) => {\n      let className = \"\";\n      if (!rowValues.quantityAvailable) {\n        className = \"text-disabled\";\n      }\n      return { className };\n    },\n    fields: {\n      status: {\n        type: LabelField,\n        fieldKey: \"\",\n        flexWidth: 6,\n        getDynamicAttr: ({ translate }) => ({\n          showValueTooltip: true,\n          formatValue: (fieldValue) => {\n            if (!fieldValue.status || fieldValue.status === \"AVAILABLE\") {\n              return \"\";\n            }\n\n            return translate(\n              `react.stockMovement.enum.AvailableItemStatus.${fieldValue.status}`,\n              fieldValue.status,\n            );\n          },\n        }),\n      },\n      lotNumber: {\n        type: LabelField,\n        label: \"react.stockMovement.lot.label\",\n        defaultMessage: \"Lot\",\n      },\n      expirationDate: {\n        type: LabelField,\n        label: \"react.stockMovement.expiry.label\",\n        defaultMessage: \"Expiry\",\n        fixedWidth: \"120px\",\n      },\n      \"zone.name\": {\n        type: LabelField,\n        label: \"react.stockMovement.binLocation.label\",\n        defaultMessage: \"Zone\",\n      },\n      \"binLocation.name\": {\n        type: LabelField,\n        label: \"react.stockMovement.binLocation.label\",\n        defaultMessage: \"Bin Location\",\n      },\n      quantityAvailable: {\n        type: LabelField,\n        label: \"react.stockMovement.quantityAvailable.label\",\n        defaultMessage: \"Qty Available\",\n        fixedWidth: \"150px\",\n        headerAlign: \"right\",\n        attributes: {\n          cellClassName: \"text-right\",\n          formatValue: (value) =>\n            value || value === 0 ? value.toLocaleString(\"en-US\") : null,\n        },\n      },\n      quantityPicked: {\n        type: TextField,\n        fieldKey: \"\",\n        label: \"react.stockMovement.quantityPicked.label\",\n        defaultMessage: \"Qty Picked\",\n        fixedWidth: \"120px\",\n        headerAlign: \"right\",\n        attributes: {\n          cellClassName: \"text-right\",\n          type: \"number\",\n        },\n        getDynamicAttr: ({ fieldValue }) => ({\n          disabled: fieldValue && !fieldValue.quantityAvailable,\n        }),\n      },\n    },\n  },\n};\n\nfunction validate(values) {\n  const errors = {};\n  errors.availableItems = [];\n\n  const pickedSum = _.reduce(\n    values.availableItems,\n    (sum, val) =>\n      sum + (val.quantityPicked ? _.toInteger(val.quantityPicked) : 0),\n    0,\n  );\n\n  _.forEach(values.availableItems, (item, key) => {\n    if (\n      !Number.isNaN(item.quantityPicked) &&\n      pickedSum !== values.quantityRequired &&\n      item.status !== \"NOT_AVAILABLE\"\n    ) {\n      errors.availableItems[key] = {\n        quantityPicked: \"react.stockMovement.errors.differentTotalQty.label\",\n      };\n    }\n    if (item.quantityPicked > item.quantityAvailable) {\n      errors.availableItems[key] = {\n        quantityPicked: \"react.stockMovement.errors.higherTyPicked.label\",\n      };\n    }\n    if (item.quantityPicked < 0) {\n      errors.availableItems[key] = {\n        quantityPicked: \"react.stockMovement.errors.negativeQtyPicked.label\",\n      };\n    }\n  });\n\n  return errors;\n}\n\n/** Modal window where user can edit pick. */\n/* eslint no-param-reassign: \"error\" */\nclass EditPickModal extends Component {\n  constructor(props) {\n    super(props);\n\n    const {\n      fieldConfig: { attributes, getDynamicAttr },\n    } = props;\n    const dynamicAttr = getDynamicAttr ? getDynamicAttr(props) : {};\n    const attr = { ...attributes, ...dynamicAttr };\n\n    this.state = {\n      attr,\n      formValues: {},\n    };\n\n    this.onOpen = this.onOpen.bind(this);\n    this.onSave = this.onSave.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {\n      fieldConfig: { attributes, getDynamicAttr },\n    } = nextProps;\n    const dynamicAttr = getDynamicAttr ? getDynamicAttr(nextProps) : {};\n    const attr = { ...attributes, ...dynamicAttr };\n\n    this.setState({ attr });\n  }\n\n  /**\n   * Loads chosen items, required quantity and reason codes into modal's form.\n   * @public\n   */\n  onOpen() {\n    this.fetchPickPageItem();\n  }\n\n  /**\n   * Sends all changes made by user in this modal to API and updates data.\n   * @param {object} values\n   * @public\n   */\n  onSave(values) {\n    this.props.showSpinner();\n\n    const picklistUrl = `/api/replenishments/${this.state.attr.itemId}/picklists`;\n    const payload = {\n      picklistItems: _.map(values.availableItems, (avItem) => ({\n        id: avItem.id || \"\",\n        \"inventoryItem.id\": avItem[\"inventoryItem.id\"],\n        \"binLocation.id\": avItem[\"binLocation.id\"] || \"\",\n        quantityPicked: _.isNil(avItem.quantityPicked)\n          ? \"\"\n          : avItem.quantityPicked,\n      })),\n    };\n\n    apiClient\n      .put(picklistUrl, payload)\n      .then(() => {\n        this.props.hideSpinner();\n        this.state.attr.onResponse();\n      })\n      .catch(() => {\n        this.props.hideSpinner();\n      });\n  }\n\n  /**\n   * Sums up quantity picked from all available items.\n   * @param {object} values\n   * @public\n   */\n  /* eslint-disable-next-line class-methods-use-this */\n  calculatePicked(values) {\n    return (\n      <div>\n        <div className=\"font-weight-bold pb-2\">\n          <Translate\n            id=\"react.stockMovement.quantityPicked.label\"\n            defaultMessage=\"Qty Picked\"\n          />\n          :\n          {_.reduce(\n            values.availableItems,\n            (sum, val) =>\n              sum + (val.quantityPicked ? _.toInteger(val.quantityPicked) : 0),\n            0,\n          )}\n        </div>\n        <hr />\n      </div>\n    );\n  }\n\n  fetchPickPageItem() {\n    const itemsUrl = `/api/replenishments/${this.state.attr.itemId}/picklists`;\n\n    apiClient\n      .get(itemsUrl)\n      .then((resp) => {\n        const pickPageItem = resp.data.data;\n\n        const availableItems = _.map(pickPageItem.availableItems, (avItem) => {\n          // check if this picklist item already exists\n          const picklistItem = _.find(\n            pickPageItem.picklistItems,\n            (item) =>\n              item[\"inventoryItem.id\"] === avItem[\"inventoryItem.id\"] &&\n              item[\"binLocation.id\"] === avItem[\"binLocation.id\"],\n          );\n\n          if (picklistItem && avItem.status !== \"NOT_AVAILABLE\") {\n            return {\n              ...avItem,\n              id: picklistItem.id,\n              quantityPicked: picklistItem.quantityPicked,\n              binLocation: {\n                id: picklistItem[\"binLocation.id\"],\n                name: picklistItem[\"binLocation.name\"],\n              },\n              zone: {\n                id: picklistItem[\"binLocation.zoneId\"],\n                name: picklistItem[\"binLocation.zoneName\"],\n              },\n            };\n          }\n\n          return { ...avItem };\n        });\n\n        this.setState({\n          formValues: {\n            availableItems,\n            quantityRequired: pickPageItem.quantityRequired,\n            productCode: pickPageItem.productCode,\n            productName: pickPageItem[\"product.name\"],\n          },\n        });\n\n        this.props.hideSpinner();\n      })\n      .catch(() => {\n        this.props.hideSpinner();\n      });\n  }\n\n  render() {\n    if (this.state.attr.subfield) {\n      return null;\n    }\n\n    return (\n      <ModalWrapper\n        {...this.state.attr}\n        onOpen={this.onOpen}\n        onSave={this.onSave}\n        fields={FIELDS}\n        validate={validate}\n        initialValues={this.state.formValues}\n        formProps={{\n          translate: this.props.translate,\n        }}\n        renderBodyWithValues={this.calculatePicked}\n      >\n        <div>\n          <div className=\"font-weight-bold\">\n            <Translate\n              id=\"react.stockMovement.productCode.label\"\n              defaultMessage=\"Product code\"\n            />\n            :{this.state.formValues.productCode}\n          </div>\n          <div className=\"font-weight-bold\">\n            <Translate\n              id=\"react.stockMovement.productName.label\"\n              defaultMessage=\"Product name\"\n            />\n            :{this.state.formValues.productName}\n          </div>\n          <div className=\"font-weight-bold\">\n            <Translate\n              id=\"react.stockMovement.quantityRequired.label\"\n              defaultMessage=\"Qty Required\"\n            />\n            :{this.state.formValues.quantityRequired}\n          </div>\n        </div>\n      </ModalWrapper>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  translate: translateWithDefaultMessage(getTranslate(state.localize)),\n});\n\nexport default connect(mapStateToProps, { showSpinner, hideSpinner })(\n  EditPickModal,\n);\n\nEditPickModal.propTypes = {\n  /** Name of the field */\n  fieldName: PropTypes.string.isRequired,\n  /** Configuration of the field */\n  fieldConfig: PropTypes.shape({\n    getDynamicAttr: PropTypes.func,\n  }).isRequired,\n  /** Function called when data is loading */\n  showSpinner: PropTypes.func.isRequired,\n  /** Function called when data has loaded */\n  hideSpinner: PropTypes.func.isRequired,\n  /** Is true when currently selected location supports bins */\n  translate: PropTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\n\nimport arrayMutators from \"final-form-arrays\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport { confirmAlert } from \"react-confirm-alert\";\nimport { Form } from \"react-final-form\";\nimport { getTranslate } from \"react-localize-redux\";\nimport { connect } from \"react-redux\";\n\nimport { hideSpinner, showSpinner } from \"actions\";\nimport ArrayField from \"components/form-elements/ArrayField\";\nimport ButtonField from \"components/form-elements/ButtonField\";\nimport LabelField from \"components/form-elements/LabelField\";\nimport TableRowWithSubfields from \"components/form-elements/TableRowWithSubfields\";\nimport EditPickModal from \"components/replenishment/EditPickModal\";\nimport { REPLENISHMENT_URL, STOCK_TRANSFER_URL } from \"consts/applicationUrls\";\nimport apiClient, { flattenRequest } from \"utils/apiClient\";\nimport { renderFormField } from \"utils/form-utils\";\nimport Translate, { translateWithDefaultMessage } from \"utils/Translate\";\n\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\n\nconst FIELDS = {\n  replenishmentItems: {\n    type: ArrayField,\n    rowComponent: TableRowWithSubfields,\n    subfieldKey: \"picklistItems\",\n    getDynamicRowAttr: ({ rowValues, subfield }) => {\n      let className = rowValues.initial ? \"crossed-out \" : \"\";\n      if (!subfield) {\n        className += \"font-weight-bold\";\n      }\n      return { className };\n    },\n    fields: {\n      \"product.productCode\": {\n        type: LabelField,\n        label: \"react.stockMovement.productCode.label\",\n        defaultMessage: \"Code\",\n        flexWidth: \"0.5\",\n        headerAlign: \"left\",\n        attributes: {\n          cellClassName: \"text-left\",\n        },\n      },\n      \"product.name\": {\n        type: LabelField,\n        label: \"react.stockMovement.product.label\",\n        defaultMessage: \"Product\",\n        flexWidth: \"2\",\n        headerAlign: \"left\",\n        attributes: {\n          cellClassName: \"text-left\",\n          showValueTooltip: true,\n        },\n      },\n      \"zone.name\": {\n        type: LabelField,\n        label: \"react.replenishment.zone.label\",\n        defaultMessage: \"Zone\",\n        flexWidth: \"0.5\",\n        attributes: {\n          showValueTooltip: true,\n        },\n      },\n      \"binLocation.name\": {\n        type: LabelField,\n        label: \"react.replenishment.bin.label\",\n        defaultMessage: \"Bin\",\n        flexWidth: \"1\",\n        attributes: {\n          showValueTooltip: true,\n        },\n      },\n      lotNumber: {\n        type: LabelField,\n        label: \"react.replenishment.lot.label\",\n        defaultMessage: \"Lot\",\n        flexWidth: \"1\",\n      },\n      expirationDate: {\n        type: LabelField,\n        label: \"react.replenishment.exp.label\",\n        defaultMessage: \"Exp\",\n        flexWidth: \"1\",\n      },\n      quantity: {\n        type: LabelField,\n        label: \"react.stockMovement.quantityToTransfer.label\",\n        defaultMessage: \"Qty to Transfer\",\n        flexWidth: \"1\",\n        headerAlign: \"right\",\n        attributes: {\n          cellClassName: \"text-right\",\n        },\n      },\n      \"currentBinLocation.name\": {\n        type: LabelField,\n        label: \"react.replenishment.transferTo.label\",\n        defaultMessage: \"Transfer to\",\n        flexWidth: \"1\",\n        attributes: {\n          showValueTooltip: true,\n        },\n        getDynamicAttr: ({ subfield }) => ({\n          formatValue: (value) => {\n            if (subfield || value) {\n              return value;\n            }\n            return \"DEFAULT\";\n          },\n        }),\n      },\n      buttonEditPick: {\n        label: \"react.stockMovement.editPick.label\",\n        defaultMessage: \"Edit pick\",\n        type: EditPickModal,\n        fixedWidth: \"90px\",\n        fieldKey: \"\",\n        attributes: {\n          title: \"react.stockMovement.editPick.label\",\n          defaultTitleMessage: \"Edit Pick\",\n        },\n        getDynamicAttr: ({ fieldValue, refetchReplenishment, subfield }) => ({\n          subfield,\n          itemId: _.get(fieldValue, \"id\"),\n          btnOpenText: \"react.default.button.edit.label\",\n          btnOpenDefaultText: \"Edit\",\n          btnOpenClassName: \"btn btn-outline-primary\",\n          onResponse: refetchReplenishment,\n        }),\n      },\n      revert: {\n        type: ButtonField,\n        label: \"react.default.button.undoEdit.label\",\n        defaultMessage: \"Undo edit\",\n        fixedWidth: \"100px\",\n        fieldKey: \"\",\n        buttonLabel: \"react.default.button.undoEdit.label\",\n        buttonDefaultMessage: \"Undo edit\",\n        getDynamicAttr: ({ fieldValue, revertUserPick, subfield }) => ({\n          hidden: subfield,\n          onClick: _.get(fieldValue, \"id\")\n            ? () => revertUserPick(_.get(fieldValue, \"id\"))\n            : () => null,\n        }),\n        attributes: {\n          className: \"btn btn-outline-danger\",\n        },\n      },\n    },\n  },\n};\n\n/* eslint class-methods-use-this: [\"error\",{ \"exceptMethods\": [\"checkForInitialPicksChanges\"] }] */\nclass ReplenishmentSecondPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      values: { replenishment: { ...this.props.initialValues } },\n      sorted: false,\n    };\n\n    this.revertUserPick = this.revertUserPick.bind(this);\n    this.fetchReplenishment = this.fetchReplenishment.bind(this);\n    this.nextPage = this.nextPage.bind(this);\n    this.printTransferOrder = this.printTransferOrder.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.replenishmentTranslationsFetched) {\n      this.dataFetched = true;\n      this.fetchReplenishment();\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.replenishmentTranslationsFetched && !this.dataFetched) {\n      this.dataFetched = true;\n      this.fetchReplenishment();\n    }\n  }\n\n  dataFetched = false;\n\n  fetchReplenishment() {\n    this.props.showSpinner();\n    const url = `/api/replenishments/${this.props.match.params.replenishmentId}`;\n\n    return apiClient\n      .get(url)\n      .then((resp) => {\n        const replenishment = resp.data.data;\n        this.setState(\n          {\n            values: {\n              replenishment: {\n                ...replenishment,\n                replenishmentItems: _.map(\n                  replenishment.replenishmentItems,\n                  (item) => this.checkForInitialPicksChanges(item),\n                ),\n              },\n            },\n          },\n          () => this.props.hideSpinner(),\n        );\n      })\n      .catch(() => this.props.hideSpinner());\n  }\n\n  recreatePickList() {\n    this.props.showSpinner();\n    const url = `/api/replenishments/${this.props.match.params.replenishmentId}/picklists`;\n\n    apiClient\n      .post(url)\n      .then(() => {\n        this.fetchReplenishment();\n      })\n      .catch(() => this.props.hideSpinner());\n  }\n\n  checkForInitialPicksChanges(pickPageItem) {\n    if (pickPageItem.picklistItems.length) {\n      const initialPicks = [];\n      _.forEach(pickPageItem.suggestedItems, (suggestion) => {\n        // search if suggested picks are inside picklist\n        // if no -> add suggested pick as initial pick (to be crossed out)\n        // if yes -> compare quantityPicked of item in picklist with suggestion\n        const pick = _.find(\n          pickPageItem.picklistItems,\n          (item) =>\n            _.get(suggestion, \"inventoryItem.id\") ===\n              _.get(item, \"inventoryItem.id\") &&\n            _.get(item, \"binLocation.id\") ===\n              _.get(suggestion, \"binLocation.id\"),\n        );\n        if (_.isEmpty(pick) || pick.quantity !== suggestion.quantityPicked) {\n          initialPicks.push({\n            ...suggestion,\n            quantity: suggestion.quantityPicked,\n            initial: true,\n          });\n        }\n      });\n\n      return {\n        ...pickPageItem,\n        picklistItems: _.concat(\n          initialPicks,\n          _.sortBy(pickPageItem.picklistItems, [\"binLocation.name\", \"initial\"]),\n        ),\n      };\n    }\n\n    return pickPageItem;\n  }\n\n  nextPage() {\n    if (this.state.values.replenishment.status === \"PENDING\") {\n      this.props.showSpinner();\n      const url = `/api/replenishments/${this.props.match.params.replenishmentId}`;\n      const payload = { status: \"APPROVED\" };\n      apiClient\n        .post(url, flattenRequest(payload))\n        .then(() => {\n          this.props.hideSpinner();\n          this.props.nextPage(this.state.values.replenishment);\n        })\n        .catch(() => this.props.hideSpinner());\n    } else {\n      this.props.nextPage(this.state.values.replenishment);\n    }\n  }\n\n  printTransferOrder() {\n    window.open(\n      REPLENISHMENT_URL.print(this.props.match.params.replenishmentId),\n      \"_blank\",\n    );\n  }\n\n  revertUserPick(itemId) {\n    this.props.showSpinner();\n\n    const revertPicklistUrl = `/api/replenishments/${itemId}/picklistItem`;\n\n    apiClient\n      .post(revertPicklistUrl, {})\n      .then(() => {\n        this.props.hideSpinner();\n        this.fetchReplenishment();\n      })\n      .catch(() => {\n        this.props.hideSpinner();\n      });\n  }\n\n  refresh() {\n    confirmAlert({\n      title: this.props.translate(\n        \"react.replenishment.confirmRefresh.label\",\n        \"Confirm refresh\",\n      ),\n      message: this.props.translate(\n        \"react.replenishment.confirmRefresh.content.label\",\n        \"This button will redo the autopick on all items. Are you sure you want to continue?\",\n      ),\n      buttons: [\n        {\n          label: this.props.translate(\"react.default.yes.label\", \"Yes\"),\n          onClick: () => {\n            this.recreatePickList();\n          },\n        },\n        {\n          label: this.props.translate(\"react.default.no.label\", \"No\"),\n        },\n      ],\n    });\n  }\n\n  saveAndExit() {\n    window.location = STOCK_TRANSFER_URL.show(\n      this.props.match.params.replenishmentId,\n    );\n  }\n\n  sortByBins() {\n    if (this.state.sorted) {\n      const { replenishment } = this.state.values;\n      const sortedPickItemsByDefault = replenishment.replenishmentItems.map(\n        (item) => ({\n          ...item,\n          picklistItems: _.sortBy(item.picklistItems, [\n            \"binLocation.name\",\n            \"quantity\",\n          ]),\n        }),\n      );\n      this.setState({\n        values: {\n          replenishment: {\n            ...replenishment,\n            replenishmentItems: _.sortBy(sortedPickItemsByDefault, [\n              \"product.productCode\",\n            ]),\n          },\n        },\n        sorted: false,\n      });\n      return;\n    }\n\n    const { replenishment } = this.state.values;\n    const sortedPickItemsByBinName = replenishment.replenishmentItems.map(\n      (item) => ({\n        ...item,\n        picklistItems: _.sortBy(item.picklistItems, [\n          \"zone.name\",\n          \"binLocation.name\",\n        ]),\n      }),\n    );\n    this.setState({\n      values: {\n        replenishment: {\n          ...replenishment,\n          replenishmentItems: _.sortBy(sortedPickItemsByBinName, [\n            \"picklistItems[0].zone.name\",\n            \"picklistItems[0].binLocation.name\",\n          ]),\n        },\n      },\n      sorted: true,\n    });\n  }\n\n  render() {\n    return (\n      <Form\n        onSubmit={() => this.nextPage()}\n        mutators={{ ...arrayMutators }}\n        initialValues={this.state.values.replenishment}\n        render={({ handleSubmit }) => (\n          <div className=\"d-flex flex-column\">\n            <div className=\"submit-buttons d-flex justify-content-end buttons-container\">\n              <button\n                type=\"button\"\n                onClick={() => this.printTransferOrder()}\n                className=\"mb-1 btn btn-outline-secondary btn-xs ml-1\"\n              >\n                <span>\n                  <i className=\"fa fa-print pr-2\" />\n                  <Translate\n                    id=\"react.stockTransfer.printTransferOrder.label\"\n                    defaultMessage=\"Print Transfer Order\"\n                  />\n                </span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => this.refresh()}\n                className=\"mb-1 btn btn-outline-secondary btn-xs ml-1\"\n              >\n                <span>\n                  <i className=\"fa fa-refresh pr-2\" />\n                  <Translate\n                    id=\"react.default.button.refresh.label\"\n                    defaultMessage=\"Reload\"\n                  />\n                </span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => this.saveAndExit()}\n                className=\"mb-1 btn btn-outline-secondary btn-xs ml-1 bg-white border-0\"\n              >\n                <span>\n                  <i className=\"fa fa-sign-out pr-2\" />\n                  <Translate\n                    id=\"react.default.button.saveAndExit.label\"\n                    defaultMessage=\"Save and exit\"\n                  />\n                </span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => this.sortByBins()}\n                className=\"float-right mb-1 btn btn-outline-secondary align-self-end btn-xs\"\n              >\n                {this.state.sorted ? (\n                  <span>\n                    <i className=\"fa fa-sort pr-2\" />\n                    <Translate\n                      id=\"react.replenishment.originalOrder.label\"\n                      defaultMessage=\"Original order\"\n                    />\n                  </span>\n                ) : (\n                  <span>\n                    <i className=\"fa fa-sort pr-2\" />\n                    <Translate\n                      id=\"react.replenishment.sortByBins.label\"\n                      defaultMessage=\"Sort by bins\"\n                    />\n                  </span>\n                )}\n              </button>\n            </div>\n            <form onSubmit={handleSubmit} className=\"print-mt\">\n              <div className=\"table-form\">\n                {_.map(FIELDS, (fieldConfig, fieldName) =>\n                  renderFormField(fieldConfig, fieldName, {\n                    replenishmentId: this.props.match.params.replenishmentId,\n                    refetchReplenishment: this.fetchReplenishment,\n                    locationId: this.props.locationId,\n                    translate: this.props.translate,\n                    revertUserPick: this.revertUserPick,\n                  }),\n                )}\n              </div>\n              <div className=\"submit-buttons\">\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-outline-primary btn-form float-right btn-xs\"\n                >\n                  <Translate\n                    id=\"react.replenishment.next.label\"\n                    defaultMessage=\"Next\"\n                  />\n                </button>\n              </div>\n            </form>\n          </div>\n        )}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  replenishmentTranslationsFetched:\n    state.session.fetchedTranslations.replenishment,\n  translate: translateWithDefaultMessage(getTranslate(state.localize)),\n});\n\nexport default connect(mapStateToProps, {\n  showSpinner,\n  hideSpinner,\n})(ReplenishmentSecondPage);\n\nReplenishmentSecondPage.propTypes = {\n  showSpinner: PropTypes.func.isRequired,\n  hideSpinner: PropTypes.func.isRequired,\n  nextPage: PropTypes.func.isRequired,\n  initialValues: PropTypes.shape({}).isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      replenishmentId: PropTypes.string,\n    }),\n  }).isRequired,\n  locationId: PropTypes.string.isRequired,\n  replenishmentTranslationsFetched: PropTypes.bool.isRequired,\n  translate: PropTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\n\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport { getTranslate } from \"react-localize-redux\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { fetchTranslations, hideSpinner, showSpinner } from \"actions\";\nimport CreateReplenishment from \"components/replenishment/CreateReplenishment\";\nimport ReplenishmentCheckPage from \"components/replenishment/ReplenishmentCheckPage\";\nimport ReplenishmentSecondPage from \"components/replenishment/ReplenishmentSecondPage\";\nimport Wizard from \"components/wizard/Wizard\";\nimport apiClient, { parseResponse } from \"utils/apiClient\";\nimport { translateWithDefaultMessage } from \"utils/Translate\";\n\nimport \"components/replenishment/Replenishment.scss\";\n\nclass ReplenishmentWizard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      replenishment: {},\n      page: props.match.params.replenishmentId ? 2 : 1,\n    };\n\n    this.updateWizardValues = this.updateWizardValues.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchTranslations(\"\", \"replenishment\");\n\n    if (this.props.replenishmentTranslationsFetched) {\n      this.dataFetched = true;\n\n      this.fetchReplenishment();\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.locale && this.props.locale !== nextProps.locale) {\n      this.props.fetchTranslations(nextProps.locale, \"replenishment\");\n    }\n\n    if (nextProps.replenishmentTranslationsFetched && !this.dataFetched) {\n      this.dataFetched = true;\n\n      this.fetchReplenishment();\n    }\n  }\n\n  get stepList() {\n    return [\n      this.props.translate(\n        \"react.replenishment.createReplenishment.label\",\n        \"Create Replenishment\",\n      ),\n      this.props.translate(\n        \"react.replenishment.startReplenishment.label\",\n        \"Start Replenishment\",\n      ),\n      this.props.translate(\n        \"react.replenishment.checkReplenishment.label\",\n        \"Check Replenishment\",\n      ),\n    ];\n  }\n\n  get wizardTitle() {\n    const { replenishment } = this.state;\n    if (replenishment?.replenishmentNumber) {\n      return [\n        {\n          text: this.props.translate(\n            \"react.binReplenishment.label\",\n            \"Bin replenishment\",\n          ),\n          color: \"#000000\",\n          delimeter: \" | \",\n        },\n        {\n          text: replenishment.replenishmentNumber,\n          color: \"#000000\",\n          delimeter: \"\",\n        },\n      ];\n    }\n    return [];\n  }\n\n  updateWizardValues(page, replenishment) {\n    this.setState({ page, replenishment });\n  }\n\n  dataFetched = false;\n\n  fetchReplenishment() {\n    if (this.props.match.params.replenishmentId) {\n      this.props.showSpinner();\n      const url = `/api/replenishments/${this.props.match.params.replenishmentId}`;\n\n      apiClient\n        .get(url)\n        .then((response) => {\n          const replenishment = parseResponse(response.data.data);\n          this.setState(\n            { replenishment, page: replenishment.status === \"PENDING\" ? 2 : 3 },\n            () => this.props.hideSpinner(),\n          );\n        })\n        .catch(() => this.props.hideSpinner());\n    }\n  }\n\n  render() {\n    const { page, replenishment } = this.state;\n    const { location, history, match } = this.props;\n    const locationId = location.id;\n    const pageList = [\n      CreateReplenishment,\n      ReplenishmentSecondPage,\n      ReplenishmentCheckPage,\n    ];\n\n    if (_.get(location, \"id\")) {\n      return (\n        <Wizard\n          pageList={pageList}\n          stepList={this.stepList}\n          initialValues={replenishment}\n          title={this.wizardTitle}\n          currentPage={page}\n          prevPage={page === 1 ? 1 : page - 1}\n          updateWizardValues={this.updateWizardValues}\n          additionalProps={{\n            locationId,\n            location,\n            history,\n            match,\n          }}\n        />\n      );\n    }\n\n    return null;\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  location: state.session.currentLocation,\n  locale: state.session.activeLanguage,\n  replenishmentTranslationsFetched:\n    state.session.fetchedTranslations.replenishment,\n  translate: translateWithDefaultMessage(getTranslate(state.localize)),\n});\n\nexport default withRouter(\n  connect(mapStateToProps, {\n    showSpinner,\n    hideSpinner,\n    fetchTranslations,\n  })(ReplenishmentWizard),\n);\n\nReplenishmentWizard.propTypes = {\n  location: PropTypes.shape({\n    id: PropTypes.string,\n  }).isRequired,\n  locale: PropTypes.string.isRequired,\n  replenishmentTranslationsFetched: PropTypes.bool.isRequired,\n  fetchTranslations: PropTypes.func.isRequired,\n  translate: PropTypes.func.isRequired,\n  showSpinner: PropTypes.func.isRequired,\n  hideSpinner: PropTypes.func.isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({ replenishmentId: PropTypes.string }),\n  }).isRequired,\n  history: PropTypes.shape({ push: PropTypes.func }).isRequired,\n};\n","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\nimport { Tooltip } from \"react-tippy\";\n\nimport Translate from \"utils/Translate\";\n\nconst ButtonField = (props) => {\n  const {\n    fieldName,\n    fieldConfig: {\n      buttonLabel: ButtonLabel,\n      buttonDefaultMessage,\n      getDynamicAttr,\n      attributes = { className: \"btn-outline-primary\" },\n    },\n  } = props;\n  const dynamicAttr = getDynamicAttr ? getDynamicAttr(props) : {};\n  const attr = { ...attributes, ...dynamicAttr };\n\n  return (\n    <button\n      type=\"button\"\n      key={fieldName}\n      {...attr}\n      className={`text-truncate btn btn-xs ${attr.className}`}\n    >\n      {typeof ButtonLabel === \"string\" ? (\n        <Tooltip\n          html={\n            ButtonLabel && (\n              <Translate\n                id={ButtonLabel}\n                defaultMessage={buttonDefaultMessage}\n              />\n            )\n          }\n          theme=\"transparent\"\n          arrow=\"true\"\n          delay=\"150\"\n          duration=\"250\"\n          hideDelay=\"50\"\n        >\n          {\" \"}\n          <Translate id={ButtonLabel} defaultMessage={buttonDefaultMessage} />\n        </Tooltip>\n      ) : (\n        <ButtonLabel />\n      )}\n    </button>\n  );\n};\n\nexport default ButtonField;\n\nButtonField.propTypes = {\n  fieldName: PropTypes.string.isRequired,\n  fieldConfig: PropTypes.shape({\n    getDynamicAttr: PropTypes.func,\n  }).isRequired,\n};\n"],"names":["TableRowWithSubfields","_Component","props","_this","_classCallCheck","_callSuper","fieldRefs","focusField","bind","copyDown","_inherits","key","value","nextProps","_","this","objValue","othValue","index","fieldName","field","concat","focus","valueToCopy","disabled","_this2","_this$props","fieldsConfig","properties","_this$props$rowValues","rowValues","dynamicAttr","getDynamicRowAttr","_objectSpread","subfieldKey","React","TableRow","hideSubfields","FieldArray","name","component","TableBody","parentIndex","subfield","tableRef","el","elIndex","Component","propTypes","PropTypes","getDynamicAttr","isRequired","addRow","removeRow","defaultProps","ModalWrapper","state","showModal","openModal","closeModal","save","onOpen","setState","onClose","values","onSave","Title","title","defaultTitleMessage","className","wrapperClassName","renderButton","type","btnOpenClassName","style","btnOpenStyle","btnOpenDisabled","onClick","btnOpenIcon","btnOpenText","btnOpenAsIcon","Translate","id","defaultMessage","btnOpenDefaultText","Modal","isOpen","onRequestClose","shouldCloseOnOverlayClick","bodyContainerClassName","bodyContainerStyle","Form","onSubmit","initialValues","validate","mutators","arrayMutators","render","_ref","handleSubmit","children","renderBodyWithValues","fields","fieldConfig","renderFormField","formProps","btnContainerClassName","role","btnContainerStyle","btnCancelClassName","btnCancelStyle","btnCancelText","btnCancelDefaultText","btnSaveClassName","btnSaveStyle","btnSaveDisabled","btnSaveText","btnSaveDefaultText","undefined","Checkbox","indeterminate","custom","fieldRef","withLabel","label","_objectWithoutProperties","_excluded","onChange","event","checked","target","htmlFor","_extends","ref","elem","margin","BaseField","renderInput","attributes","FIELD","requirements","ArrayField","arrowsNavigation","CheckboxField","flexWidth","rowIndex","allRowsSelected","selectAllCode","updateSelectedItems","headerHtml","checkState","LabelField","headerAlign","cellClassName","showValueTooltip","zone","formatValue","quantityInBin","maxQuantity","quantityAvailable","quantity","TextField","fieldKey","_ref2","updateRow","onBlur","errors","item","row","CreateReplenishment","_defineProperty","inventoryLevelStatus","statusOptions","isDirty","selectAllRows","replenishmentTranslationsFetched","dataFetched","fetchStatusOptions","fetchRequirements","locationId","createInfoBar","InfoBarConfigs","InfoBar","STOCK_REPLENISHMENT_DESCRIPTION","hideInfoBar","isAllSelected","prev","update","$apply","req","map","it","checkedValue","$set","apiClient","get","then","resp","data","_this3","showSpinner","url","parseResponse","requirement","quantityNeeded","hideSpinner","_this4","payload","replenishmentItems","filter","post","flattenRequest","response","_response$data","_response$data2","history","push","REPLENISHMENT_URL","edit","nextPage","_this5","confirmAlert","translate","message","buttons","_this6","_ref3","invalid","Select","inventoryLevelStatusChange","options","clearable","createReplenishment","mapDispatchToProps","connect","session","fetchedTranslations","replenishment","translateWithDefaultMessage","getTranslate","localize","FIELDS","rowComponent","initial","lotNumber","expirationDate","ReplenishmentSecondPage","fetchReplenishment","match","params","replenishmentId","checkForInitialPicksChanges","pickPageItem","picklistItems","length","initialPicks","suggestedItems","suggestion","pick","quantityPicked","status","window","location","STOCK_TRANSFER_URL","show","previousPage","completeReplenishment","availableItems","fieldValue","fixedWidth","toLocaleString","pickedSum","sum","val","Number","isNaN","quantityRequired","EditPickModal","_props$fieldConfig","attr","formValues","_nextProps$fieldConfi","fetchPickPageItem","picklistUrl","itemId","avItem","put","onResponse","itemsUrl","picklistItem","binLocation","productCode","productName","calculatePicked","buttonEditPick","refetchReplenishment","revert","ButtonField","buttonLabel","buttonDefaultMessage","_ref4","revertUserPick","hidden","sorted","printTransferOrder","open","print","revertPicklistUrl","recreatePickList","sortedPickItemsByDefault","sortedPickItemsByBinName","_this7","_ref5","refresh","saveAndExit","sortByBins","ReplenishmentWizard","page","updateWizardValues","fetchTranslations","locale","replenishmentNumber","text","color","delimeter","_this$state","pageList","ReplenishmentCheckPage","Wizard","stepList","wizardTitle","currentPage","prevPage","additionalProps","withRouter","currentLocation","activeLanguage","ButtonLabel","_props$fieldConfig$at","Tooltip","html","theme","arrow","delay","duration","hideDelay"],"sourceRoot":""}