{"version":3,"file":"bundle.929af1b45eb780bfc503.6614.js","mappings":"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","sources":["webpack://openboxes/./src/js/consts/stockTransferStatus.js","webpack://openboxes/./src/js/components/stock-transfer/CreateStockTransfer.jsx","webpack://openboxes/./src/js/components/stock-transfer/utils.jsx","webpack://openboxes/./src/js/components/stock-transfer/StockTransferCheckPage.jsx","webpack://openboxes/./src/js/components/stock-transfer/StockTransferSecondPage.jsx","webpack://openboxes/./src/js/components/stock-transfer/StockTransferWizard.jsx"],"sourcesContent":["const StockTransferStatus = {\n  READY: 'READY',\n  PENDING: 'PENDING',\n  APPROVED: 'APPROVED',\n  PLACED: 'PLACED',\n  COMPLETED: 'COMPLETED',\n  CANCELED: 'CANCELED',\n};\n\nexport default StockTransferStatus;\n","import React, { Component } from \"react\";\n\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport ReactTable from \"react-table\";\nimport selectTableHOC from \"react-table/lib/hoc/selectTable\";\n\nimport { createInfoBar, hideInfoBar, hideSpinner, showSpinner } from \"actions\";\nimport { STOCK_TRANSFER_CANDIDATES } from \"api/urls\";\nimport { TableCell } from \"components/DataTable\";\nimport { STOCK_TRANSFER_URL } from \"consts/applicationUrls\";\nimport DateFormat from \"consts/dateFormat\";\nimport { InfoBar, InfoBarConfigs } from \"consts/infoBar\";\nimport apiClient, { flattenRequest, parseResponse } from \"utils/apiClient\";\nimport customTreeTableHOC from \"utils/CustomTreeTable\";\nimport Filter from \"utils/Filter\";\nimport Translate from \"utils/Translate\";\nimport { formatDate } from \"utils/translation-utils\";\n\n//import \"react-table/react-table.css\";\n\nconst SelectTreeTable = selectTableHOC(customTreeTableHOC(ReactTable));\n\n/* eslint-disable no-underscore-dangle */\n\nfunction getNodes(data, node = []) {\n  data.forEach((item) => {\n    if (\n      Object.prototype.hasOwnProperty.call(item, \"_subRows\") &&\n      item._subRows\n    ) {\n      // eslint-disable-next-line no-param-reassign\n      node = getNodes(item._subRows, node);\n    } else {\n      node.push(item._original);\n    }\n  });\n  return node;\n}\n\n/**\n * The first page of stock transfer where user chooses product to transfer\n */\nclass CreateStockTransfer extends Component {\n  constructor(props) {\n    super(props);\n    const columns = this.getColumns();\n    this.state = {\n      stockTransferItems: [],\n      columns,\n      selection: new Set(),\n      selectAll: false,\n      selectType: \"checkbox\",\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.stockTransferTranslationsFetched) {\n      this.dataFetched = true;\n      // Not passing location id here, because when jumping from gsp to react pages,\n      // the redux persist doesn't have enough time to refresh local storage. In this case\n      // we want to use location id from the session on backend.\n      this.fetchStockTransferCandidates();\n    }\n\n    this.props.createInfoBar(\n      InfoBarConfigs[InfoBar.STOCK_TRANSFER_DESCRIPTION],\n    );\n  }\n\n  componentWillUnmount() {\n    this.props.hideInfoBar(InfoBar.STOCK_TRANSFER_DESCRIPTION);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.stockTransferTranslationsFetched) {\n      if (!this.dataFetched) {\n        this.dataFetched = true;\n\n        this.fetchStockTransferCandidates(this.props.locationId);\n      } else if (this.props.locationId !== nextProps.locationId) {\n        this.fetchStockTransferCandidates(nextProps.locationId);\n      }\n    }\n  }\n\n  /**\n   * Returns an array of columns which are passed to the table.\n   * @public\n   */\n  getColumns = () => [\n    {\n      Header: (\n        <Translate id=\"react.stockTransfer.code.label\" defaultMessage=\"Code\" />\n      ),\n      accessor: \"product.productCode\",\n      style: { whiteSpace: \"normal\" },\n      Filter,\n    },\n    {\n      Header: (\n        <Translate\n          id=\"react.stockTransfer.product.label\"\n          defaultMessage=\"Product\"\n        />\n      ),\n      accessor: \"product\",\n      style: { whiteSpace: \"normal\" },\n      Cell: (row) => (\n        <TableCell\n          {...row}\n          value={row.value?.displayName ?? row.value?.name}\n          tooltip={\n            row.value?.displayName && row.value?.name !== row.value?.displayName\n          }\n          tooltipLabel={row.value?.name}\n        />\n      ),\n      Filter,\n    },\n    {\n      Header: (\n        <Translate id=\"react.stockTransfer.lot.label\" defaultMessage=\"Lot\" />\n      ),\n      accessor: \"lotNumber\",\n      style: { whiteSpace: \"normal\" },\n      Filter,\n    },\n    {\n      Header: (\n        <Translate\n          id=\"react.stockTransfer.expiry.label\"\n          defaultMessage=\"Expiry\"\n        />\n      ),\n      accessor: \"expirationDate\",\n      style: { whiteSpace: \"normal\" },\n      Cell: (props) => (\n        <span>\n          {props?.value\n            ? this.props.formatLocalizedDate(props.value, DateFormat.COMMON)\n            : props.value}\n        </span>\n      ),\n      Filter,\n    },\n    {\n      Header: (\n        <Translate id=\"react.stockTransfer.zone.label\" defaultMessage=\"Zone\" />\n      ),\n      accessor: \"originZone\",\n      style: { whiteSpace: \"normal\" },\n      Filter,\n    },\n    {\n      Header: (\n        <Translate\n          id=\"react.stockTransfer.binLocation.label\"\n          defaultMessage=\"Bin Location\"\n        />\n      ),\n      accessor: \"originBinLocation.name\",\n      style: { whiteSpace: \"normal\" },\n      Filter,\n    },\n    {\n      Header: (\n        <Translate\n          id=\"react.stockTransfer.quantityOnHand.label\"\n          defaultMessage=\"QOH\"\n        />\n      ),\n      accessor: \"quantityOnHand\",\n      style: { whiteSpace: \"normal\" },\n      Cell: (props) => (\n        <span>\n          {props.value ? props.value.toLocaleString(\"en-US\") : props.value}\n        </span>\n      ),\n      Filter,\n    },\n    {\n      Header: (\n        <Translate\n          id=\"react.stockTransfer.quantityAvailableToTransfer.label\"\n          defaultMessage=\"Quantity Available to Transfer\"\n        />\n      ),\n      accessor: \"quantityNotPicked\",\n      style: { whiteSpace: \"normal\" },\n      Cell: (props) => (\n        <span>\n          {props.value ? props.value.toLocaleString(\"en-US\") : props.value}\n        </span>\n      ),\n      Filter,\n    },\n  ];\n\n  dataFetched = false;\n\n  /**\n   * Fetches available items to stock transfer from API.\n   * @public\n   */\n  fetchStockTransferCandidates(locationId) {\n    this.props.showSpinner();\n    return apiClient\n      .get(STOCK_TRANSFER_CANDIDATES(locationId))\n      .then((resp) => {\n        const stockTransferCandidates = parseResponse(resp.data.data);\n        const stockTransferItems = [];\n        stockTransferCandidates.forEach((item) => {\n          // this _id is used internally in TreeTable\n          const _id = _.uniqueId(\"item_\");\n          stockTransferItems.push({ _id, ...item });\n        });\n        this.setState({ stockTransferItems }, () => this.props.hideSpinner());\n      })\n      .catch(() => this.props.hideSpinner());\n  }\n\n  filterMethod = (filter, row) => {\n    let val = row[filter.id];\n    if (filter.id === \"expirationDate\") {\n      val = this.props.formatLocalizedDate(val, DateFormat.COMMON);\n    }\n    if (filter.id === \"product\") {\n      val = val ? `${val.name} ${val.displayName}` : null;\n    }\n    return _.toString(val).toLowerCase().includes(filter.value.toLowerCase());\n  };\n\n  /**\n   * Sends all changes made by user in this step of stock transfer to API and updates data.\n   * @public\n   */\n  createStockTransfer() {\n    this.props.showSpinner();\n    const url = \"/api/stockTransfers/\";\n    const payload = {\n      stockTransferItems: _.filter(this.state.stockTransferItems, (item) =>\n        _.includes([...this.state.selection], item._id),\n      ),\n    };\n\n    apiClient\n      .post(url, flattenRequest(payload))\n      .then((response) => {\n        const stockTransfer = parseResponse(response.data.data);\n        this.props.hideSpinner();\n\n        this.props.history.push(\n          STOCK_TRANSFER_URL.createById(stockTransfer.id),\n        );\n        this.props.nextPage({ stockTransfer });\n      })\n      .catch(() => this.props.hideSpinner());\n  }\n\n  /**\n   * Adds all items that are in the current filtered data to selection array.\n   * @public\n   */\n  toggleAll = () => {\n    /*\n      Select ALL the records that are in the current filtered data\n    */\n    const { selectAll } = this.state;\n    const selection = [];\n    // we need to get at the internals of ReactTable\n    const wrappedInstance = this.selectTable.getWrappedInstance();\n    // the 'sortedData' property contains the currently accessible\n    // records based on the filter and sort\n    const currentRecords = wrappedInstance.getResolvedState().sortedData;\n    // we need to get all the 'real' (original) records out to get at their IDs\n    const nodes = getNodes(currentRecords);\n    // we just push all the IDs onto the selection array\n    nodes.forEach((item) => {\n      if (item && item.quantityNotPicked !== 0) {\n        selection.push(item._id);\n      }\n    });\n    this.toggleSelection(selection, !selectAll);\n    this.setState({ selectAll: !selectAll });\n  };\n\n  /**\n   * React table's method which detects the selection state itselfs.\n   * @param {string} key\n   * @public\n   */\n  isSelected = (key) => _.includes([...this.state.selection], key);\n\n  /**\n   * Adds or deletes item from selection array depending on what user did.\n   * @param {object} keys\n   * @param {boolean} checked\n   * @public\n   */\n  toggleSelection = (keys, checked) => {\n    const { selection: selectionFromState } = this.state;\n    const selection = new Set(selectionFromState);\n    if (Array.isArray(keys)) {\n      if (checked) {\n        _.forEach(keys, (item) => {\n          selection.add(item);\n        });\n      } else {\n        _.forEach(keys, (item) => {\n          selection.delete(item);\n        });\n      }\n    } else if (selection.has(keys)) {\n      selection.delete(keys);\n    } else if (!selection.has(keys)) {\n      selection.add(keys);\n    }\n    this.setState({ selection });\n  };\n\n  render() {\n    const { toggleSelection, toggleAll, isSelected } = this;\n    const { stockTransferItems, columns, selectAll, selectType } = this.state;\n    const extraProps = {\n      selectAll,\n      isSelected,\n      toggleAll,\n      toggleSelection,\n      selectType,\n    };\n\n    return (\n      <div className=\"stock-transfer\">\n        <div className=\"d-flex justify-content-between stock-transfer-buttons\">\n          <div className=\"count-selected \">\n            {this.state.selection.size}{\" \"}\n            <Translate\n              id=\"react.stockTransfer.selected.label\"\n              defaultMessage=\"Selected\"\n            />\n          </div>\n          <button\n            type=\"button\"\n            disabled={this.state.selection.size < 1}\n            onClick={() => this.createStockTransfer()}\n            className=\"btn btn-outline-primary btn-form float-right btn-xs\"\n          >\n            <Translate\n              id=\"react.stockTransfer.startStockTransfer.label\"\n              defaultMessage=\"Start Stock Transfer\"\n            />\n          </button>\n        </div>\n        {stockTransferItems ? (\n          <SelectTreeTable\n            data={stockTransferItems}\n            columns={columns}\n            ref={(r) => {\n              this.selectTable = r;\n            }}\n            className=\"-striped -highlight\"\n            {...extraProps}\n            defaultPageSize={Number.MAX_SAFE_INTEGER}\n            minRows={0}\n            showPaginationBottom={false}\n            filterable\n            defaultFilterMethod={this.filterMethod}\n            SelectInputComponent={({ id, checked, onClick, row }) => (\n              <input\n                type={selectType}\n                checked={checked}\n                disabled={row && row.quantityNotPicked === 0}\n                onChange={() => {}}\n                onClick={(e) => {\n                  const { shiftKey } = e;\n\n                  e.stopPropagation();\n                  onClick(id, shiftKey, row);\n                }}\n              />\n            )}\n          />\n        ) : null}\n        <div className=\"submit-buttons\">\n          <button\n            type=\"button\"\n            disabled={this.state.selection.size < 1}\n            onClick={() => this.createStockTransfer()}\n            className=\"btn btn-outline-primary btn-form float-right btn-xs\"\n          >\n            <Translate\n              id=\"react.stockTransfer.startStockTransfer.label\"\n              defaultMessage=\"Start Stock Transfer\"\n            />\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  stockTransferTranslationsFetched:\n    state.session.fetchedTranslations.stockTransfer,\n  formatLocalizedDate: formatDate(state.localize),\n});\n\nconst mapDispatchToProps = {\n  showSpinner,\n  hideSpinner,\n  createInfoBar,\n  hideInfoBar,\n};\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(CreateStockTransfer),\n);\n\nCreateStockTransfer.propTypes = {\n  /** Function called when data is loading */\n  showSpinner: PropTypes.func.isRequired,\n  /** Function called when data has loaded */\n  hideSpinner: PropTypes.func.isRequired,\n  /** Function taking user to the next page */\n  nextPage: PropTypes.func.isRequired,\n  /** Location ID (currently chosen). To be used in stock transfer requests. */\n  locationId: PropTypes.string.isRequired,\n  /** React router's object used to manage session history */\n  history: PropTypes.shape({ push: PropTypes.func }).isRequired,\n  stockTransferTranslationsFetched: PropTypes.bool.isRequired,\n  formatLocalizedDate: PropTypes.func.isRequired,\n  hideInfoBar: PropTypes.func.isRequired,\n  createInfoBar: PropTypes.func.isRequired,\n};\n","import _ from \"lodash\";\n\nconst PENDING = \"PENDING\";\nconst CANCELED = \"CANCELED\";\n\nfunction extractItem(item, status) {\n  const { destinationBinLocation, destinationZone } = item;\n\n  let destinationBin = {};\n  if (status === PENDING) {\n    destinationBin = {\n      id: null,\n      name: null,\n      zoneId: null,\n      zoneName: null,\n    };\n  } else {\n    destinationBin = {\n      id:\n        destinationBinLocation && destinationBinLocation.id\n          ? destinationBinLocation.id\n          : null,\n      name:\n        destinationBinLocation && destinationBinLocation.name\n          ? destinationBinLocation.name\n          : null,\n      zoneId: destinationZone && destinationZone.id ? destinationZone.id : null,\n      zoneName:\n        destinationZone && destinationZone.name ? destinationZone.name : null,\n    };\n  }\n\n  return {\n    ...item,\n    destinationBinLocation: destinationBin,\n    quantity: status === PENDING ? \"\" : item.quantity,\n  };\n}\n\nfunction extractSplitItem(item, splitItem, status) {\n  let destinationBin = {};\n\n  if (status === PENDING) {\n    destinationBin = {\n      id: null,\n      name: null,\n      zoneId: null,\n      zoneName: null,\n    };\n  } else {\n    destinationBin = {\n      id: splitItem.destinationBinLocation.id\n        ? splitItem.destinationBinLocation.id\n        : null,\n      name: splitItem.destinationBinLocation.name\n        ? splitItem.destinationBinLocation.name\n        : null,\n      zoneId: splitItem.destinationZone ? splitItem.destinationZone.id : null,\n      zoneName: splitItem.destinationZone\n        ? splitItem.destinationZone.name\n        : null,\n    };\n  }\n\n  return {\n    ...splitItem,\n    destinationBinLocation: destinationBin,\n    quantity: status === PENDING ? \"\" : splitItem.quantity,\n    quantityOnHand: item.quantityOnHand,\n    referenceId: item.id, // set a referenceId from original item\n  };\n}\n\nexport function extractStockTransferItems(stockTransfer) {\n  const stockTransferItems = [];\n  _.forEach(stockTransfer.stockTransferItems, (item) => {\n    stockTransferItems.push(extractItem(item, stockTransfer.status));\n    if (item.splitItems.length > 0) {\n      _.forEach(item.splitItems, (splitItem) => {\n        stockTransferItems.push(\n          extractSplitItem(item, splitItem, stockTransfer.status),\n        );\n      });\n    }\n  });\n  return stockTransferItems;\n}\n\nexport function extractNonCanceledItems(stockTransfer) {\n  const stockTransferItems = [];\n  _.forEach(stockTransfer.stockTransferItems, (item) => {\n    if (item.status !== CANCELED) {\n      stockTransferItems.push(extractItem(item, stockTransfer.status));\n    }\n    if (item.splitItems.length > 0) {\n      _.forEach(item.splitItems, (splitItem) => {\n        stockTransferItems.push(\n          extractSplitItem(item, splitItem, stockTransfer.status),\n        );\n      });\n    }\n  });\n  return stockTransferItems;\n}\n\nexport function prepareRequest(stockTransfer, status) {\n  const originalItems = _.filter(\n    stockTransfer.stockTransferItems,\n    (item) => !item.referenceId,\n  );\n  const stockTransferItems = _.map(originalItems, (item) => ({\n    ...item,\n    splitItems: _.filter(\n      stockTransfer.stockTransferItems,\n      (splitItem) => splitItem.referenceId === item.id,\n    ),\n    quantity: item.quantity === \"\" ? item.quantityOnHand : item.quantity,\n  }));\n\n  return { ...stockTransfer, stockTransferItems, status };\n}\n","import React, { Component } from \"react\";\n\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport { confirmAlert } from \"react-confirm-alert\";\nimport { getTranslate } from \"react-localize-redux\";\nimport { connect } from \"react-redux\";\nimport Alert from \"react-s-alert\";\nimport ReactTable from \"react-table\";\n\nimport { hideSpinner, showSpinner } from \"actions\";\nimport { TableCell } from \"components/DataTable\";\nimport { extractNonCanceledItems } from \"components/stock-transfer/utils\";\nimport { STOCK_TRANSFER_URL } from \"consts/applicationUrls\";\nimport DateFormat from \"consts/dateFormat\";\nimport apiClient, { flattenRequest, parseResponse } from \"utils/apiClient\";\nimport customTreeTableHOC from \"utils/CustomTreeTable\";\nimport Filter from \"utils/Filter\";\nimport Translate, { translateWithDefaultMessage } from \"utils/Translate\";\nimport { formatDate } from \"utils/translation-utils\";\n\nimport \"react-table/react-table.css\";\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\n\nconst SelectTreeTable = customTreeTableHOC(ReactTable);\n\nconst COMPLETED = \"COMPLETED\";\n\n/**\n * The second page of stock transfer where user can choose qty and bin to transfer\n * or generate stock transfer list(pdf).\n */\nclass StockTransferSecondPage extends Component {\n  constructor(props) {\n    super(props);\n    this.getColumns = this.getColumns.bind(this);\n    const columns = this.getColumns();\n\n    const {\n      initialValues: { stockTransfer },\n    } = this.props;\n\n    this.state = {\n      stockTransfer: stockTransfer || {},\n      columns,\n    };\n\n    this.completeStockTransfer = this.completeStockTransfer.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.stockTransferTranslationsFetched) {\n      this.dataFetched = true;\n    }\n    this.fetchStockTransfer();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.stockTransferTranslationsFetched && !this.dataFetched) {\n      this.dataFetched = true;\n    }\n  }\n\n  /**\n   * Returns an array of columns which are passed to the table.\n   * @public\n   */\n  getColumns = () => [\n    {\n      Header: (\n        <Translate id=\"react.stockTransfer.code.label\" defaultMessage=\"Code\" />\n      ),\n      accessor: \"product.productCode\",\n      style: { whiteSpace: \"normal\" },\n      Filter,\n    },\n    {\n      Header: (\n        <Translate\n          id=\"react.stockTransfer.product.label\"\n          defaultMessage=\"Product\"\n        />\n      ),\n      accessor: \"product\",\n      style: { whiteSpace: \"normal\" },\n      Cell: (row) => (\n        <TableCell\n          {...row}\n          value={row.value?.displayName ?? row.value?.name}\n          tooltip={\n            row.value?.displayName && row.value?.name !== row.value?.displayName\n          }\n          tooltipLabel={row.value?.name}\n        />\n      ),\n      Filter,\n    },\n    {\n      Header: (\n        <Translate id=\"react.stockTransfer.lot.label\" defaultMessage=\"Lot\" />\n      ),\n      accessor: \"lotNumber\",\n      style: { whiteSpace: \"normal\" },\n      Filter,\n    },\n    {\n      Header: (\n        <Translate\n          id=\"react.stockTransfer.expiry.label\"\n          defaultMessage=\"Expiry\"\n        />\n      ),\n      accessor: \"expirationDate\",\n      style: { whiteSpace: \"normal\" },\n      Cell: (props) => (\n        <span>\n          {props?.value\n            ? this.props.formatLocalizedDate(props.value, DateFormat.COMMON)\n            : props.value}\n        </span>\n      ),\n      Filter,\n    },\n    {\n      Header: (\n        <Translate\n          id=\"react.stockTransfer.quantityAvailableToTransfer.label\"\n          defaultMessage=\"Quantity Available to Transfer\"\n        />\n      ),\n      accessor: \"quantityNotPicked\",\n      style: { whiteSpace: \"normal\" },\n      width: 220,\n      Filter,\n    },\n    {\n      Header: (\n        <Translate\n          id=\"react.stockTransfer.currentZone.label\"\n          defaultMessage=\"Current Zone\"\n        />\n      ),\n      accessor: \"originZone\",\n      style: { whiteSpace: \"normal\" },\n      Filter,\n    },\n    {\n      Header: (\n        <Translate\n          id=\"react.stockTransfer.currentBinLocation.label\"\n          defaultMessage=\"Current Bin Location\"\n        />\n      ),\n      accessor: \"originBinLocation.name\",\n      style: { whiteSpace: \"normal\" },\n      Filter,\n    },\n    {\n      Header: (\n        <Translate\n          id=\"react.stockTransfer.qtyToTransfer.label\"\n          defaultMessage=\"Qty to Transfer\"\n        />\n      ),\n      accessor: \"quantity\",\n      style: { whiteSpace: \"normal\" },\n      Filter,\n    },\n    {\n      Header: (\n        <Translate\n          id=\"react.stockTransfer.transferTo.label\"\n          defaultMessage=\"Transfer to\"\n        />\n      ),\n      accessor: \"destinationBinLocation.name\",\n      style: { whiteSpace: \"normal\" },\n      Filter,\n    },\n  ];\n\n  dataFetched = false;\n\n  /**\n   * Fetches stock transfer items and sets them in redux form and in\n   * state as current line items.\n   * @public\n   */\n\n  fetchStockTransfer() {\n    this.props.showSpinner();\n    const url = `/api/stockTransfers/${this.props.match.params.stockTransferId}`;\n\n    apiClient\n      .get(url)\n      .then((response) => {\n        const stockTransfer = parseResponse(response.data.data);\n        const stockTransferItems = extractNonCanceledItems(stockTransfer);\n\n        this.setState(\n          {\n            stockTransfer: { ...stockTransfer, stockTransferItems },\n            originalItems: stockTransfer.stockTransferItems,\n          },\n          () => this.props.hideSpinner(),\n        );\n      })\n      .catch(() => this.props.hideSpinner());\n  }\n\n  filterMethod = (filter, row) => {\n    let val = row[filter.id];\n    if (filter.id === \"product\") {\n      val = val ? `${val.name} ${val.displayName}` : null;\n    }\n    return _.toString(val).toLowerCase().includes(filter.value.toLowerCase());\n  };\n\n  /**\n   * Sends all changes made by user in this step of stock transfer to API and updates data.\n   * @public\n   */\n  save() {\n    this.props.showSpinner();\n    const url = `/api/stockTransfers/${this.props.match.params.stockTransferId}`;\n\n    const payload = {\n      ...this.state.stockTransfer,\n      stockTransferItems: this.state.originalItems,\n      status: COMPLETED,\n    };\n\n    return apiClient\n      .put(url, flattenRequest(payload))\n      .then(() => {\n        this.props.hideSpinner();\n        Alert.success(\n          this.props.translate(\n            \"react.stockTransfer.alert.stockTransferCompleted.label\",\n            \"Stock transfer was successfully completed!\",\n          ),\n          { timeout: 3000 },\n        );\n        window.location = STOCK_TRANSFER_URL.show(this.state.stockTransfer.id);\n      })\n      .catch(() => this.props.hideSpinner());\n  }\n\n  /**\n   * Sends all changes made by user in this step of stock transfer to API and updates data.\n   * @public\n   */\n  completeStockTransfer() {\n    const itemsWithLowerQuantity = _.filter(\n      this.state.stockTransfer.stockTransferItems,\n      (stockTransferItem) =>\n        stockTransferItem.transferQty < stockTransferItem.quantityNotPicked,\n    );\n\n    if (!_.isEmpty(itemsWithLowerQuantity)) {\n      this.confirmLowerQuantity(itemsWithLowerQuantity);\n    } else {\n      this.save();\n    }\n  }\n\n  /**\n   * Shows confirmation dialog on complete if qty to be transferred>=qty on hand in original bin\n   * @public\n   */\n  confirmLowerQuantity(items) {\n    confirmAlert({\n      title: this.props.translate(\n        \"react.stockTransfer.message.confirmStockTransfer.label\",\n        \"Confirm Stock Transfer\",\n      ),\n      message: _.map(items, (item) => (\n        <p>\n          Qty\n          {item.quantityNotPicked - item.transferQty}{\" \"}\n          {this.props.translate(\n            \"react.stockTransfer.alert.lowerQty1.label\",\n            \"of item\",\n          )}{\" \"}\n          {item.productName}{\" \"}\n          {this.props.translate(\n            \"react.stockTransfer.alert.lowerQty2.label\",\n            \"is still in the receiving bin. Do you want to continue?\",\n          )}\n        </p>\n      )),\n      buttons: [\n        {\n          label: this.props.translate(\"react.default.yes.label\", \"Yes\"),\n          onClick: () => this.save(),\n        },\n        {\n          label: this.props.translate(\"react.default.no.label\", \"No\"),\n        },\n      ],\n    });\n  }\n\n  previousPage() {\n    this.props.showSpinner();\n    const url = `/api/stockTransfers/${this.props.match.params.stockTransferId}`;\n\n    const payload = {\n      ...this.state.stockTransfer,\n      stockTransferItems: this.state.originalItems,\n    };\n\n    return apiClient\n      .put(url, flattenRequest(payload))\n      .then(() => {\n        this.props.hideSpinner();\n        this.props.previousPage({ stockTransfer: this.state.stockTransfer });\n      })\n      .catch(() => this.props.hideSpinner());\n  }\n\n  render() {\n    const { columns, pivotBy } = this.state;\n    const extraProps = {\n      pivotBy,\n    };\n\n    return (\n      <div className=\"stock-transfer\">\n        {this.state.stockTransfer &&\n          this.state.stockTransfer.status === \"COMPLETED\" && (\n            <div className=\"submit-buttons d-flex justify-content-end mb-3 mt-0\">\n              <button\n                type=\"button\"\n                onClick={() => {\n                  window.location = STOCK_TRANSFER_URL.show(\n                    this.state.stockTransfer.id,\n                  );\n                }}\n                className=\"btn btn-outline-primary btn-form btn-xs\"\n                hidden={this.state.stockTransfer.status !== \"COMPLETED\"}\n              >\n                <Translate\n                  id=\"react.default.button.exit.label\"\n                  defaultMessage=\"Exit\"\n                />\n              </button>\n            </div>\n          )}\n        {this.state.stockTransfer.stockTransferItems ? (\n          <SelectTreeTable\n            data={this.state.stockTransfer.stockTransferItems}\n            columns={columns}\n            ref={(r) => {\n              this.selectTable = r;\n            }}\n            className=\"-striped -highlight\"\n            {...extraProps}\n            defaultPageSize={Number.MAX_SAFE_INTEGER}\n            minRows={0}\n            showPaginationBottom={false}\n            filterable\n            defaultFilterMethod={this.filterMethod}\n          />\n        ) : null}\n        <div className=\"submit-buttons\">\n          <button\n            type=\"button\"\n            onClick={() => this.previousPage()}\n            className=\"btn btn-outline-primary btn-form btn-xs\"\n            disabled={this.state.stockTransfer.status === \"COMPLETED\"}\n          >\n            <Translate\n              id=\"react.default.button.previous.label\"\n              defaultMessage=\"Previous\"\n            />\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => this.completeStockTransfer()}\n            className=\"btn btn-outline-success float-right btn-xs mr-3\"\n            disabled={this.state.stockTransfer.status === \"COMPLETED\"}\n          >\n            <Translate\n              id=\"react.stockTransfer.completeStockTransfer.label\"\n              defaultMessage=\"Complete Stock Transfer\"\n            />\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  translate: translateWithDefaultMessage(getTranslate(state.localize)),\n  stockTransferTranslationsFetched:\n    state.session.fetchedTranslations.stockTransfer,\n  formatLocalizedDate: formatDate(state.localize),\n});\n\nexport default connect(mapStateToProps, {\n  showSpinner,\n  hideSpinner,\n})(StockTransferSecondPage);\n\nStockTransferSecondPage.propTypes = {\n  /** Function called when data is loading */\n  showSpinner: PropTypes.func.isRequired,\n  /** Function called when data has loaded */\n  hideSpinner: PropTypes.func.isRequired,\n  /** Function taking user to the next page */\n  nextPage: PropTypes.func.isRequired,\n  /** Function taking user to the previous page */\n  previousPage: PropTypes.func.isRequired,\n  translate: PropTypes.func.isRequired,\n  /** All stock transfer's data */\n  initialValues: PropTypes.shape({\n    stockTransfer: PropTypes.arrayOf(PropTypes.shape({})),\n  }).isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      stockTransferId: PropTypes.string,\n    }),\n  }).isRequired,\n  /** Location (currently chosen). To be used in internalLocations and stock transfer requests. */\n  location: PropTypes.shape({\n    id: PropTypes.string,\n  }).isRequired,\n  stockTransferTranslationsFetched: PropTypes.bool.isRequired,\n  formatLocalizedDate: PropTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\n\nimport update from \"immutability-helper\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport queryString from \"query-string\";\nimport { getTranslate } from \"react-localize-redux\";\nimport { connect } from \"react-redux\";\nimport ReactTable from \"react-table\";\nimport { Tooltip } from \"react-tippy\";\n\nimport { hideSpinner, showSpinner } from \"actions\";\nimport { TableCell } from \"components/DataTable\";\nimport {\n  extractStockTransferItems,\n  prepareRequest,\n} from \"components/stock-transfer/utils\";\nimport { STOCK_TRANSFER_URL } from \"consts/applicationUrls\";\nimport DateFormat from \"consts/dateFormat\";\nimport StockTransferStatus from \"consts/stockTransferStatus\";\nimport apiClient, { flattenRequest, parseResponse } from \"utils/apiClient\";\nimport customTreeTableHOC from \"utils/CustomTreeTable\";\nimport Filter from \"utils/Filter\";\nimport Select from \"utils/Select\";\nimport Translate, { translateWithDefaultMessage } from \"utils/Translate\";\nimport { formatDate } from \"utils/translation-utils\";\n\nimport \"react-table/react-table.css\";\n\nconst SelectTreeTable = customTreeTableHOC(ReactTable);\n\n// Functions for managing items in state after delete action.\n// 1. When clicking the delete button on the original item:\n//   - Delete the original item and every subitem of it\n// 2. When clicking the delete button on the saved subitem:\n//   - if it is the last subitem: delete it and enable the field on the original item\n//   - if it is not the last subitem: just delete it\n// 3. When clicking the delete button on the not saved subitem:\n//   - delete it just from the state, it is done in the deleteItem function.\nconst getItemsAfterDelete = (items, indexToDelete) => {\n  // Reference of deleted line: (if line has referenceId it's not the original one)\n  const { referenceId, id } = items[indexToDelete];\n\n  // Removing deleted item from state\n  const filteredItems = items.filter((el, index) => {\n    // If it's the original line we have to delete all the split lines\n    // coming from the original one line and the original line itself\n    if (!referenceId) {\n      return el.id !== id && el.referenceId !== id;\n    }\n\n    // If it's not the original line we just deleting it\n    return index !== indexToDelete;\n  });\n\n  // grouping items by referenceId for checking if the original item has any existing subitem\n  const itemsGroupedByReferenceId = _.groupBy(filteredItems, \"referenceId\");\n\n  // If an item doesn't have any subitems it should be enabled (status PENDING)\n  return filteredItems.map((item) => {\n    if (!itemsGroupedByReferenceId[item?.id]) {\n      return { ...item, status: StockTransferStatus.PENDING };\n    }\n\n    return item;\n  });\n};\n\n/**\n * The second page of stock transfer where user can choose qty and bin to transfer\n * or generate stock transfer list(pdf).\n */\nclass StockTransferSecondPage extends Component {\n  constructor(props) {\n    super(props);\n    this.getColumns = this.getColumns.bind(this);\n    const columns = this.getColumns();\n\n    const {\n      initialValues: { stockTransfer },\n    } = this.props;\n\n    this.state = {\n      stockTransfer: stockTransfer || {},\n      columns,\n      bins: [],\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.stockTransferTranslationsFetched) {\n      this.dataFetched = true;\n      this.fetchBins();\n    }\n    this.fetchStockTransfer();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.stockTransferTranslationsFetched && !this.dataFetched) {\n      this.dataFetched = true;\n      this.fetchBins();\n    }\n  }\n\n  /**\n   * Returns an array of columns which are passed to the table.\n   * @public\n   */\n  getColumns = () => [\n    {\n      Header: (\n        <Translate id=\"react.stockTransfer.code.label\" defaultMessage=\"Code\" />\n      ),\n      accessor: \"product.productCode\",\n      style: { whiteSpace: \"normal\" },\n      Filter,\n    },\n    {\n      Header: (\n        <Translate\n          id=\"react.stockTransfer.product.label\"\n          defaultMessage=\"Product\"\n        />\n      ),\n      accessor: \"product\",\n      style: { whiteSpace: \"normal\" },\n      Cell: (row) => (\n        <TableCell\n          {...row}\n          value={row.value?.displayName ?? row.value?.name}\n          tooltip={\n            row.value?.displayName && row.value?.name !== row.value?.displayName\n          }\n          tooltipLabel={row.value?.name}\n        />\n      ),\n      Filter,\n    },\n    {\n      Header: (\n        <Translate id=\"react.stockTransfer.lot.label\" defaultMessage=\"Lot\" />\n      ),\n      accessor: \"lotNumber\",\n      style: { whiteSpace: \"normal\" },\n      Filter,\n    },\n    {\n      Header: (\n        <Translate\n          id=\"react.stockTransfer.expiry.label\"\n          defaultMessage=\"Expiry\"\n        />\n      ),\n      accessor: \"expirationDate\",\n      style: { whiteSpace: \"normal\" },\n      Cell: (props) => (\n        <span>\n          {props?.value\n            ? this.props.formatLocalizedDate(props.value, DateFormat.COMMON)\n            : props.value}\n        </span>\n      ),\n      Filter,\n    },\n    {\n      Header: (\n        <Translate\n          id=\"react.stockTransfer.quantityAvailableToTransfer.label\"\n          defaultMessage=\"Quantity Available to Transfer\"\n        />\n      ),\n      accessor: \"quantityNotPicked\",\n      style: { whiteSpace: \"normal\" },\n      width: 220,\n      Filter,\n    },\n    {\n      Header: (\n        <Translate\n          id=\"react.stockTransfer.currentZone.label\"\n          defaultMessage=\"Current Zone\"\n        />\n      ),\n      accessor: \"originZone\",\n      style: { whiteSpace: \"normal\" },\n      Filter,\n    },\n    {\n      Header: (\n        <Translate\n          id=\"react.stockTransfer.currentBinLocation.label\"\n          defaultMessage=\"Current Bin Location\"\n        />\n      ),\n      accessor: \"originBinLocation.name\",\n      style: { whiteSpace: \"normal\" },\n      Filter,\n    },\n    {\n      Header: (\n        <Translate\n          id=\"react.stockTransfer.qtyToTransfer.label\"\n          defaultMessage=\"Qty to Transfer\"\n        />\n      ),\n      accessor: \"quantity\",\n      style: { whiteSpace: \"normal\" },\n      Cell: (props) => {\n        const itemIndex = props.index;\n        const { stockTransferItems } = this.state.stockTransfer;\n        const splitItems = _.filter(\n          stockTransferItems,\n          (lineItem) =>\n            lineItem.referenceId &&\n            lineItem.referenceId === props.original.referenceId,\n        );\n        let disabled = false;\n        let disabledMessage;\n        if (!props.original.id || splitItems.length > 1) {\n          const quantityToTransfer = _.reduce(\n            splitItems,\n            (sum, val) => sum + (val.quantity ? _.toInteger(val.quantity) : 0),\n            0,\n          );\n          if (quantityToTransfer > props.original.quantityNotPicked) {\n            _.forEach(stockTransferItems, (lineItem) => {\n              _.forEach(splitItems, (splitItem) => {\n                if (lineItem === splitItem) {\n                  disabled = true;\n                  disabledMessage = this.props.translate(\n                    \"react.stockTransfer.higherSplitQuantity.label\",\n                    \"Sum of quantity to transfer of split items cannot be higher than quantity in current bin.\",\n                  );\n                }\n              });\n            });\n          }\n        } else if (\n          splitItems.length === 1 &&\n          props.original.quantityNotPicked < _.toInteger(props.value)\n        ) {\n          disabled = true;\n          disabledMessage = this.props.translate(\n            \"react.stockTransfer.higherQuantity.label\",\n            \"Quantity to transfer cannot be higher than quantity in current bin\",\n          );\n        }\n\n        if (!_.toInteger(props.value)) {\n          disabled = true;\n          disabledMessage = this.props.translate(\n            \"react.stockTransfer.selectOrDeleteLine.label\",\n            \"Please select a quantity or delete the line\",\n          );\n        } else if (\n          _.toInteger(props.value) > props.original.quantityNotPicked\n        ) {\n          disabled = true;\n          disabledMessage = this.props.translate(\n            \"react.stockTransfer.higherThanQoH.label\",\n            \"Cant transfer more than on hand.\",\n          );\n        } else if (_.toInteger(props.value) < 0) {\n          disabled = true;\n          disabledMessage = this.props.translate(\n            \"react.stockTransfer.errors.negativeQty.label\",\n            \"Quantity to transfer can't be negative\",\n          );\n        }\n\n        return (\n          <Tooltip\n            html={disabledMessage}\n            disabled={!disabled}\n            theme=\"transparent\"\n            arrow=\"true\"\n            delay=\"150\"\n            duration=\"250\"\n            hideDelay=\"50\"\n          >\n            <div\n              className={\n                disabled &&\n                props.original.status !== StockTransferStatus.CANCELED\n                  ? \"has-error\"\n                  : \"\"\n              }\n            >\n              <input\n                type=\"number\"\n                className=\"form-control form-control-xs\"\n                value={props.value}\n                disabled={\n                  props.original.status === StockTransferStatus.CANCELED\n                }\n                onChange={(event) => {\n                  const stockTransfer = update(this.state.stockTransfer, {\n                    stockTransferItems: {\n                      [itemIndex]: { quantity: { $set: event.target.value } },\n                    },\n                  });\n                  this.changeStockTransfer(stockTransfer);\n                }}\n              />\n            </div>\n          </Tooltip>\n        );\n      },\n      Filter,\n    },\n    {\n      Header: (\n        <Translate\n          id=\"react.stockTransfer.transferTo.label\"\n          defaultMessage=\"Transfer to\"\n        />\n      ),\n      accessor: \"destinationBinLocation\",\n      Cell: (cellInfo) => (\n        <Select\n          options={this.state.bins}\n          value={\n            _.get(\n              this.state.stockTransfer.stockTransferItems,\n              `[${cellInfo.index}].${cellInfo.column.id}`,\n            ) || null\n          }\n          onChange={(value) =>\n            this.changeStockTransfer(\n              update(this.state.stockTransfer, {\n                stockTransferItems: {\n                  [cellInfo.index]: { destinationBinLocation: { $set: value } },\n                },\n              }),\n            )\n          }\n          valueKey=\"id\"\n          labelKey=\"name\"\n          className=\"select-xs\"\n          disabled={cellInfo.original.status === StockTransferStatus.CANCELED}\n        />\n      ),\n      Filter,\n    },\n    {\n      Header: \"\",\n      accessor: \"splitItems\",\n      Cell: (cellInfo) => (\n        <div className=\"d-flex flex-row flex-wrap\">\n          {!cellInfo.original.referenceId && (\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-success btn-xs mr-1 mb-1\"\n              onClick={() => this.splitItem(cellInfo)}\n            >\n              <Translate\n                id=\"react.stockTransfer.splitItem.label\"\n                defaultMessage=\"Split line\"\n              />\n            </button>\n          )}\n          <button\n            type=\"button\"\n            className=\"btn btn-outline-danger btn-xs mb-1\"\n            onClick={() => this.deleteItem(cellInfo.index)}\n          >\n            <Translate\n              id=\"react.default.button.delete.label\"\n              defaultMessage=\"Delete\"\n            />\n          </button>\n        </div>\n      ),\n      filterable: false,\n    },\n  ];\n\n  dataFetched = false;\n\n  /**\n   * Fetches stock transfer items and sets them in redux form and in\n   * state as current line items.\n   * @public\n   */\n\n  fetchStockTransfer() {\n    this.props.showSpinner();\n    const url = `/api/stockTransfers/${this.props.match.params.stockTransferId}`;\n\n    apiClient\n      .get(url)\n      .then((response) => {\n        const stockTransfer = parseResponse(response.data.data);\n        const stockTransferItems = extractStockTransferItems(stockTransfer);\n\n        this.setState(\n          { stockTransfer: { ...stockTransfer, stockTransferItems } },\n          () => this.props.hideSpinner(),\n        );\n      })\n      .catch(() => this.props.hideSpinner());\n  }\n\n  filterMethod = (filter, row) => {\n    let val = row[filter.id];\n    if (filter.id === \"destinationBinLocation\") {\n      val = _.get(val, \"name\");\n    }\n    if (filter.id === \"product\") {\n      val = val ? `${val.name} ${val.displayName}` : null;\n    }\n    return _.toString(val).toLowerCase().includes(filter.value.toLowerCase());\n  };\n\n  /**\n   * Fetches available bin locations from API.\n   * @public\n   */\n  fetchBins() {\n    this.props.showSpinner();\n    const url = \"/api/internalLocations\";\n\n    const mapBins = (bins) => _.chain(bins).orderBy([\"label\"], [\"asc\"]).value();\n\n    return apiClient\n      .get(url, {\n        paramsSerializer: (parameters) => queryString.stringify(parameters),\n        params: {\n          \"location.id\": this.props.location.id,\n          locationTypeCode: [\"BIN_LOCATION\", \"INTERNAL\"],\n          ignoreActivityCodes: [\"RECEIVE_STOCK\"],\n        },\n      })\n      .then((response) => {\n        const binGroups = _.partition(\n          response.data.data,\n          (bin) => bin.zoneName,\n        );\n        const binsWithZone = _.chain(binGroups[0])\n          .groupBy(\"zoneName\")\n          .map((value, key) => ({ name: key, options: mapBins(value) }))\n          .orderBy([\"name\"], [\"asc\"])\n          .value();\n        const binsWithoutZone = mapBins(binGroups[1]);\n        this.setState({ bins: [...binsWithZone, ...binsWithoutZone] }, () =>\n          this.props.hideSpinner(),\n        );\n      })\n      .catch(() => this.props.hideSpinner());\n  }\n\n  /**\n   * Sends all changes made by user in this step of stock transfer to API and updates data.\n   * @public\n   */\n  saveStockTransfer(data, callback) {\n    const url = `/api/stockTransfers/${this.props.match.params.stockTransferId}`;\n    const payload = prepareRequest(data, StockTransferStatus.APPROVED);\n    apiClient\n      .put(url, flattenRequest(payload))\n      .then((response) => {\n        const stockTransfer = parseResponse(response.data.data);\n        const stockTransferItems = extractStockTransferItems(stockTransfer);\n\n        this.setState(\n          { stockTransfer: { ...stockTransfer, stockTransferItems } },\n          () => {\n            this.props.hideSpinner();\n            if (callback) {\n              callback(stockTransfer);\n            }\n          },\n        );\n      })\n      .catch(() => this.props.hideSpinner());\n  }\n\n  changeStockTransfer(stockTransfer) {\n    this.setState({ stockTransfer });\n  }\n\n  deleteItem(itemIndex) {\n    this.props.showSpinner();\n\n    const itemToDelete = _.get(\n      this.state.stockTransfer.stockTransferItems,\n      `[${itemIndex}]`,\n    );\n\n    if (itemToDelete?.id) {\n      const url = `/api/stockTransferItems/${itemToDelete.id}`;\n      apiClient\n        .delete(url)\n        .then((response) => {\n          const stockTransfer = parseResponse(response.data.data);\n          this.setState(\n            (previousState) => ({\n              stockTransfer: {\n                ...stockTransfer,\n                stockTransferItems: getItemsAfterDelete(\n                  previousState.stockTransfer.stockTransferItems,\n                  itemIndex,\n                ),\n              },\n            }),\n            () => this.props.hideSpinner(),\n          );\n        })\n        .catch(() => this.props.hideSpinner());\n    } else {\n      const { stockTransfer: stockTransferFromState } = this.state;\n      let stockTransfer = update(stockTransferFromState, {\n        stockTransferItems: {\n          $splice: [[itemIndex, 1]],\n        },\n      });\n\n      const originalItem = _.find(\n        stockTransfer.stockTransferItems,\n        (item) => item.id === itemToDelete.referenceId,\n      );\n      const splitItems = _.filter(\n        stockTransfer.stockTransferItems,\n        (item) => item.referenceId === originalItem.id,\n      );\n\n      if (splitItems.length === 0 && originalItem) {\n        const originalItemIndex = _.findIndex(\n          stockTransfer.stockTransferItems,\n          originalItem,\n        );\n        stockTransfer = update(stockTransfer, {\n          stockTransferItems: {\n            [originalItemIndex]: {\n              status: {\n                $set: StockTransferStatus.PENDING,\n              },\n            },\n          },\n        });\n      }\n\n      this.setState({ stockTransfer });\n      this.props.hideSpinner();\n    }\n  }\n\n  /**\n   * Save stock transfer and go to next page.\n   * @public\n   */\n  nextPage() {\n    this.saveStockTransfer(this.state.stockTransfer, (stockTransfer) => {\n      this.props.nextPage({\n        stockTransfer,\n      });\n    });\n  }\n\n  printStockTransfer() {\n    this.saveStockTransfer(this.state.stockTransfer, () =>\n      window.open(\n        STOCK_TRANSFER_URL.print(this.props.match.params.stockTransferId),\n        \"_blank\",\n      ),\n    );\n  }\n\n  /**\n   * Generates stock transfer pdf\n   * @public\n   */\n  // eslint-disable-next-line class-methods-use-this\n  generateStockTransfer() {\n    // TODO add in another ticket\n  }\n\n  splitItem(row) {\n    const { index, original } = row;\n\n    const newLine = {\n      ...original,\n      referenceId: original.id ? original.id : original.referenceId,\n      id: null,\n      status: null,\n    };\n\n    const { stockTransfer: stockTransferFromState } = this.state;\n\n    const stockTransfer = update(stockTransferFromState, {\n      stockTransferItems: {\n        // If splitting not yet canceled item, then cancel original row and add two new split lines\n        // else if splitting already CANCELED line add a new line once\n        $splice:\n          original.status !== StockTransferStatus.CANCELED\n            ? [\n                [index + 1, 0, newLine],\n                [index + 1, 0, newLine],\n              ]\n            : [[index + 1, 0, newLine]],\n        [index]: {\n          $set: original.id\n            ? {\n                ...original,\n                status: StockTransferStatus.CANCELED,\n                quantity: \"\",\n              }\n            : { ...original, quantity: \"\" },\n        },\n      },\n    });\n\n    this.setState({ stockTransfer });\n  }\n\n  autofill() {\n    const { stockTransfer } = this.state;\n    this.setState({\n      stockTransfer: {\n        ...stockTransfer,\n        stockTransferItems: _.map(stockTransfer.stockTransferItems, (item) => ({\n          ...item,\n          quantity: item.quantityNotPicked,\n        })),\n      },\n    });\n  }\n\n  isDisabled() {\n    const { stockTransferItems } = this.state.stockTransfer;\n\n    return (\n      stockTransferItems &&\n      !!stockTransferItems.find((item) => {\n        const { quantity, quantityNotPicked, status } = item;\n\n        if (\n          status !== StockTransferStatus.CANCELED &&\n          (!quantity || quantity > quantityNotPicked || quantity <= 0)\n        ) {\n          return true;\n        }\n\n        const splitItems = _.filter(\n          stockTransferItems,\n          (lineItem) =>\n            lineItem.referenceId && lineItem.referenceId === item.referenceId,\n        );\n\n        if (!item.id || splitItems.length > 1) {\n          const quantityToTransfer = _.reduce(\n            splitItems,\n            (sum, val) => sum + (val.quantity ? _.toInteger(val.quantity) : 0),\n            0,\n          );\n          if (quantityToTransfer > quantityNotPicked) {\n            return true;\n          }\n        }\n        return false;\n      })\n    );\n  }\n\n  render() {\n    const { columns, pivotBy } = this.state;\n    const extraProps = {\n      pivotBy,\n    };\n\n    return (\n      <div className=\"stock-transfer\">\n        <div className=\"d-flex\">\n          <div className=\"submit-buttons\">\n            <button\n              type=\"button\"\n              onClick={() => this.autofill(this.state.stockTransfer)}\n              className=\"btn btn-primary btn-form btn-xs\"\n            >\n              <Translate\n                id=\"react.partialReceiving.autofillQuantities.label\"\n                defaultMessage=\"Autofill quantities\"\n              />\n            </button>\n          </div>\n          <div className=\"d-flex mb-3 justify-content-end submit-buttons\">\n            <button\n              type=\"button\"\n              onClick={() => this.saveStockTransfer(this.state.stockTransfer)}\n              className=\"btn btn-success btn-form btn-xs\"\n              disabled={_.some(\n                this.state.stockTransfer.stockTransferItems,\n                (stockTransferItem) =>\n                  stockTransferItem.quantity >\n                  stockTransferItem.quantityAvailable,\n              )}\n            >\n              <span>\n                <i className=\"fa fa-save pr-2\" />\n                <Translate\n                  id=\"react.default.button.save.label\"\n                  defaultMessage=\"Save\"\n                />\n              </span>\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-secondary btn-xs p-1 ml-3 mb-1\"\n              onClick={() => this.printStockTransfer()}\n            >\n              <span>\n                <i className=\"fa fa-print pr-2\" />\n                <Translate\n                  id=\"react.stockTransfer.generateStockTransfer.label\"\n                  defaultMessage=\"Generate Stock Transfer\"\n                />\n              </span>\n            </button>\n          </div>\n        </div>\n        {this.state.stockTransfer.stockTransferItems ? (\n          <SelectTreeTable\n            data={this.state.stockTransfer.stockTransferItems}\n            columns={columns}\n            ref={(r) => {\n              this.selectTable = r;\n            }}\n            className=\"-striped -highlight\"\n            {...extraProps}\n            defaultPageSize={Number.MAX_SAFE_INTEGER}\n            minRows={0}\n            showPaginationBottom={false}\n            filterable\n            defaultFilterMethod={this.filterMethod}\n          />\n        ) : null}\n        <div className=\"submit-buttons\">\n          <button\n            type=\"button\"\n            onClick={() => this.nextPage()}\n            disabled={this.isDisabled()}\n            className=\"btn btn-outline-primary btn-form float-right btn-xs\"\n          >\n            <Translate\n              id=\"react.default.button.next.label\"\n              defaultMessage=\"Next\"\n            />\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  translate: translateWithDefaultMessage(getTranslate(state.localize)),\n  stockTransferTranslationsFetched:\n    state.session.fetchedTranslations.stockTransfer,\n  formatLocalizedDate: formatDate(state.localize),\n});\n\nexport default connect(mapStateToProps, {\n  showSpinner,\n  hideSpinner,\n})(StockTransferSecondPage);\n\nStockTransferSecondPage.propTypes = {\n  /** Function called when data is loading */\n  showSpinner: PropTypes.func.isRequired,\n  /** Function called when data has loaded */\n  hideSpinner: PropTypes.func.isRequired,\n  /** Function taking user to the next page */\n  nextPage: PropTypes.func.isRequired,\n  /** Function taking user to the previous page */\n  translate: PropTypes.func.isRequired,\n  /** All stock transfer's data */\n  initialValues: PropTypes.shape({\n    stockTransfer: PropTypes.arrayOf(PropTypes.shape({})),\n  }).isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      stockTransferId: PropTypes.string,\n    }),\n  }).isRequired,\n  /** Location (currently chosen). To be used in internalLocations and stock transfer requests. */\n  location: PropTypes.shape({\n    id: PropTypes.string,\n  }).isRequired,\n  stockTransferTranslationsFetched: PropTypes.bool.isRequired,\n  formatLocalizedDate: PropTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\n\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport { getTranslate } from \"react-localize-redux\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { fetchTranslations, hideSpinner, showSpinner } from \"actions\";\nimport CreateStockTransfer from \"components/stock-transfer/CreateStockTransfer\";\nimport StockTransferCheckPage from \"components/stock-transfer/StockTransferCheckPage\";\nimport StockTransferSecondPage from \"components/stock-transfer/StockTransferSecondPage\";\nimport Wizard from \"components/wizard/Wizard\";\nimport apiClient, { parseResponse } from \"utils/apiClient\";\nimport { translateWithDefaultMessage } from \"utils/Translate\";\n\nimport \"components/stock-transfer/StockTransfer.scss\";\n\n/** Main stock transfer form's wizard component. */\nclass StockTransferWizard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      page: props.match.params.stockTransferId ? 2 : 1,\n      stockTransfer: {},\n    };\n\n    this.updateWizardValues = this.updateWizardValues.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchTranslations(\"\", \"stockTransfer\");\n\n    if (this.props.stockTransferTranslationsFetched) {\n      this.dataFetched = true;\n\n      this.fetchStockTransfer();\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.locale && this.props.locale !== nextProps.locale) {\n      this.props.fetchTranslations(nextProps.locale, \"stockTransfer\");\n    }\n\n    if (nextProps.stockTransferTranslationsFetched && !this.dataFetched) {\n      this.dataFetched = true;\n\n      this.fetchStockTransfer();\n    }\n  }\n\n  /**\n   * @public\n   */\n  get stepList() {\n    return [\n      this.props.translate(\n        \"react.stockTransfer.createStockTransfer.label\",\n        \"Create Stock Transfer\",\n      ),\n      this.props.translate(\n        \"react.stockTransfer.startStockTransfer.label\",\n        \"Start Stock Transfer\",\n      ),\n      this.props.translate(\n        \"react.stockTransfer.checkStockTransfer.label\",\n        \"Check Stock Transfer\",\n      ),\n    ];\n  }\n\n  get wizardTitle() {\n    const { stockTransfer } = this.state;\n    if (stockTransfer?.stockTransfer?.stockTransferNumber) {\n      return [\n        {\n          text: this.props.translate(\n            \"react.stockTransfer.label\",\n            \"Stock Transfer\",\n          ),\n          color: \"#000000\",\n          delimeter: \" | \",\n        },\n        {\n          text: stockTransfer.stockTransfer.stockTransferNumber,\n          color: \"#000000\",\n          delimeter: \"\",\n        },\n      ];\n    }\n    return [];\n  }\n\n  updateWizardValues(page, stockTransfer) {\n    this.setState({ page, stockTransfer });\n  }\n\n  dataFetched = false;\n\n  fetchStockTransfer() {\n    if (this.props.match.params.stockTransferId) {\n      this.props.showSpinner();\n      const url = `/api/stockTransfers/${this.props.match.params.stockTransferId}`;\n\n      apiClient\n        .get(url)\n        .then((response) => {\n          const stockTransfer = parseResponse(response.data.data);\n          this.setState({\n            stockTransfer: { stockTransfer },\n            page: stockTransfer.status === \"COMPLETED\" ? 3 : 2,\n          });\n          this.props.hideSpinner();\n        })\n        .catch(() => this.props.hideSpinner());\n    }\n  }\n\n  render() {\n    const { page, stockTransfer } = this.state;\n    const { location, history, match } = this.props;\n    const locationId = location.id;\n    const additionalTitle = null;\n    const pageList = [\n      CreateStockTransfer,\n      StockTransferSecondPage,\n      StockTransferCheckPage,\n    ];\n\n    if (_.get(location, \"id\")) {\n      return (\n        <Wizard\n          pageList={pageList}\n          stepList={this.stepList}\n          initialValues={stockTransfer}\n          title={this.wizardTitle}\n          additionalTitle={additionalTitle}\n          currentPage={page}\n          prevPage={page === 1 ? 1 : page - 1}\n          updateWizardValues={this.updateWizardValues}\n          additionalProps={{\n            locationId,\n            location,\n            history,\n            match,\n          }}\n        />\n      );\n    }\n\n    return null;\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  location: state.session.currentLocation,\n  locale: state.session.activeLanguage,\n  stockTransferTranslationsFetched:\n    state.session.fetchedTranslations.stockTransfer,\n  translate: translateWithDefaultMessage(getTranslate(state.localize)),\n});\n\nexport default withRouter(\n  connect(mapStateToProps, {\n    showSpinner,\n    hideSpinner,\n    fetchTranslations,\n  })(StockTransferWizard),\n);\n\nStockTransferWizard.propTypes = {\n  location: PropTypes.shape({\n    id: PropTypes.string,\n  }).isRequired,\n  locale: PropTypes.string.isRequired,\n  stockTransferTranslationsFetched: PropTypes.bool.isRequired,\n  fetchTranslations: PropTypes.func.isRequired,\n  translate: PropTypes.func.isRequired,\n  /** Function called when data is loading */\n  showSpinner: PropTypes.func.isRequired,\n  /** Function called when data has loaded */\n  hideSpinner: PropTypes.func.isRequired,\n  /** React router's object which contains information about url varaiables and params */\n  match: PropTypes.shape({\n    params: PropTypes.shape({ stockTransferId: PropTypes.string }),\n  }).isRequired,\n  /** React router's object used to manage session history */\n  history: PropTypes.shape({ push: PropTypes.func }).isRequired,\n};\n"],"names":["READY","PENDING","APPROVED","PLACED","COMPLETED","CANCELED","SelectTreeTable","selectTableHOC","customTreeTableHOC","ReactTable","getNodes","data","node","arguments","length","undefined","forEach","item","Object","prototype","hasOwnProperty","call","_subRows","push","_original","CreateStockTransfer","_Component","props","_this","_classCallCheck","_defineProperty","_callSuper","Header","React","Translate","id","defaultMessage","accessor","style","whiteSpace","Filter","Cell","row","_row$value$displayNam","_row$value","_row$value2","_row$value3","_row$value4","_row$value5","_row$value6","TableCell","_extends","value","displayName","name","tooltip","tooltipLabel","formatLocalizedDate","DateFormat","COMMON","toLocaleString","filter","val","concat","_","toLowerCase","includes","selectAll","state","selection","selectTable","getWrappedInstance","getResolvedState","sortedData","quantityNotPicked","_id","toggleSelection","setState","key","_toConsumableArray","keys","checked","selectionFromState","Set","Array","isArray","add","has","columns","getColumns","stockTransferItems","selectType","_inherits","this","stockTransferTranslationsFetched","dataFetched","fetchStockTransferCandidates","createInfoBar","InfoBarConfigs","InfoBar","STOCK_TRANSFER_DESCRIPTION","hideInfoBar","nextProps","locationId","_this2","showSpinner","apiClient","get","STOCK_TRANSFER_CANDIDATES","then","resp","stockTransferCandidates","parseResponse","_objectSpread","hideSpinner","_this3","payload","post","flattenRequest","response","stockTransfer","history","STOCK_TRANSFER_URL","createById","nextPage","_this4","toggleAll","isSelected","_this$state","extraProps","className","size","type","disabled","onClick","createStockTransfer","ref","r","defaultPageSize","Number","MAX_SAFE_INTEGER","minRows","showPaginationBottom","filterable","defaultFilterMethod","filterMethod","SelectInputComponent","_ref","onChange","e","shiftKey","stopPropagation","Component","mapDispatchToProps","withRouter","connect","session","fetchedTranslations","formatDate","localize","propTypes","PropTypes","isRequired","extractItem","status","destinationBin","destinationBinLocation","destinationZone","zoneId","zoneName","quantity","extractSplitItem","splitItem","quantityOnHand","referenceId","extractStockTransferItems","splitItems","StockTransferSecondPage","width","bind","initialValues","completeStockTransfer","fetchStockTransfer","url","match","params","stockTransferId","extractNonCanceledItems","originalItems","put","Alert","translate","timeout","window","location","show","itemsWithLowerQuantity","stockTransferItem","transferQty","save","confirmLowerQuantity","items","confirmAlert","title","message","productName","buttons","label","_this5","previousPage","_this6","pivotBy","hidden","translateWithDefaultMessage","getTranslate","disabledMessage","itemIndex","index","lineItem","original","sum","Tooltip","html","theme","arrow","delay","duration","hideDelay","StockTransferStatus","event","update","$set","target","changeStockTransfer","cellInfo","Select","options","bins","column","valueKey","labelKey","deleteItem","fetchBins","mapBins","orderBy","paramsSerializer","parameters","queryString","stringify","locationTypeCode","ignoreActivityCodes","binGroups","bin","binsWithZone","groupBy","map","binsWithoutZone","callback","itemToDelete","previousState","indexToDelete","_items$indexToDelete","filteredItems","el","itemsGroupedByReferenceId","stockTransferFromState","$splice","originalItem","originalItemIndex","saveStockTransfer","_this7","open","print","newLine","find","_this8","autofill","quantityAvailable","printStockTransfer","isDisabled","StockTransferWizard","page","updateWizardValues","fetchTranslations","locale","_stockTransfer$stockT","stockTransferNumber","text","color","delimeter","_this$props","pageList","StockTransferCheckPage","Wizard","stepList","wizardTitle","additionalTitle","currentPage","prevPage","additionalProps","currentLocation","activeLanguage"],"sourceRoot":""}