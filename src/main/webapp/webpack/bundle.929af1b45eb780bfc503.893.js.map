{"version":3,"file":"bundle.929af1b45eb780bfc503.893.js","mappings":"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","sources":["webpack://openboxes/./node_modules/react-hook-form/dist/index.esm.mjs","webpack://openboxes/./node_modules/@hookform/resolvers/dist/resolvers.mjs","webpack://openboxes/./node_modules/@hookform/resolvers/zod/dist/zod.mjs"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    const isFileListInstance = typeof FileList !== 'undefined' ? data instanceof FileList : false;\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || isFileListInstance)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    React.useEffect(() => control._subscribe({\n        name: _name.current,\n        formState: _localProxyFormState.current,\n        exact,\n        callback: (formState) => {\n            !disabled &&\n                updateFormState({\n                    ...control._formState,\n                    ...formState,\n                });\n        },\n    }), [control, disabled, exact]);\n    React.useEffect(() => {\n        _localProxyFormState.current.isValid && control._setValid(true);\n    }, [control]);\n    return React.useMemo(() => getProxyFormState(formState, control, _localProxyFormState.current, false), [formState, control]);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    const _defaultValue = React.useRef(defaultValue);\n    _name.current = name;\n    React.useEffect(() => control._subscribe({\n        name: _name.current,\n        formState: {\n            values: true,\n        },\n        exact,\n        callback: (formState) => !disabled &&\n            updateValue(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, _defaultValue.current)),\n    }), [control, disabled, exact]);\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n        exact: true,\n    });\n    const _props = React.useRef(props);\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    const fieldState = React.useMemo(() => Object.defineProperties({}, {\n        invalid: {\n            enumerable: true,\n            get: () => !!get(formState.errors, name),\n        },\n        isDirty: {\n            enumerable: true,\n            get: () => !!get(formState.dirtyFields, name),\n        },\n        isTouched: {\n            enumerable: true,\n            get: () => !!get(formState.touchedFields, name),\n        },\n        isValidating: {\n            enumerable: true,\n            get: () => !!get(formState.validatingFields, name),\n        },\n        error: {\n            enumerable: true,\n            get: () => get(formState.errors, name),\n        },\n    }), [formState, name]);\n    const onChange = React.useCallback((event) => _registerProps.current.onChange({\n        target: {\n            value: getEventValue(event),\n            name: name,\n        },\n        type: EVENTS.CHANGE,\n    }), [name]);\n    const onBlur = React.useCallback(() => _registerProps.current.onBlur({\n        target: {\n            value: get(control._formValues, name),\n            name: name,\n        },\n        type: EVENTS.BLUR,\n    }), [name, control._formValues]);\n    const ref = React.useCallback((elm) => {\n        const field = get(control._fields, name);\n        if (field && elm) {\n            field._f.ref = {\n                focus: () => elm.focus(),\n                select: () => elm.select(),\n                setCustomValidity: (message) => elm.setCustomValidity(message),\n                reportValidity: () => elm.reportValidity(),\n            };\n        }\n    }, [control._fields, name]);\n    const field = React.useMemo(() => ({\n        name,\n        value,\n        ...(isBoolean(disabled) || formState.disabled\n            ? { disabled: formState.disabled || disabled }\n            : {}),\n        onChange,\n        onBlur,\n        ref,\n    }), [name, disabled, formState.disabled, onChange, onBlur, ref, value]);\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        control.register(name, {\n            ..._props.current.rules,\n            ...(isBoolean(_props.current.disabled)\n                ? { disabled: _props.current.disabled }\n                : {}),\n        });\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        !isArrayField && control.register(name);\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        control._setDisabledField({\n            disabled,\n            name,\n        });\n    }, [disabled, name, control]);\n    return React.useMemo(() => ({\n        field,\n        formState,\n        fieldState,\n    }), [field, formState, fieldState]);\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst flatten = (obj) => {\n    const output = {};\n    for (const key of Object.keys(obj)) {\n        if (isObjectType(obj[key]) && obj[key] !== null) {\n            const nested = flatten(obj[key]);\n            for (const nestedKey of Object.keys(nested)) {\n                output[`${key}.${nestedKey}`] = nested[nestedKey];\n            }\n        }\n        else {\n            output[key] = obj[key];\n        }\n    }\n    return output;\n};\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            const flattenFormValues = flatten(control._formValues);\n            for (const key in flattenFormValues) {\n                formData.append(key, flattenFormValues[key]);\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(String(action), {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\nvar hasPromiseValidation = (fieldReference) => !!fieldReference &&\n    !!fieldReference.validate &&\n    !!((isFunction(fieldReference.validate) &&\n        fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n        (isObject(fieldReference.validate) &&\n            Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION)));\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    return true;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    return true;\n                }\n                else {\n                    if (iterateFieldsByAction(currentField, action)) {\n                        break;\n                    }\n                }\n            }\n            else if (isObject(currentField)) {\n                if (iterateFieldsByAction(currentField, action)) {\n                    break;\n                }\n            }\n        }\n    }\n    return;\n};\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isMessage = (value) => isString(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabledFieldNames.has(name)) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    const _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.values || _options.defaultValues) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        disabled: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    let _proxySubscribeFormState = {\n        ..._proxyFormState,\n    };\n    const _subjects = {\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _setValid = async (shouldUpdateValid) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValid ||\n                _proxySubscribeFormState.isValid ||\n                shouldUpdateValid)) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _runSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValidating ||\n                _proxyFormState.validatingFields ||\n                _proxySubscribeFormState.isValidating ||\n                _proxySubscribeFormState.validatingFields)) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _setFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method && !_options.disabled) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if ((_proxyFormState.touchedFields ||\n                _proxySubscribeFormState.touchedFields) &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields || _proxySubscribeFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _setValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!_options.disabled) {\n            if (!isBlurEvent || shouldDirty) {\n                if (_proxyFormState.isDirty || _proxySubscribeFormState.isDirty) {\n                    isPreviousDirty = _formState.isDirty;\n                    _formState.isDirty = output.isDirty = _getDirty();\n                    shouldUpdateField = isPreviousDirty !== output.isDirty;\n                }\n                const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n                isPreviousDirty = !!get(_formState.dirtyFields, name);\n                isCurrentFieldPristine\n                    ? unset(_formState.dirtyFields, name)\n                    : set(_formState.dirtyFields, name, true);\n                output.dirtyFields = _formState.dirtyFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        ((_proxyFormState.dirtyFields ||\n                            _proxySubscribeFormState.dirtyFields) &&\n                            isPreviousDirty !== !isCurrentFieldPristine);\n            }\n            if (isBlurEvent) {\n                const isPreviousFieldTouched = get(_formState.touchedFields, name);\n                if (!isPreviousFieldTouched) {\n                    set(_formState.touchedFields, name, isBlurEvent);\n                    output.touchedFields = _formState.touchedFields;\n                    shouldUpdateField =\n                        shouldUpdateField ||\n                            ((_proxyFormState.touchedFields ||\n                                _proxySubscribeFormState.touchedFields) &&\n                                isPreviousFieldTouched !== isBlurEvent);\n                }\n            }\n            shouldUpdateField && shouldRender && _subjects.state.next(output);\n        }\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = (_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (_options.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(_options.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _runSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _runSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const isPromiseFunction = field._f && hasPromiseValidation(field._f);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name], true);\n                    }\n                    const fieldError = await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name]);\n                    }\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                !isEmptyObject(fieldValue) &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => !_options.disabled &&\n        (name && data && set(_formValues, name, data),\n            !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, _options.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.state.next({\n                            name,\n                            values: cloneObject(_formValues),\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                isObject(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: cloneObject(_formValues),\n            });\n            if ((_proxyFormState.isDirty ||\n                _proxyFormState.dirtyFields ||\n                _proxySubscribeFormState.isDirty ||\n                _proxySubscribeFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.state.next({\n            name: _state.mount ? name : undefined,\n            values: cloneObject(_formValues),\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n                    deepEqual(fieldValue, get(_formValues, name, fieldValue));\n        };\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = target.type\n                ? getFieldValue(field._f)\n                : getEventValue(event);\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.state.next({\n                    name,\n                    type: event.type,\n                    values: cloneObject(_formValues),\n                });\n            if (shouldSkipValidation) {\n                if (_proxyFormState.isValid || _proxySubscribeFormState.isValid) {\n                    if (_options.mode === 'onBlur') {\n                        if (isBlurEvent) {\n                            _setValid();\n                        }\n                    }\n                    else if (!isBlurEvent) {\n                        _setValid();\n                    }\n                }\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _runSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid ||\n                        _proxySubscribeFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _setValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                ((_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n                    isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.state.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const _subscribe = (props) => _subjects.state.subscribe({\n        next: (formState) => {\n            if (shouldSubscribeByName(props.name, formState.name, props.exact) &&\n                shouldRenderFormState(formState, props.formState || _proxyFormState, _setFormState, props.reRenderRoot)) {\n                props.callback({\n                    values: { ..._formValues },\n                    ..._formState,\n                    ...formState,\n                });\n            }\n        },\n    }).unsubscribe;\n    const subscribe = (props) => {\n        _state.mount = true;\n        _proxySubscribeFormState = {\n            ..._proxySubscribeFormState,\n            ...props.formState,\n        };\n        return _subscribe({\n            ...props,\n            formState: _proxySubscribeFormState,\n        });\n    };\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.state.next({\n            values: cloneObject(_formValues),\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _setValid();\n    };\n    const _setDisabledField = ({ disabled, name, }) => {\n        if ((isBoolean(disabled) && _state.mount) ||\n            !!disabled ||\n            _names.disabled.has(name)) {\n            disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled) || isBoolean(_options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _setDisabledField({\n                disabled: isBoolean(options.disabled)\n                    ? options.disabled\n                    : _options.disabled,\n                name,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined\n                ? { disabled: options.disabled || _options.disabled }\n                : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist &&\n                e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _runSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        if (_names.disabled.size) {\n            for (const name of _names.disabled) {\n                set(fieldValues, name, undefined);\n            }\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _setValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                const fieldsToCheck = new Set([\n                    ..._names.mount,\n                    ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n                ]);\n                for (const fieldName of Array.from(fieldsToCheck)) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                for (const fieldName of _names.mount) {\n                    setValue(fieldName, get(values, fieldName));\n                }\n            }\n            _formValues = cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.state.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            disabled: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!_options.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? {}\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect &&\n                    isFunction(fieldRef.select) &&\n                    fieldRef.select();\n            }\n        }\n    };\n    const _setFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    const methods = {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _subscribe,\n            _runSchema,\n            _getWatch,\n            _getDirty,\n            _setValid,\n            _setFieldArray,\n            _setDisabledField,\n            _setErrors,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _removeUnmounted,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        subscribe,\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n    return {\n        ...methods,\n        formControl: methods,\n    };\n}\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, rules, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    rules &&\n        control.register(name, rules);\n    React.useEffect(() => control._subjects.array.subscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n    }).unsubscribe, [control]);\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._setFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        !Array.isArray(get(control._fields, name)) &&\n            set(control._fields, name, undefined);\n        control._setFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._setFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._setFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted) &&\n            !getValidationModes(control._options.reValidateMode).isOnSubmit) {\n            if (control._options.resolver) {\n                control._runSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._names.disabled, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.state.next({\n            name,\n            values: cloneObject(control._formValues),\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._setValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._setFieldArray(name);\n        return () => {\n            const updateMounted = (name, value) => {\n                const field = get(control._fields, name);\n                if (field && field._f) {\n                    field._f.mount = value;\n                }\n            };\n            control._options.shouldUnregister || shouldUnregister\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\n        append: React.useCallback(append, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef(undefined);\n    const _values = React.useRef(undefined);\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...(props.formControl ? props.formControl : createFormControl(props)),\n            formState,\n        };\n        if (props.formControl &&\n            props.defaultValues &&\n            !isFunction(props.defaultValues)) {\n            props.formControl.reset(props.defaultValues, props.resetOptions);\n        }\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    React.useLayoutEffect(() => control._subscribe({\n        formState: control._proxyFormState,\n        callback: () => updateFormState({ ...control._formState }),\n        reRenderRoot: true,\n    }), [control]);\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (props.errors && !isEmptyObject(props.errors)) {\n            control._setErrors(props.errors);\n        }\n    }, [props.errors, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._setValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    React.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.state.next({\n                values: control._getWatch(),\n            });\n    }, [props.shouldUnregister, control]);\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, createFormControl, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","import{get as t,set as e}from\"react-hook-form\";const s=(e,s,o)=>{if(e&&\"reportValidity\"in e){const r=t(o,s);e.setCustomValidity(r&&r.message||\"\"),e.reportValidity()}},o=(t,e)=>{for(const o in e.fields){const r=e.fields[o];r&&r.ref&&\"reportValidity\"in r.ref?s(r.ref,o,t):r.refs&&r.refs.forEach(e=>s(e,o,t))}},r=(s,r)=>{r.shouldUseNativeValidation&&o(s,r);const f={};for(const o in s){const n=t(r.fields,o),a=Object.assign(s[o]||{},{ref:n&&n.ref});if(i(r.names||Object.keys(s),o)){const s=Object.assign({},t(f,o));e(s,\"root\",a),e(f,o,s)}else e(f,o,a)}return f},i=(t,e)=>t.some(t=>t.startsWith(e+\".\"));export{r as toNestErrors,o as validateFieldsNatively};\n//# sourceMappingURL=resolvers.mjs.map\n","import{validateFieldsNatively as r,toNestErrors as e}from\"@hookform/resolvers\";import{appendErrors as o}from\"react-hook-form\";var n=function(r,e){for(var n={};r.length;){var t=r[0],s=t.code,i=t.message,a=t.path.join(\".\");if(!n[a])if(\"unionErrors\"in t){var u=t.unionErrors[0].errors[0];n[a]={message:u.message,type:u.code}}else n[a]={message:i,type:s};if(\"unionErrors\"in t&&t.unionErrors.forEach(function(e){return e.errors.forEach(function(e){return r.push(e)})}),e){var c=n[a].types,f=c&&c[t.code];n[a]=o(a,e,n,s,f?[].concat(f,t.message):t.message)}r.shift()}return n},t=function(o,t,s){return void 0===s&&(s={}),function(i,a,u){try{return Promise.resolve(function(e,n){try{var a=Promise.resolve(o[\"sync\"===s.mode?\"parse\":\"parseAsync\"](i,t)).then(function(e){return u.shouldUseNativeValidation&&r({},u),{errors:{},values:s.raw?i:e}})}catch(r){return n(r)}return a&&a.then?a.then(void 0,n):a}(0,function(r){if(function(r){return Array.isArray(null==r?void 0:r.errors)}(r))return{values:{},errors:e(n(r.errors,!u.shouldUseNativeValidation&&\"all\"===u.criteriaMode),u)};throw r}))}catch(r){return Promise.reject(r)}}};export{t as zodResolver};\n//# sourceMappingURL=zod.module.js.map\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","data","copy","isFileListInstance","FileList","Set","Blob","key","compact","filter","Boolean","isUndefined","val","undefined","get","object","path","defaultValue","result","split","reduce","isBoolean","isKey","test","stringToPath","input","replace","set","index","tempPath","length","lastIndex","newValue","objValue","isNaN","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","HookFormContext","useFormContext","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","useWatch","props","methods","disabled","exact","_name","_defaultValue","current","_subscribe","values","callback","updateValue","_formValues","_getWatch","_removeUnmounted","Controller","render","shouldUnregister","isArrayField","array","updateFormState","_formState","_localProxyFormState","isDirty","isLoading","dirtyFields","touchedFields","validatingFields","isValidating","isValid","errors","_setValid","useFormState","_props","_registerProps","register","rules","fieldState","defineProperties","invalid","enumerable","isTouched","error","ref","elm","field","_fields","_f","focus","select","setCustomValidity","message","reportValidity","_shouldUnregisterField","_options","updateMounted","mount","_state","action","unregister","_setDisabledField","useController","appendErrors","validateAllFieldCriteria","types","convertToArrayPayload","createSubject","_observers","observers","next","observer","subscribe","push","unsubscribe","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys","keys2","val1","includes","val2","isEmptyObject","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMultipleSelect","isRadioInput","isRadioOrCheckbox","live","isConnected","unset","paths","childObject","updatePath","slice","baseGet","obj","isEmptyArray","objectHasFunction","markFieldsDirty","fields","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultResult","validResult","getCheckboxValue","options","option","attributes","getFieldValueAs","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","getRadioValue","previous","getFieldValue","files","refs","selectedOptions","getResolverOptions","fieldsNames","criteriaMode","shouldUseNativeValidation","isRegex","RegExp","getRuleValue","rule","source","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","ASYNC_FUNCTION","hasPromiseValidation","fieldReference","validate","find","validateFunction","hasValidation","required","min","max","maxLength","minLength","pattern","isWatched","isBlurEvent","some","watchName","startsWith","iterateFieldsByAction","abortEarly","currentField","schemaErrorLookup","join","foundError","pop","shouldRenderFormState","formStateData","shouldSubscribeByName","signalName","currentName","skipValidation","isSubmitted","reValidateMode","unsetEmptyArray","updateFieldArrayRootError","fieldArrayErrors","isMessage","getValidateError","every","getValueAndMessage","validationData","validateField","async","disabledFieldNames","isFieldArray","inputValue","inputRef","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","createFormControl","submitCount","isSubmitting","isSubmitSuccessful","delayErrorCallback","unMount","timer","_proxySubscribeFormState","_subjects","state","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","shouldUpdateValid","resolver","_runSchema","executeBuiltInValidation","_updateIsValidating","from","forEach","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","context","shouldOnlyCheckValid","valid","isFieldArrayRoot","isPromiseFunction","fieldError","getValues","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","_updateIsFieldValueUpdated","Number","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","previousFieldError","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","shouldRenderByError","_focusInput","fieldNames","executeSchemaAndUpdateState","Promise","shouldFocus","getFieldState","setError","currentError","currentRef","restOfErrorTree","_setFormState","reRenderRoot","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValidating","keepDefaultValue","keepIsValid","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","e","onValidError","preventDefault","persist","fieldValues","size","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","keepDefaultValues","keepValues","keepDirtyValues","fieldsToCheck","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","_setFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","_setErrors","_getFieldArray","_resetDefaultValues","then","resetOptions","_disableForm","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","formControl","generateId","d","performance","now","c","r","Math","random","toString","getFocusFieldName","focusName","focusIndex","appendAt","fillEmptyArray","insert","moveArrayAt","to","splice","prependAt","removeArrayAt","indexes","i","temp","removeAtIndexes","sort","a","b","swapArrayAt","indexA","indexB","updateAt","useFieldArray","keyName","setFields","ids","_fieldIds","_actioned","fieldArrayName","updateValues","updatedFieldArrayValues","existingError","swap","move","prepend","prependValue","append","appendValue","remove","insertValue","update","item","useForm","_formControl","_values","s","t","f","n","assign","code","u","unionErrors","concat","shift","resolve","raw","reject"],"sourceRoot":""}