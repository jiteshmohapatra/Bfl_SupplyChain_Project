{"version":3,"file":"bundle.929af1b45eb780bfc503.7936.js","mappings":"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","sources":["webpack://openboxes/./src/js/components/product-select/ProductSelect.jsx","webpack://openboxes/./src/js/components/stock-movement-wizard/inbound/AddItemsPage.jsx","webpack://openboxes/./src/js/components/stock-movement-wizard/inbound/CreateStockMovement.jsx","webpack://openboxes/./src/js/components/stock-movement-wizard/inbound/SendMovementPage.jsx","webpack://openboxes/./src/js/components/stock-movement-wizard/StockMovementInbound.jsx","webpack://openboxes/./src/js/components/form-elements/ProductSelectField.jsx","webpack://openboxes/./src/js/utils/form-values-utils.jsx","webpack://openboxes/./src/js/components/DocumentButton.jsx","webpack://openboxes/./src/js/components/form-elements/ButtonField.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nimport PropTypes from \"prop-types\";\nimport { useSelector } from \"react-redux\";\nimport { Tooltip } from \"react-tippy\";\n\nimport { debounceProductsFetch } from \"utils/option-utils\";\nimport renderHandlingIcons from \"utils/product-handling-icons\";\nimport Select from \"utils/Select\";\n\nconst productOptionLabel = ({ productCode, displayName, displayNames, name }) =>\n  `${productCode} - ${displayName || displayNames?.default || name}`;\n\nconst Option = (option) => (\n  <Tooltip\n    html={<div className=\"text-truncate\">{option.name}</div>}\n    theme=\"transparent\"\n    disabled={!(option.displayName || option.displayNames?.default)}\n    position=\"top-start\"\n  >\n    <strong\n      style={{ color: option.color || \"black\" }}\n      className=\"d-flex align-items-center\"\n    >\n      {option.label || productOptionLabel(option)}\n      &nbsp;\n      {renderHandlingIcons(option.handlingIcons)}\n    </strong>\n  </Tooltip>\n);\n\nconst SelectedValue = (option) => (\n  <span className=\"d-flex align-items-center\">\n    <span\n      style={{ color: option.showSelectedOptionColor && option.color }}\n      className=\"text-truncate\"\n    >\n      {option.label || productOptionLabel(option)}\n    </span>\n    {renderHandlingIcons(option?.handlingIcons)}\n  </span>\n);\n\nconst ProductSelect = ({\n  onExactProductSelected,\n  locationId,\n  fieldRef,\n  includeUom,\n  ...props\n}) => {\n  const selectRef = useRef(null);\n  const [isExactMatch, setIsExactMatch] = useState(false);\n  const [loadedOptions, setLoadedOptions] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { debounceTime, minSearchLength } = useSelector((state) => ({\n    debounceTime: state.session.searchConfig.debounceTime,\n    minSearchLength: state.session.searchConfig.minSearchLength,\n  }));\n\n  const debouncedProductsFetch = debounceProductsFetch(\n    debounceTime,\n    minSearchLength,\n    locationId,\n    { includeUom },\n  );\n\n  const onEnterPress = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsExactMatch(true);\n  };\n\n  useEffect(() => {\n    if (isExactMatch && loadedOptions.length && searchTerm) {\n      const exactMatches = loadedOptions.filter(\n        (product) => product.exactMatch,\n      );\n      let exactMatchProduct = null;\n\n      if (exactMatches.length === 1) {\n        [exactMatchProduct] = exactMatches;\n      } else if (exactMatches.length > 1) {\n        // if there are more than one exact match\n        // then select one that matches productCode with search string\n        const matchedByProductCode = exactMatches.find(\n          ({ productCode }) => productCode === searchTerm,\n        );\n        if (matchedByProductCode) exactMatchProduct = matchedByProductCode;\n      }\n\n      if (exactMatchProduct) {\n        selectRef.current.select.select.setValue(exactMatchProduct);\n      }\n      if (onExactProductSelected) {\n        /* There are cases when we want to call this callback right after the state change.\n         * Wrapping this callback inside a setTimeout puts it in an event que just like the setState\n         * unlike the regular code which is being executed immediately. */\n        setTimeout(\n          () => onExactProductSelected({ product: exactMatchProduct }),\n          0,\n        );\n      }\n      setIsExactMatch(false);\n      setLoadedOptions([]);\n    }\n  }, [isExactMatch, loadedOptions, searchTerm]);\n\n  const loadProductOptions = (searchString, callback) =>\n    debouncedProductsFetch(searchString, (resultOptions) => {\n      setLoadedOptions(resultOptions);\n      setSearchTerm(searchString);\n      callback(resultOptions);\n    });\n\n  return (\n    <Select\n      {...props}\n      fieldRef={(el) => {\n        selectRef.current = el;\n        if (fieldRef) fieldRef(el);\n      }}\n      async\n      options={[]}\n      loadOptions={props.loadOptions || loadProductOptions}\n      onMenuClose={() => {\n        setLoadedOptions([]);\n        setSearchTerm(\"\");\n      }}\n      filterOption={(item) => item}\n      onEnterPress={onEnterPress}\n      optionRenderer={Option}\n      valueRenderer={SelectedValue}\n    />\n  );\n};\n\nProductSelect.defaultProps = {\n  className: \"text-left\",\n  openOnClick: true,\n  autoload: true,\n  cache: false,\n  showValueTooltip: true,\n  onExactProductSelected: undefined,\n  fieldRef: undefined,\n  loadOptions: undefined,\n  includeUom: false,\n};\n\nProductSelect.propTypes = {\n  className: PropTypes.string,\n  openOnClick: PropTypes.bool,\n  autoload: PropTypes.bool,\n  cache: PropTypes.bool,\n  showValueTooltip: PropTypes.bool,\n  locationId: PropTypes.string.isRequired,\n  onExactProductSelected: PropTypes.func,\n  fieldRef: PropTypes.func,\n  loadOptions: PropTypes.func,\n  includeUom: PropTypes.bool,\n};\n\nexport default ProductSelect;\n","import React, { Component } from \"react\";\n\nimport arrayMutators from \"final-form-arrays\";\nimport update from \"immutability-helper\";\nimport fileDownload from \"js-file-download\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\nimport PropTypes from \"prop-types\";\nimport { confirmAlert } from \"react-confirm-alert\";\nimport { Form } from \"react-final-form\";\nimport { getTranslate } from \"react-localize-redux\";\nimport { connect } from \"react-redux\";\nimport Alert from \"react-s-alert\";\n\nimport { fetchUsers, hideSpinner, showSpinner } from \"actions\";\nimport ArrayField from \"components/form-elements/ArrayField\";\nimport ButtonField from \"components/form-elements/ButtonField\";\nimport DateField from \"components/form-elements/DateField\";\nimport ProductSelectField from \"components/form-elements/ProductSelectField\";\nimport SelectField from \"components/form-elements/SelectField\";\nimport TextField from \"components/form-elements/TextField\";\nimport { STOCK_MOVEMENT_URL } from \"consts/applicationUrls\";\nimport apiClient from \"utils/apiClient\";\nimport { renderFormField, setColumnValue } from \"utils/form-utils\";\nimport Select from \"utils/Select\";\nimport Translate, { translateWithDefaultMessage } from \"utils/Translate\";\n\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\n\nconst DELETE_BUTTON_FIELD = {\n  type: ButtonField,\n  label: \"react.default.button.delete.label\",\n  defaultMessage: \"Delete\",\n  flexWidth: \"1\",\n  fieldKey: \"\",\n  buttonLabel: \"react.default.button.delete.label\",\n  buttonDefaultMessage: \"Delete\",\n  getDynamicAttr: ({\n    fieldValue,\n    removeItem,\n    removeRow,\n    updateTotalCount,\n  }) => ({\n    onClick:\n      fieldValue && fieldValue.id\n        ? () => {\n            removeItem(fieldValue.id).then(() => {\n              updateTotalCount(-1);\n              removeRow();\n            });\n          }\n        : () => {\n            updateTotalCount(-1);\n            removeRow();\n          },\n    disabled: fieldValue && fieldValue.statusCode === \"SUBSTITUTED\",\n  }),\n  attributes: {\n    className: \"btn btn-outline-danger\",\n  },\n};\n\nconst VENDOR_FIELDS = {\n  lineItems: {\n    type: ArrayField,\n    arrowsNavigation: true,\n    virtualized: true,\n    totalCount: ({ totalCount }) => totalCount,\n    isRowLoaded: ({ isRowLoaded }) => isRowLoaded,\n    loadMoreRows: ({ loadMoreRows }) => loadMoreRows(),\n    isFirstPageLoaded: ({ isFirstPageLoaded }) => isFirstPageLoaded,\n    // eslint-disable-next-line react/prop-types\n    addButton: ({\n      // eslint-disable-next-line react/prop-types\n      addRow,\n      getSortOrder,\n      isFromOrder,\n      updateTotalCount,\n    }) => (\n      <button\n        type=\"button\"\n        className=\"btn btn-outline-success btn-xs\"\n        hidden={isFromOrder}\n        onClick={() => {\n          updateTotalCount(1);\n          addRow({\n            sortOrder: getSortOrder(),\n          });\n        }}\n      >\n        <span>\n          <i className=\"fa fa-plus pr-2\" />\n          <Translate\n            id=\"react.default.button.addLine.label\"\n            defaultMessage=\"Add line\"\n          />\n        </span>\n      </button>\n    ),\n    fields: {\n      palletName: {\n        type: TextField,\n        label: \"react.stockMovement.packLevel1.label\",\n        defaultMessage: \"Pack level 1\",\n        flexWidth: \"1\",\n        getDynamicAttr: ({ rowIndex, rowCount, updateRow, values }) => ({\n          autoFocus: rowIndex === rowCount - 1,\n          onBlur: () => updateRow(values, rowIndex),\n        }),\n      },\n      boxName: {\n        type: TextField,\n        label: \"react.stockMovement.packLevel2.label\",\n        defaultMessage: \"Pack level 2\",\n        flexWidth: \"1\",\n        getDynamicAttr: ({ rowIndex, values, updateRow }) => ({\n          onBlur: () => updateRow(values, rowIndex),\n        }),\n      },\n      product: {\n        type: ProductSelectField,\n        label: \"react.stockMovement.product.label\",\n        defaultMessage: \"Product\",\n        headerAlign: \"left\",\n        flexWidth: \"4\",\n        required: true,\n        attributes: {\n          showSelectedOptionColor: true,\n        },\n        getDynamicAttr: ({\n          updateRow,\n          rowIndex,\n          values,\n          originId,\n          focusField,\n        }) => ({\n          locationId: originId,\n          onExactProductSelected: ({ product }) => {\n            if (focusField && product) {\n              focusField(rowIndex, \"quantityRequested\");\n            }\n          },\n          onBlur: () => updateRow(values, rowIndex),\n        }),\n      },\n      lotNumber: {\n        type: TextField,\n        label: \"react.stockMovement.lot.label\",\n        defaultMessage: \"Lot\",\n        flexWidth: \"1\",\n        getDynamicAttr: ({ rowIndex, values, updateRow }) => ({\n          onBlur: () => updateRow(values, rowIndex),\n        }),\n      },\n      expirationDate: {\n        type: DateField,\n        label: \"react.stockMovement.expiry.label\",\n        defaultMessage: \"Expiry\",\n        flexWidth: \"1.5\",\n        attributes: {\n          localizeDate: true,\n          showLocalizedPlaceholder: true,\n          autoComplete: \"off\",\n        },\n        getDynamicAttr: ({ rowIndex, values, updateRow }) => ({\n          onBlur: () => updateRow(values, rowIndex),\n        }),\n      },\n      quantityRequested: {\n        type: TextField,\n        label: \"react.stockMovement.quantity.label\",\n        defaultMessage: \"Qty\",\n        flexWidth: \"1\",\n        required: true,\n        attributes: {\n          type: \"number\",\n        },\n        getDynamicAttr: ({ rowIndex, values, updateRow }) => ({\n          onBlur: () => updateRow(values, rowIndex),\n        }),\n      },\n      recipient: {\n        type: SelectField,\n        label: \"react.stockMovement.recipient.label\",\n        defaultMessage: \"Recipient\",\n        flexWidth: \"1.5\",\n        getDynamicAttr: ({\n          recipients,\n          addRow,\n          rowCount,\n          rowIndex,\n          getSortOrder,\n          updateTotalCount,\n          updateRow,\n          values,\n          setRecipientValue,\n          translate,\n        }) => ({\n          headerHtml: () => (\n            <Select\n              placeholder={translate(\n                \"react.stockMovement.recipient.label\",\n                \"Recipient\",\n              )}\n              className=\"select-xs my-2\"\n              classNamePrefix=\"react-select\"\n              options={recipients}\n              onChange={(val) => {\n                if (val) {\n                  setRecipientValue(val);\n                }\n              }}\n            />\n          ),\n          options: recipients,\n          onTabPress:\n            rowCount === rowIndex + 1\n              ? () => {\n                  updateTotalCount(1);\n                  addRow({ sortOrder: getSortOrder() });\n                }\n              : null,\n          arrowRight:\n            rowCount === rowIndex + 1\n              ? () => {\n                  updateTotalCount(1);\n                  addRow({ sortOrder: getSortOrder() });\n                }\n              : null,\n          arrowDown:\n            rowCount === rowIndex + 1\n              ? () => {\n                  updateTotalCount(1);\n                  addRow({ sortOrder: getSortOrder() });\n                }\n              : null,\n          onBlur: () => updateRow(values, rowIndex),\n        }),\n        attributes: {\n          labelKey: \"name\",\n          openOnClick: false,\n        },\n      },\n      deleteButton: DELETE_BUTTON_FIELD,\n    },\n  },\n};\n\n/* eslint class-methods-use-this: [\"error\",{ \"exceptMethods\": [\"getLineItemsToBeSaved\"] }] */\n/**\n * The second step of stock movement where user can add items to stock list.\n * This component supports three different cases: with or without stocklist\n * when movement is from a depot and when movement is from a vendor.\n */\nclass AddItemsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentLineItems: [],\n      sortOrder: 0,\n      values: { ...this.props.initialValues, lineItems: [] },\n      newItem: false,\n      totalCount: 0,\n      isFirstPageLoaded: false,\n    };\n\n    this.props.showSpinner();\n    this.removeItem = this.removeItem.bind(this);\n    this.importTemplate = this.importTemplate.bind(this);\n    this.getSortOrder = this.getSortOrder.bind(this);\n    this.confirmSave = this.confirmSave.bind(this);\n    this.confirmTransition = this.confirmTransition.bind(this);\n    this.newItemAdded = this.newItemAdded.bind(this);\n    this.validate = this.validate.bind(this);\n    this.isValidForSave = this.isValidForSave.bind(this);\n    this.isRowLoaded = this.isRowLoaded.bind(this);\n    this.loadMoreRows = this.loadMoreRows.bind(this);\n    this.updateTotalCount = this.updateTotalCount.bind(this);\n    this.updateRow = this.updateRow.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.stockMovementTranslationsFetched) {\n      this.dataFetched = true;\n\n      this.fetchAllData();\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.stockMovementTranslationsFetched && !this.dataFetched) {\n      this.dataFetched = true;\n\n      this.fetchAllData();\n    }\n  }\n\n  /**\n   * Returns an array of new stock movement's items and items to be\n   * updated (comparing to previous state of line items).\n   * @param {object} lineItems\n   * @public\n   */\n  getLineItemsToBeSaved(lineItems) {\n    const lineItemsToBeAdded = _.filter(\n      lineItems,\n      (item) =>\n        !item.statusCode &&\n        item.quantityRequested &&\n        item.quantityRequested !== \"0\" &&\n        item.product,\n    );\n    const lineItemsWithStatus = _.filter(lineItems, (item) => item.statusCode);\n    const lineItemsToBeUpdated = [];\n    _.forEach(lineItemsWithStatus, (item) => {\n      const oldItem = _.find(\n        this.state.currentLineItems,\n        (old) => old.id === item.id,\n      );\n      const oldQty = parseInt(oldItem.quantityRequested, 10);\n      const newQty = parseInt(item.quantityRequested, 10);\n      const oldRecipient =\n        oldItem.recipient && _.isObject(oldItem.recipient)\n          ? oldItem.recipient.id\n          : oldItem.recipient;\n      const newRecipient =\n        item.recipient && _.isObject(item.recipient)\n          ? item.recipient.id\n          : item.recipient;\n\n      // Intersection of keys common to both objects (excluding product key)\n      const keyIntersection = _.remove(\n        _.intersection(_.keys(oldItem), _.keys(item)),\n        (key) => key !== \"product\",\n      );\n\n      if (\n        !_.isEqual(\n          _.pick(item, keyIntersection),\n          _.pick(oldItem, keyIntersection),\n        ) ||\n        item.product.id !== oldItem.product.id\n      ) {\n        lineItemsToBeUpdated.push(item);\n      } else if (newQty !== oldQty || newRecipient !== oldRecipient) {\n        lineItemsToBeUpdated.push(item);\n      } else if (\n        item.inventoryItem?.expirationDate &&\n        item.expirationDate &&\n        item.inventoryItem?.expirationDate !== item.expirationDate\n      ) {\n        lineItemsToBeUpdated.push(item);\n      }\n    });\n\n    return [].concat(\n      _.map(lineItemsToBeAdded, (item) => ({\n        product: { id: item.product.id },\n        quantityRequested: item.quantityRequested,\n        palletName: item.palletName,\n        boxName: item.boxName,\n        lotNumber: item.lotNumber,\n        expirationDate: item.expirationDate,\n        recipient: {\n          id: _.isObject(item.recipient)\n            ? item.recipient.id || \"\"\n            : item.recipient || \"\",\n        },\n        sortOrder: item.sortOrder,\n      })),\n      _.map(lineItemsToBeUpdated, (item) => ({\n        id: item.id,\n        product: { id: item.product.id },\n        quantityRequested: item.quantityRequested,\n        palletName: item.palletName,\n        boxName: item.boxName,\n        lotNumber: item.lotNumber,\n        expirationDate: item.expirationDate,\n        recipient: {\n          id: _.isObject(item.recipient)\n            ? item.recipient.id || \"\"\n            : item.recipient || \"\",\n        },\n        sortOrder: item.sortOrder,\n      })),\n    );\n  }\n\n  getSortOrder() {\n    this.setState((prev) => ({\n      sortOrder: prev.sortOrder + 100,\n    }));\n\n    return this.state.sortOrder;\n  }\n\n  setLineItems(response, startIndex) {\n    const { data } = response.data;\n    let lineItemsData;\n\n    if (this.state.values.lineItems.length === 0 && !data.length) {\n      lineItemsData = new Array(1).fill({ sortOrder: 100 });\n    } else {\n      lineItemsData = _.map(data, (val) => ({\n        ...val,\n        disabled: true,\n      }));\n    }\n\n    const sortOrder = _.toInteger(_.last(lineItemsData).sortOrder) + 100;\n    this.setState(\n      (prev) => ({\n        currentLineItems: this.props.isPaginated\n          ? _.uniqBy(_.concat(prev.currentLineItems, data), \"id\")\n          : data,\n        values: {\n          ...prev.values,\n          lineItems: this.props.isPaginated\n            ? _.uniqBy(_.concat(prev.values.lineItems, lineItemsData), \"id\")\n            : lineItemsData,\n        },\n        sortOrder,\n      }),\n      () => {\n        if (\n          !_.isNull(startIndex) &&\n          this.state.values.lineItems.length !== this.state.totalCount\n        ) {\n          this.loadMoreRows({ startIndex: startIndex + this.props.pageSize });\n        }\n        this.props.hideSpinner();\n      },\n    );\n  }\n\n  updateTotalCount(value) {\n    this.setState((prev) => ({\n      totalCount: prev.totalCount + value === 0 ? 1 : prev.totalCount + value,\n    }));\n  }\n\n  updateRow(values, index) {\n    const item = values.lineItems[index];\n    this.setState({\n      values: update(values, {\n        lineItems: { [index]: { $set: item } },\n      }),\n    });\n  }\n\n  dataFetched = false;\n\n  validate(values, ignoreLotAndExpiry) {\n    const errors = {};\n    errors.lineItems = [];\n    const date = moment(this.props.minimumExpirationDate, \"MM/DD/YYYY\");\n\n    _.forEach(values.lineItems, (item, key) => {\n      errors.lineItems[key] = {};\n      if (\n        !_.isNil(item.product) &&\n        (!item.quantityRequested || item.quantityRequested < 0)\n      ) {\n        errors.lineItems[key] = {\n          quantityRequested: \"react.stockMovement.error.enterQuantity.label\",\n        };\n      }\n      if (!_.isEmpty(item.boxName) && _.isEmpty(item.palletName)) {\n        errors.lineItems[key] = {\n          boxName: \"react.stockMovement.error.boxWithoutPallet.label\",\n        };\n      }\n      const dateRequested = moment(item.expirationDate, \"MM/DD/YYYY\");\n      if (date.diff(dateRequested) > 0) {\n        errors.lineItems[key] = {\n          expirationDate: \"react.stockMovement.error.invalidDate.label\",\n        };\n      }\n      if (!ignoreLotAndExpiry) {\n        if (\n          item.expirationDate &&\n          (_.isNil(item.lotNumber) || _.isEmpty(item.lotNumber))\n        ) {\n          errors.lineItems[key] = {\n            lotNumber: \"react.stockMovement.error.expiryWithoutLot.label\",\n          };\n        }\n        if (!_.isNil(item.product) && item.product.lotAndExpiryControl) {\n          if (\n            !item.expirationDate &&\n            (_.isNil(item.lotNumber) || _.isEmpty(item.lotNumber))\n          ) {\n            errors.lineItems[key] = {\n              expirationDate:\n                \"react.stockMovement.error.lotAndExpiryControl.label\",\n              lotNumber: \"react.stockMovement.error.lotAndExpiryControl.label\",\n            };\n          } else if (!item.expirationDate) {\n            errors.lineItems[key] = {\n              expirationDate:\n                \"react.stockMovement.error.lotAndExpiryControl.label\",\n            };\n          } else if (_.isNil(item.lotNumber) || _.isEmpty(item.lotNumber)) {\n            errors.lineItems[key] = {\n              lotNumber: \"react.stockMovement.error.lotAndExpiryControl.label\",\n            };\n          }\n        }\n      }\n    });\n    return errors;\n  }\n\n  isValidForSave(values) {\n    const errors = this.validate(values, true);\n    return !errors.lineItems || errors.lineItems.every(_.isEmpty);\n  }\n\n  newItemAdded() {\n    this.setState({\n      newItem: true,\n    });\n  }\n\n  /**\n   * Shows save confirmation dialog.\n   * @param {function} onConfirm\n   * @public\n   */\n  confirmSave(onConfirm) {\n    confirmAlert({\n      title: this.props.translate(\n        \"react.stockMovement.message.confirmSave.label\",\n        \"Confirm save\",\n      ),\n      message: this.props.translate(\n        \"react.stockMovement.confirmSave.message\",\n        \"Are you sure you want to save? There are some lines with empty or zero quantity, those lines will be deleted.\",\n      ),\n      buttons: [\n        {\n          label: this.props.translate(\"react.default.yes.label\", \"Yes\"),\n          onClick: onConfirm,\n        },\n        {\n          label: this.props.translate(\"react.default.no.label\", \"No\"),\n        },\n      ],\n    });\n  }\n\n  /**\n   * Shows transition confirmation dialog if there are items with the same code.\n   * @param {function} onConfirm\n   * @param {object} items\n   * @public\n   */\n  confirmTransition(onConfirm, items) {\n    confirmAlert({\n      title: this.props.translate(\n        \"react.stockMovement.confirmTransition.label\",\n        \"You have entered the same code twice. Do you want to continue?\",\n      ),\n      message: _.map(items, (item) => (\n        <p key={item.sortOrder}>\n          {`${item.product.productCode} ${item.product.displayNames?.default || item.product.name} ${item.quantityRequested}`}\n        </p>\n      )),\n      buttons: [\n        {\n          label: this.props.translate(\"react.default.yes.label\", \"Yes\"),\n          onClick: onConfirm,\n        },\n        {\n          label: this.props.translate(\"react.default.no.label\", \"No\"),\n        },\n      ],\n    });\n  }\n\n  /**\n   * Shows Inventory item expiration date update confirmation dialog.\n   * @param {function} onConfirm\n   * @public\n   */\n  confirmInventoryItemExpirationDateUpdate(onConfirm) {\n    confirmAlert({\n      title: this.props.translate(\n        \"react.stockMovement.message.confirmSave.label\",\n        \"Confirm save\",\n      ),\n      message: this.props.translate(\n        \"react.stockMovement.confirmExpiryDateUpdate.message\",\n        \"This will update the expiry date across all depots in the system. Are you sure you want to proceed?\",\n      ),\n      buttons: [\n        {\n          label: this.props.translate(\"react.default.yes.label\", \"Yes\"),\n          onClick: onConfirm,\n        },\n        {\n          label: this.props.translate(\"react.default.no.label\", \"No\"),\n        },\n      ],\n    });\n  }\n\n  /**\n   * Fetches all required data.\n   * @public\n   */\n  fetchAllData() {\n    this.props.fetchUsers();\n    this.fetchAddItemsPageData();\n    if (!this.props.isPaginated) {\n      this.fetchLineItems();\n    }\n  }\n\n  /**\n   * Fetches 2nd step data from current stock movement.\n   * @public\n   */\n  fetchLineItems() {\n    const url = `/api/stockMovements/${this.state.values.stockMovementId}/stockMovementItems?stepNumber=2`;\n\n    return apiClient\n      .get(url)\n      .then((response) => {\n        this.setState(\n          {\n            totalCount: response.data.data.length,\n          },\n          () => this.setLineItems(response, null),\n        );\n      })\n      .catch((err) => err);\n  }\n\n  /**\n   * Fetches stock movement's line items and sets them in redux form and in\n   * state as current line items.\n   * @public\n   */\n  fetchAddItemsPageData() {\n    this.props.showSpinner();\n\n    const url = `/api/stockMovements/${this.state.values.stockMovementId}`;\n    apiClient.get(url).then((resp) => {\n      const { hasManageInventory } = resp.data.data;\n      const { statusCode } = resp.data.data;\n      const { totalCount } = resp.data;\n\n      this.setState(\n        (prev) => ({\n          values: {\n            ...prev.values,\n            hasManageInventory,\n            statusCode,\n          },\n          totalCount: totalCount === 0 ? 1 : totalCount,\n        }),\n        () => this.props.hideSpinner(),\n      );\n    });\n  }\n\n  loadMoreRows({ startIndex }) {\n    this.setState({\n      isFirstPageLoaded: true,\n    });\n    const url = `/api/stockMovements/${this.state.values.stockMovementId}/stockMovementItems?offset=${startIndex}&max=${this.props.pageSize}&stepNumber=2`;\n    apiClient.get(url).then((response) => {\n      this.setLineItems(response, startIndex);\n    });\n  }\n\n  /**\n   * Saves current stock movement progress (line items) and goes to the next stock movement step.\n   * @param {object} formValues\n   * @public\n   */\n  nextPage(formValues) {\n    const lineItems = _.filter(\n      formValues.lineItems,\n      (val) => !_.isEmpty(val) && val.product,\n    );\n\n    if (\n      _.some(\n        lineItems,\n        (item) => !item.quantityRequested || item.quantityRequested === \"0\",\n      )\n    ) {\n      this.confirmSave(() =>\n        this.checkDuplicatesSaveAndTransitionToNextStep(formValues, lineItems),\n      );\n    } else {\n      this.checkDuplicatesSaveAndTransitionToNextStep(formValues, lineItems);\n    }\n  }\n\n  checkDuplicatesSaveAndTransitionToNextStep(formValues, lineItems) {\n    const itemsMap = {};\n    _.forEach(lineItems, (item) => {\n      if (itemsMap[item.product.productCode]) {\n        itemsMap[item.product.productCode].push(item);\n      } else {\n        itemsMap[item.product.productCode] = [item];\n      }\n    });\n    const itemsWithSameCode = _.filter(itemsMap, (item) => item.length > 1);\n\n    if (\n      _.some(itemsMap, (item) => item.length > 1) &&\n      !(\n        this.state.values.origin.type === \"SUPPLIER\" ||\n        !this.state.values.hasManageInventory\n      )\n    ) {\n      this.confirmTransition(\n        () => this.saveAndTransitionToNextStep(formValues, lineItems),\n        _.reduce(itemsWithSameCode, (a, b) => a.concat(b), []),\n      );\n    } else {\n      this.saveAndTransitionToNextStep(formValues, lineItems);\n    }\n  }\n\n  /**\n   * Saves current stock movement progress (line items) and goes to the next stock movement step.\n   * @param {object} formValues\n   * @param {object} lineItems\n   * @public\n   */\n  saveAndTransitionToNextStep(formValues, lineItems) {\n    this.props.showSpinner();\n\n    this.saveRequisitionItemsInCurrentStep(lineItems)\n      .then((resp) => {\n        let values = formValues;\n        if (resp) {\n          values = { ...formValues, lineItems: resp.data.data.lineItems };\n        }\n\n        if (\n          _.some(\n            values.lineItems,\n            (item) =>\n              item.inventoryItem &&\n              item.expirationDate !== item.inventoryItem.expirationDate,\n          )\n        ) {\n          if (\n            _.some(\n              values.lineItems,\n              (item) =>\n                item.inventoryItem.quantity &&\n                item.inventoryItem.quantity !== \"0\",\n            )\n          ) {\n            this.props.hideSpinner();\n            this.confirmInventoryItemExpirationDateUpdate(() =>\n              this.updateInventoryItemsAndTransitionToNextStep(\n                values,\n                lineItems,\n              ),\n            );\n          } else {\n            this.updateInventoryItemsAndTransitionToNextStep(values, lineItems);\n          }\n        } else {\n          this.transitionToNextStepAndChangePage(formValues);\n        }\n      })\n      .catch(() => this.props.hideSpinner());\n  }\n\n  /**\n   * Updates stock movement inventory items.\n   * @param {object} formValues\n   * @param {object} lineItems\n   * @public\n   */\n  updateInventoryItemsAndTransitionToNextStep(formValues, lineItems) {\n    const itemsToSave = this.getLineItemsToBeSaved(lineItems);\n    const updateItemsUrl = `/api/stockMovements/${this.state.values.stockMovementId}/updateInventoryItems`;\n    const payload = {\n      id: this.state.values.stockMovementId,\n      lineItems: itemsToSave,\n    };\n\n    this.props.showSpinner();\n\n    apiClient\n      .post(updateItemsUrl, payload)\n      .then(() => this.transitionToNextStepAndChangePage(formValues))\n      .catch(() => this.props.hideSpinner());\n  }\n\n  /**\n   * Saves list of requisition items in current step (without step change). Used to export template.\n   * @param {object} itemCandidatesToSave\n   * @public\n   */\n  saveRequisitionItemsInCurrentStep(itemCandidatesToSave) {\n    const itemsToSave = this.getLineItemsToBeSaved(itemCandidatesToSave);\n    const updateItemsUrl = `/api/stockMovements/${this.state.values.stockMovementId}/updateItems`;\n    const payload = {\n      id: this.state.values.stockMovementId,\n      lineItems: itemsToSave,\n    };\n\n    if (payload.lineItems.length) {\n      return apiClient\n        .post(updateItemsUrl, payload)\n        .then((resp) => {\n          const { lineItems } = resp.data.data;\n\n          const lineItemsBackendData = _.map(lineItems, (val) => ({\n            ...val,\n          }));\n\n          this.setState((prev) => ({\n            currentLineItems: lineItemsBackendData,\n            values: {\n              ...prev.values,\n              lineItems: lineItemsBackendData,\n            },\n          }));\n          return resp;\n        })\n        .catch(() =>\n          Promise.reject(\n            new Error(\n              this.props.translate(\n                \"react.stockMovement.error.saveRequisitionItems.label\",\n                \"Could not save requisition items\",\n              ),\n            ),\n          ),\n        );\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Saves list of requisition items in current step (without step change).\n   * @param {object} formValues\n   * @public\n   */\n  save(formValues) {\n    const lineItems = _.filter(\n      formValues.lineItems,\n      (item) => !_.isEmpty(item),\n    );\n\n    if (\n      _.some(\n        lineItems,\n        (item) => !item.quantityRequested || item.quantityRequested === \"0\",\n      )\n    ) {\n      this.confirmSave(() => this.saveItems(lineItems));\n    } else {\n      this.saveItems(lineItems);\n    }\n  }\n\n  /**\n   * Saves changes made by user in this step and redirects to the shipment view page\n   * @param {object} formValues\n   * @public\n   */\n  saveAndExit(formValues) {\n    const errors = this.validate(formValues).lineItems;\n    if (\n      errors.length &&\n      errors.every((obj) => typeof obj === \"object\" && _.isEmpty(obj))\n    ) {\n      this.saveRequisitionItemsInCurrentStep(formValues.lineItems).then(() => {\n        window.location = STOCK_MOVEMENT_URL.show(formValues.stockMovementId);\n      });\n    } else {\n      confirmAlert({\n        title: this.props.translate(\n          \"react.stockMovement.confirmExit.label\",\n          \"Confirm save\",\n        ),\n        message: this.props.translate(\n          \"react.stockMovement.confirmExit.message\",\n          \"Validation errors occurred. Are you sure you want to exit and lose unsaved data?\",\n        ),\n        buttons: [\n          {\n            label: this.props.translate(\"react.default.yes.label\", \"Yes\"),\n            onClick: () => {\n              window.location = STOCK_MOVEMENT_URL.show(\n                formValues.stockMovementId,\n              );\n            },\n          },\n          {\n            label: this.props.translate(\"react.default.no.label\", \"No\"),\n          },\n        ],\n      });\n    }\n  }\n\n  /**\n   * Saves list of requisition items in current step (without step change).\n   * @param {object} lineItems\n   * @public\n   */\n  saveItems(lineItems) {\n    this.props.showSpinner();\n\n    this.saveRequisitionItemsInCurrentStep(lineItems)\n      .then(() => {\n        this.props.hideSpinner();\n        Alert.success(\n          this.props.translate(\n            \"react.stockMovement.alert.saveSuccess.label\",\n            \"Changes saved successfully\",\n          ),\n          { timeout: 3000 },\n        );\n      })\n      .catch(() => this.props.hideSpinner());\n  }\n\n  /**\n   * Refetch the data, all not saved changes will be lost.\n   * @public\n   */\n  refresh() {\n    confirmAlert({\n      title: this.props.translate(\n        \"react.stockMovement.message.confirmRefresh.label\",\n        \"Confirm refresh\",\n      ),\n      message: this.props.translate(\n        \"react.stockMovement.confirmRefresh.message\",\n        \"Are you sure you want to refresh? Your progress since last save will be lost.\",\n      ),\n      buttons: [\n        {\n          label: this.props.translate(\"react.default.yes.label\", \"Yes\"),\n          onClick: () => this.fetchAllData(),\n        },\n        {\n          label: this.props.translate(\"react.default.no.label\", \"No\"),\n        },\n      ],\n    });\n  }\n\n  /**\n   * Removes chosen item from requisition's items list.\n   * @param {string} itemId\n   * @public\n   */\n  removeItem(itemId) {\n    const removeItemsUrl = `/api/stockMovementItems/${itemId}/removeItem`;\n\n    return apiClient.delete(removeItemsUrl).catch(() => {\n      this.props.hideSpinner();\n      return Promise.reject(\n        new Error(\"react.stockMovement.error.deleteRequisitionItem.label\"),\n      );\n    });\n  }\n\n  /**\n   * Removes all items from requisition's items list.\n   * @public\n   */\n  removeAll() {\n    const removeItemsUrl = `/api/stockMovements/${this.state.values.stockMovementId}/removeAllItems`;\n\n    return apiClient\n      .delete(removeItemsUrl)\n      .then(() => {\n        this.setState((prev) => ({\n          totalCount: 1,\n          currentLineItems: [],\n          values: {\n            ...prev.values,\n            lineItems: new Array(1).fill({ sortOrder: 100 }),\n          },\n        }));\n      })\n      .catch(() => {\n        this.fetchLineItems();\n        return Promise.reject(\n          new Error(\"react.stockMovement.error.deleteRequisitionItem.label\"),\n        );\n      });\n  }\n\n  /**\n   * Transition to next stock movement status:\n   * - 'CHECKING' if origin type is supplier.\n   * - 'VERIFYING' if origin type is other than supplier.\n   * @public\n   */\n  transitionToNextStep() {\n    const url = `/api/stockMovements/${this.state.values.stockMovementId}/status`;\n    const payload = { status: \"CHECKING\" };\n\n    if (this.state.values.statusCode === \"CREATED\") {\n      return apiClient.post(url, payload);\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Transition to next stock movement status and go to next form page.\n   * @param {object} formValues\n   * @public\n   */\n  transitionToNextStepAndChangePage(formValues) {\n    this.transitionToNextStep()\n      .then(() => {\n        this.props.nextPage(formValues);\n      })\n      .catch(() => this.props.hideSpinner());\n  }\n\n  /**\n   * Exports current state of stock movement's to csv file.\n   * @param {object} formValues\n   * @public\n   */\n  exportTemplate(formValues) {\n    const lineItems = _.filter(\n      formValues.lineItems,\n      (item) => !_.isEmpty(item),\n    );\n\n    this.saveItemsAndExportTemplate(formValues, lineItems);\n  }\n\n  isRowLoaded({ index }) {\n    return !!this.state.values.lineItems[index];\n  }\n\n  /**\n   * Exports current state of stock movement's to csv file.\n   * @param {object} formValues\n   * @param {object} lineItems\n   * @public\n   */\n  saveItemsAndExportTemplate(formValues, lineItems) {\n    this.props.showSpinner();\n\n    const { movementNumber, stockMovementId } = formValues;\n    const url = `/stockMovement/exportCsv/${stockMovementId}`;\n    this.saveRequisitionItemsInCurrentStep(lineItems).then(() => {\n      apiClient\n        .get(url, { responseType: \"blob\" })\n        .then((response) => {\n          fileDownload(\n            response.data,\n            `ItemList${movementNumber ? `-${movementNumber}` : \"\"}.csv`,\n            \"text/csv\",\n          );\n          this.props.hideSpinner();\n        })\n        .catch(() => this.props.hideSpinner());\n    });\n  }\n\n  /**\n   * Imports chosen file to backend and then fetches line items.\n   * @param {object} event\n   * @public\n   */\n  importTemplate(event) {\n    this.props.showSpinner();\n    const formData = new FormData();\n    const file = event.target.files[0];\n    const { stockMovementId } = this.state.values;\n\n    formData.append(\"importFile\", file.slice(0, file.size, \"text/csv\"));\n    const config = {\n      headers: {\n        \"content-type\": \"multipart/form-data\",\n      },\n    };\n\n    const url = `/stockMovement/importCsv/${stockMovementId}`;\n\n    return apiClient\n      .post(url, formData, config)\n      .then(() => {\n        this.fetchLineItems();\n        if (_.isNil(_.last(this.state.values.lineItems).product)) {\n          this.setState((prev) => ({\n            values: {\n              ...prev.values,\n              lineItems: [],\n            },\n          }));\n        }\n      })\n      .catch(() => {\n        this.props.hideSpinner();\n      });\n  }\n\n  /**\n   * Saves changes made by user in this step and go back to previous page\n   * @param {object} values\n   * @param {boolean} invalid\n   * @public\n   */\n  previousPage(values, invalid) {\n    if (!invalid) {\n      this.saveRequisitionItemsInCurrentStep(values.lineItems).then(() =>\n        this.props.previousPage(values),\n      );\n    } else {\n      confirmAlert({\n        title: this.props.translate(\n          \"react.stockMovement.confirmPreviousPage.label\",\n          \"Validation error\",\n        ),\n        message: this.props.translate(\n          \"react.stockMovement.confirmPreviousPage.message.label\",\n          \"Cannot save due to validation error on page\",\n        ),\n        buttons: [\n          {\n            label: this.props.translate(\n              \"react.stockMovement.confirmPreviousPage.correctError.label\",\n              \"Correct error\",\n            ),\n          },\n          {\n            label: this.props.translate(\n              \"react.stockMovement.confirmPreviousPage.continue.label\",\n              \"Continue (lose unsaved work)\",\n            ),\n            onClick: () => this.props.previousPage(values),\n          },\n        ],\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Form\n        onSubmit={() => {}}\n        validate={this.validate}\n        mutators={{\n          ...arrayMutators,\n          setColumnValue,\n        }}\n        initialValues={this.state.values}\n        render={({ handleSubmit, values, invalid, form: { mutators } }) => (\n          <div className=\"d-flex flex-column\">\n            <span className=\"buttons-container\">\n              <label\n                htmlFor=\"csvInput\"\n                className=\"float-right mb-1 btn btn-outline-secondary align-self-end ml-1 btn-xs\"\n              >\n                <span>\n                  <i className=\"fa fa-download pr-2\" />\n                  <Translate\n                    id=\"react.default.button.importTemplate.label\"\n                    defaultMessage=\"Import template\"\n                  />\n                </span>\n                <input\n                  id=\"csvInput\"\n                  type=\"file\"\n                  style={{ display: \"none\" }}\n                  onChange={this.importTemplate}\n                  onClick={(event) => {\n                    // eslint-disable-next-line no-param-reassign\n                    event.target.value = null;\n                  }}\n                  accept=\".csv\"\n                />\n              </label>\n              <button\n                type=\"button\"\n                onClick={() => this.exportTemplate(values)}\n                className=\"float-right mb-1 btn btn-outline-secondary align-self-end ml-1 btn-xs\"\n              >\n                <span>\n                  <i className=\"fa fa-upload pr-2\" />\n                  <Translate\n                    id=\"react.default.button.exportTemplate.label\"\n                    defaultMessage=\"Export template\"\n                  />\n                </span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => this.refresh()}\n                className=\"float-right mb-1 btn btn-outline-secondary align-self-end ml-1 btn-xs\"\n              >\n                <span>\n                  <i className=\"fa fa-refresh pr-2\" />\n                  <Translate\n                    id=\"react.default.button.refresh.label\"\n                    defaultMessage=\"Reload\"\n                  />\n                </span>\n              </button>\n              <button\n                type=\"button\"\n                disabled={!this.isValidForSave(values)}\n                onClick={() => this.save(values)}\n                className=\"float-right mb-1 btn btn-outline-secondary align-self-end ml-1 btn-xs\"\n              >\n                <span>\n                  <i className=\"fa fa-save pr-2\" />\n                  <Translate\n                    id=\"react.default.button.save.label\"\n                    defaultMessage=\"Save\"\n                  />\n                </span>\n              </button>\n              <button\n                type=\"button\"\n                disabled={!this.isValidForSave(values)}\n                onClick={() => this.saveAndExit(values)}\n                className=\"float-right mb-1 btn btn-outline-secondary align-self-end ml-1 btn-xs\"\n              >\n                <span>\n                  <i className=\"fa fa-sign-out pr-2\" />\n                  <Translate\n                    id=\"react.default.button.saveAndExit.label\"\n                    defaultMessage=\"Save and exit\"\n                  />\n                </span>\n              </button>\n              <button\n                type=\"button\"\n                disabled={invalid}\n                onClick={() =>\n                  this.removeAll().then(() => this.fetchAndSetLineItems())\n                }\n                className=\"float-right mb-1 btn btn-outline-danger align-self-end btn-xs\"\n              >\n                <span>\n                  <i className=\"fa fa-remove pr-2\" />\n                  <Translate\n                    id=\"react.default.button.deleteAll.label\"\n                    defaultMessage=\"Delete all\"\n                  />\n                </span>\n              </button>\n            </span>\n            <form onSubmit={handleSubmit}>\n              <div className=\"table-form\" data-testid=\"items-table\">\n                {_.map(VENDOR_FIELDS, (fieldConfig, fieldName) =>\n                  renderFormField(fieldConfig, fieldName, {\n                    stocklist: values.stocklist,\n                    recipients: this.props.recipients,\n                    removeItem: this.removeItem,\n                    originId: this.state.values.origin.id,\n                    getSortOrder: this.getSortOrder,\n                    newItemAdded: this.newItemAdded,\n                    newItem: this.state.newItem,\n                    totalCount: this.state.totalCount,\n                    loadMoreRows: this.loadMoreRows,\n                    isRowLoaded: this.isRowLoaded,\n                    updateTotalCount: this.updateTotalCount,\n                    isPaginated: this.props.isPaginated,\n                    isFromOrder: this.state.values.isFromOrder,\n                    updateRow: this.updateRow,\n                    values,\n                    isFirstPageLoaded: this.state.isFirstPageLoaded,\n                    setRecipientValue: (val) =>\n                      mutators.setColumnValue(\"lineItems\", \"recipient\", val),\n                    translate: this.props.translate,\n                  }),\n                )}\n              </div>\n              <div className=\"submit-buttons\">\n                <button\n                  type=\"button\"\n                  disabled={invalid}\n                  onClick={() => this.previousPage(values, invalid)}\n                  className=\"btn btn-outline-primary btn-form btn-xs\"\n                >\n                  <Translate\n                    id=\"react.default.button.previous.label\"\n                    defaultMessage=\"Previous\"\n                  />\n                </button>\n                <button\n                  type=\"submit\"\n                  onClick={() => {\n                    if (!invalid) {\n                      this.nextPage(values);\n                    }\n                  }}\n                  className=\"btn btn-outline-primary btn-form float-right btn-xs\"\n                  disabled={\n                    !_.some(\n                      values.lineItems,\n                      (item) =>\n                        item.product && _.parseInt(item.quantityRequested),\n                    )\n                  }\n                >\n                  <Translate\n                    id=\"react.default.button.next.label\"\n                    defaultMessage=\"Next\"\n                  />\n                </button>\n              </div>\n            </form>\n          </div>\n        )}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  recipients: state.users.data,\n  translate: translateWithDefaultMessage(getTranslate(state.localize)),\n  stockMovementTranslationsFetched:\n    state.session.fetchedTranslations.stockMovement,\n  minimumExpirationDate: state.session.minimumExpirationDate,\n  isPaginated: state.session.isPaginated,\n  pageSize: state.session.pageSize,\n});\n\nexport default connect(mapStateToProps, {\n  showSpinner,\n  hideSpinner,\n  fetchUsers,\n})(AddItemsPage);\n\nAddItemsPage.propTypes = {\n  /** Initial component's data */\n  initialValues: PropTypes.shape({\n    origin: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n    hasManageInventory: PropTypes.bool,\n  }).isRequired,\n  /** Function returning user to the previous page */\n  previousPage: PropTypes.func.isRequired,\n  /**\n   * Function called with the form data when the handleSubmit()\n   * is fired from within the form component.\n   */\n  nextPage: PropTypes.func.isRequired,\n  /** Function called when data is loading */\n  showSpinner: PropTypes.func.isRequired,\n  /** Function called when data has loaded */\n  hideSpinner: PropTypes.func.isRequired,\n  /** Function fetching users */\n  fetchUsers: PropTypes.func.isRequired,\n  /** Array of available recipients  */\n  recipients: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  translate: PropTypes.func.isRequired,\n  stockMovementTranslationsFetched: PropTypes.bool.isRequired,\n  minimumExpirationDate: PropTypes.string.isRequired,\n  /** Return true if pagination is enabled */\n  isPaginated: PropTypes.bool.isRequired,\n  pageSize: PropTypes.number.isRequired,\n};\n","import React, { Component } from \"react\";\n\nimport _ from \"lodash\";\nimport moment from \"moment\";\nimport PropTypes from \"prop-types\";\nimport { confirmAlert } from \"react-confirm-alert\";\nimport { Form } from \"react-final-form\";\nimport { getTranslate } from \"react-localize-redux\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { hideSpinner, showSpinner } from \"actions\";\nimport DateField from \"components/form-elements/DateField\";\nimport SelectField from \"components/form-elements/SelectField\";\nimport TextField from \"components/form-elements/TextField\";\nimport { STOCK_MOVEMENT_URL } from \"consts/applicationUrls\";\nimport apiClient from \"utils/apiClient\";\nimport { renderFormField } from \"utils/form-utils\";\nimport {\n  debounceLocationsFetch,\n  debouncePeopleFetch,\n} from \"utils/option-utils\";\nimport Translate, { translateWithDefaultMessage } from \"utils/Translate\";\n\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\n\nfunction validate(values) {\n  const errors = {};\n  if (!values.description) {\n    errors.description = \"react.default.error.requiredField.label\";\n  }\n  if (!values.origin) {\n    errors.origin = \"react.default.error.requiredField.label\";\n  }\n  if (!values.destination) {\n    errors.destination = \"react.default.error.requiredField.label\";\n  }\n  if (!values.requestedBy) {\n    errors.requestedBy = \"react.default.error.requiredField.label\";\n  }\n  if (!values.dateRequested) {\n    errors.dateRequested = \"react.default.error.requiredField.label\";\n  } else {\n    const dateRequested = moment(values.dateRequested, \"MM/DD/YYYY\");\n    if (moment().diff(dateRequested) < 0) {\n      errors.dateRequested = \"react.stockMovement.error.futureDate.label\";\n    }\n  }\n  return errors;\n}\n\nconst FIELDS = {\n  description: {\n    type: TextField,\n    label: \"react.stockMovement.description.label\",\n    defaultMessage: \"Description\",\n    attributes: {\n      required: true,\n      autoFocus: true,\n    },\n  },\n  origin: {\n    type: SelectField,\n    label: \"react.stockMovement.origin.label\",\n    defaultMessage: \"Origin\",\n    attributes: {\n      required: true,\n      async: true,\n      showValueTooltip: true,\n      openOnClick: false,\n      autoload: false,\n      cache: false,\n      options: [],\n      filterOptions: (options) => options,\n    },\n    getDynamicAttr: (props) => ({\n      loadOptions: props.debouncedLocationsFetch,\n      onChange: (value) => {\n        if (value && props.destination && props.destination.id) {\n          props.fetchStockLists(value, props.destination);\n        }\n      },\n    }),\n  },\n  destination: {\n    type: SelectField,\n    label: \"react.stockMovement.destination.label\",\n    defaultMessage: \"Destination\",\n    attributes: {\n      required: true,\n      async: true,\n      showValueTooltip: true,\n      openOnClick: false,\n      autoload: false,\n      cache: false,\n      options: [],\n      filterOptions: (options) => options,\n    },\n    getDynamicAttr: (props) => ({\n      loadOptions: props.debouncedLocationsFetch,\n      onChange: (value) => {\n        if (value && props.origin && props.origin.id) {\n          props.fetchStockLists(props.origin, value);\n        }\n      },\n      disabled: !props.isSuperuser,\n    }),\n  },\n  stocklist: {\n    label: \"react.stockMovement.stocklist.label\",\n    defaultMessage: \"Stocklist\",\n    type: SelectField,\n    getDynamicAttr: ({ origin, destination, stocklists }) => ({\n      disabled: !(origin && destination && origin.id && destination.id),\n      options: stocklists,\n      showValueTooltip: true,\n      valueKey: \"id\",\n      labelKey: \"name\",\n    }),\n  },\n  requestedBy: {\n    type: SelectField,\n    label: \"react.stockMovement.requestedBy.label\",\n    defaultMessage: \"Requested by\",\n    attributes: {\n      async: true,\n      required: true,\n      showValueTooltip: true,\n      openOnClick: false,\n      autoload: false,\n      cache: false,\n      options: [],\n      labelKey: \"name\",\n      filterOptions: (options) => options,\n    },\n    getDynamicAttr: (props) => ({\n      loadOptions: props.debouncedPeopleFetch,\n    }),\n  },\n  dateRequested: {\n    type: DateField,\n    label: \"react.stockMovement.dateRequested.label\",\n    defaultMessage: \"Date requested\",\n    attributes: {\n      required: true,\n      localizeDate: true,\n      autoComplete: \"off\",\n    },\n  },\n};\n\n/** The first step of stock movement where user can add all the basic information. */\nclass CreateStockMovement extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stocklists: [],\n      setInitialValues: true,\n      values: this.props.initialValues,\n    };\n    this.fetchStockLists = this.fetchStockLists.bind(this);\n\n    this.debouncedPeopleFetch = debouncePeopleFetch(\n      this.props.debounceTime,\n      this.props.minSearchLength,\n    );\n\n    this.debouncedLocationsFetch = debounceLocationsFetch(\n      this.props.debounceTime,\n      this.props.minSearchLength,\n    );\n  }\n\n  componentDidMount() {\n    if (this.state.values.origin && this.state.values.destination) {\n      this.fetchStockLists(\n        this.state.values.origin,\n        this.state.values.destination,\n      );\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (\n      !this.props.match.params.stockMovementId &&\n      this.state.setInitialValues &&\n      nextProps.location.id\n    ) {\n      this.setInitialValues(nextProps.location);\n    }\n  }\n\n  setInitialValues(location) {\n    const { id, locationType, name } = location;\n    const values = {\n      destination: {\n        id,\n        type: locationType ? locationType.locationTypeCode : null,\n        name,\n        label: `${name} [${locationType ? locationType.description : null}]`,\n      },\n    };\n    this.setState({ values, setInitialValues: false });\n  }\n\n  checkStockMovementChange(newValues) {\n    const { origin, destination, stocklist } = this.props.initialValues;\n\n    const originLocs = newValues.origin && origin;\n    const isOldSupplier = origin && origin.type === \"SUPPLIER\";\n    const isNewSupplier = newValues.origin && newValues.type === \"SUPPLIER\";\n    const checkOrigin =\n      originLocs && (!isOldSupplier || (isOldSupplier && !isNewSupplier))\n        ? newValues.origin.id !== origin.id\n        : false;\n\n    const checkDest =\n      stocklist && newValues.destination && destination\n        ? newValues.destination.id !== destination.id\n        : false;\n    const checkStockList = newValues.stockMovementId\n      ? _.get(newValues.stocklist, \"id\", null) !== _.get(stocklist, \"id\", null)\n      : false;\n\n    return checkOrigin || checkDest || checkStockList;\n  }\n\n  /**\n   * Fetches available stock lists from API with given origin and destination.\n   * @param {object} origin\n   * @param {object} destination\n   * @param {function} clearStocklist\n   * @public\n   */\n  fetchStockLists(origin, destination, clearStocklist) {\n    this.props.showSpinner();\n    const url = `/api/stocklists?origin=${origin.id}&destination=${destination.id}`;\n\n    return apiClient\n      .get(url)\n      .then((response) => {\n        const stocklists = _.map(response.data.data, (stocklist) => ({\n          id: stocklist.id,\n          name: stocklist.name,\n          value: stocklist.id,\n          label: stocklist.name,\n        }));\n\n        const stocklistChanged = !_.find(\n          stocklists,\n          (item) => item.value.id === _.get(this.state.values, \"stocklist.id\"),\n        );\n\n        if (stocklistChanged && clearStocklist) {\n          clearStocklist();\n        }\n\n        this.setState({ stocklists }, () => this.props.hideSpinner());\n      })\n      .catch(() => this.props.hideSpinner());\n  }\n\n  /**\n   * Creates or updates stock movement with given data\n   * @param {object} values\n   * @public\n   */\n  saveStockMovement(values) {\n    if (\n      values.origin &&\n      values.destination &&\n      values.requestedBy &&\n      values.dateRequested &&\n      values.description\n    ) {\n      this.props.showSpinner();\n\n      let stockMovementUrl = \"\";\n      if (values.stockMovementId) {\n        stockMovementUrl = `/api/stockMovements/${values.stockMovementId}/updateRequisition`;\n      } else {\n        stockMovementUrl = \"/api/stockMovements\";\n      }\n\n      const payload = {\n        name: \"\",\n        description: values.description,\n        dateRequested: values.dateRequested,\n        origin: { id: values.origin.id },\n        destination: { id: values.destination.id },\n        requestedBy: { id: values.requestedBy.id },\n        stocklist: { id: _.get(values.stocklist, \"id\") || \"\" },\n      };\n\n      apiClient\n        .post(stockMovementUrl, payload)\n        .then((response) => {\n          if (response.data) {\n            const resp = response.data.data;\n            this.props.history.push(STOCK_MOVEMENT_URL.editInbound(resp.id));\n            this.props.nextPage({\n              ...values,\n              stockMovementId: resp.id,\n              lineItems: resp.lineItems,\n              movementNumber: resp.identifier,\n              name: resp.name,\n              stocklist: resp.stocklist,\n            });\n          }\n        })\n        .catch(() => {\n          this.props.hideSpinner();\n          return Promise.reject(\n            new Error(\n              this.props.translate(\n                \"react.stockMovement.error.createStockMovement.label\",\n                \"Could not create stock movement\",\n              ),\n            ),\n          );\n        });\n    }\n  }\n\n  resetToInitialValues() {\n    this.setState(\n      {\n        values: {},\n      },\n      () =>\n        this.setState({\n          values: this.props.initialValues,\n        }),\n    );\n  }\n\n  /**\n   * Calls method creating or saving stock movement and moves user to the next page.\n   * @param {object} values\n   * @public\n   */\n  nextPage(values) {\n    const showModal = this.checkStockMovementChange(values);\n    if (!showModal) {\n      this.saveStockMovement(values);\n    } else {\n      confirmAlert({\n        title: this.props.translate(\n          \"react.stockMovement.message.confirmChange.label\",\n          \"Confirm change\",\n        ),\n        message: this.props.translate(\n          \"react.stockMovement.confirmChange.message\",\n          \"Do you want to change stock movement data? Changing origin, destination or stock list can cause loss of your current work\",\n        ),\n        buttons: [\n          {\n            label: this.props.translate(\"react.default.no.label\", \"No\"),\n            onClick: () => this.resetToInitialValues(),\n          },\n          {\n            label: this.props.translate(\"react.default.yes.label\", \"Yes\"),\n            onClick: () => this.saveStockMovement(values),\n          },\n        ],\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Form\n        onSubmit={(values) => this.nextPage(values)}\n        validate={validate}\n        initialValues={this.state.values}\n        mutators={{\n          clearStocklist: (args, state, utils) => {\n            utils.changeValue(state, \"stocklist\", () => null);\n          },\n        }}\n        render={({ form: { mutators }, handleSubmit, values }) => (\n          <form onSubmit={handleSubmit}>\n            <div className=\"classic-form with-description\">\n              {_.map(FIELDS, (fieldConfig, fieldName) =>\n                renderFormField(fieldConfig, fieldName, {\n                  stocklists: this.state.stocklists,\n                  fetchStockLists: (origin, destination) =>\n                    this.fetchStockLists(\n                      origin,\n                      destination,\n                      mutators.clearStocklist,\n                    ),\n                  origin: values.origin,\n                  destination: values.destination,\n                  isSuperuser: this.props.isSuperuser,\n                  debouncedPeopleFetch: this.debouncedPeopleFetch,\n                  debouncedLocationsFetch: this.debouncedLocationsFetch,\n                }),\n              )}\n            </div>\n            <div className=\"submit-buttons\">\n              <button\n                type=\"submit\"\n                className=\"btn btn-outline-primary float-right btn-xs\"\n              >\n                <Translate\n                  id=\"react.default.button.next.label\"\n                  defaultMessage=\"Next\"\n                />\n              </button>\n            </div>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  location: state.session.currentLocation,\n  isSuperuser: state.session.isSuperuser,\n  translate: translateWithDefaultMessage(getTranslate(state.localize)),\n  debounceTime: state.session.searchConfig.debounceTime,\n  minSearchLength: state.session.searchConfig.minSearchLength,\n  user: state.session.user,\n});\n\nexport default withRouter(\n  connect(mapStateToProps, {\n    showSpinner,\n    hideSpinner,\n  })(CreateStockMovement),\n);\n\nCreateStockMovement.propTypes = {\n  /** React router's object which contains information about url varaiables and params */\n  match: PropTypes.shape({\n    params: PropTypes.shape({ stockMovementId: PropTypes.string }),\n  }).isRequired,\n  /** Initial component's data */\n  initialValues: PropTypes.shape({\n    origin: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n    destination: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n    stocklist: PropTypes.shape({}),\n  }).isRequired,\n  /** Function called when data is loading */\n  showSpinner: PropTypes.func.isRequired,\n  /** Function called when data has loaded */\n  hideSpinner: PropTypes.func.isRequired,\n  /**\n   * Function called with the form data when the handleSubmit()\n   * is fired from within the form component.\n   */\n  nextPage: PropTypes.func.isRequired,\n  /** React router's object used to manage session history */\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  /** Current location */\n  location: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.string,\n    locationType: PropTypes.shape({\n      description: PropTypes.string,\n      locationTypeCode: PropTypes.string,\n    }),\n  }).isRequired,\n  /** Return true if current user is superuser */\n  isSuperuser: PropTypes.bool.isRequired,\n  translate: PropTypes.func.isRequired,\n  debounceTime: PropTypes.number.isRequired,\n  minSearchLength: PropTypes.number.isRequired,\n};\n","import React, { Component } from \"react\";\n\nimport arrayMutators from \"final-form-arrays\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\nimport PropTypes from \"prop-types\";\nimport { confirmAlert } from \"react-confirm-alert\";\nimport Dropzone from \"react-dropzone\";\nimport { Form } from \"react-final-form\";\nimport { getTranslate } from \"react-localize-redux\";\nimport { connect } from \"react-redux\";\nimport Alert from \"react-s-alert\";\n\nimport { hideSpinner, showSpinner } from \"actions\";\nimport DocumentButton from \"components/DocumentButton\";\nimport ArrayField from \"components/form-elements/ArrayField\";\nimport DateField from \"components/form-elements/DateField\";\nimport LabelField from \"components/form-elements/LabelField\";\nimport SelectField from \"components/form-elements/SelectField\";\nimport TextField from \"components/form-elements/TextField\";\nimport { STOCK_MOVEMENT_URL } from \"consts/applicationUrls\";\nimport DateFormat from \"consts/dateFormat\";\nimport apiClient from \"utils/apiClient\";\nimport { renderFormField } from \"utils/form-utils\";\nimport { formatProductDisplayName } from \"utils/form-values-utils\";\nimport { debounceLocationsFetch } from \"utils/option-utils\";\nimport Translate, { translateWithDefaultMessage } from \"utils/Translate\";\nimport splitTranslation, { formatDate } from \"utils/translation-utils\";\n\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\n\nconst SHIPMENT_FIELDS = {\n  \"origin.name\": {\n    label: \"react.stockMovement.origin.label\",\n    defaultMessage: \"Origin\",\n    type: (params) => <TextField {...params} />,\n    attributes: {\n      disabled: true,\n    },\n  },\n  destination: {\n    label: \"react.stockMovement.destination.label\",\n    defaultMessage: \"Destination\",\n    fieldKey: \"\",\n    type: (params) => {\n      if (params.canBeEdited && !params.hasStockList) {\n        return <SelectField {...params} />;\n      }\n      return null;\n    },\n    getDynamicAttr: ({\n      canBeEdited,\n      hasStockList,\n      debouncedLocationsFetch,\n    }) => {\n      if (canBeEdited && !hasStockList) {\n        return {\n          required: true,\n          async: true,\n          showValueTooltip: true,\n          openOnClick: false,\n          autoload: false,\n          loadOptions: debouncedLocationsFetch,\n          cache: false,\n          options: [],\n          filterOptions: (options) => options,\n        };\n      }\n      return { formatValue: (fieldValue) => _.get(fieldValue, \"name\") };\n    },\n  },\n  \"destination.name\": {\n    label: \"react.stockMovement.destination.label\",\n    defaultMessage: \"Destination\",\n    type: (params) => {\n      if (params.canBeEdited && !params.hasStockList) {\n        return null;\n      }\n      return <TextField {...params} />;\n    },\n    getDynamicAttr: ({ canBeEdited, hasStockList }) => ({\n      disabled: !canBeEdited || hasStockList,\n    }),\n  },\n  dateShipped: {\n    type: DateField,\n    label: \"react.stockMovement.shipDate.label\",\n    defaultMessage: \"Shipment date\",\n    attributes: {\n      localizeDate: true,\n      localizedDateFormat: DateFormat.DEFAULT,\n      // It's necessary for properly setting up the time part of the localized date format\n      dateFormat: \"MM/DD/YYYY HH:mm Z\",\n      required: true,\n      showTimeSelect: true,\n      autoComplete: \"off\",\n      showError: true,\n    },\n    getDynamicAttr: ({ issued, showOnly }) => ({\n      disabled: issued || showOnly,\n    }),\n  },\n  shipmentType: {\n    type: SelectField,\n    label: \"react.stockMovement.shipmentType.label\",\n    defaultMessage: \"Shipment type\",\n    attributes: {\n      required: true,\n      showValueTooltip: true,\n      valueKey: \"id\",\n      labelKey: \"name\",\n    },\n    getDynamicAttr: ({ shipmentTypes, received, showOnly }) => ({\n      options: shipmentTypes,\n      disabled: showOnly || received,\n    }),\n  },\n  trackingNumber: {\n    type: TextField,\n    label: \"react.stockMovement.trackingNumber.label\",\n    defaultMessage: \"Tracking number\",\n    getDynamicAttr: ({ received, showOnly }) => ({\n      disabled: showOnly || received,\n    }),\n  },\n  driverName: {\n    type: TextField,\n    label: \"react.stockMovement.driverName.label\",\n    defaultMessage: \"Driver name\",\n    getDynamicAttr: ({ received, showOnly }) => ({\n      disabled: showOnly || received,\n    }),\n  },\n  comments: {\n    type: TextField,\n    label: \"react.stockMovement.comments.label\",\n    defaultMessage: \"Comments\",\n    getDynamicAttr: ({ received, showOnly }) => ({\n      disabled: showOnly || received,\n    }),\n  },\n  expectedDeliveryDate: {\n    type: DateField,\n    label: \"react.stockMovement.expectedDeliveryDate.label\",\n    defaultMessage: \"Expected receipt date\",\n    attributes: {\n      localizeDate: true,\n      required: true,\n      showTimeSelect: false,\n      autoComplete: \"off\",\n    },\n  },\n};\n\nconst SUPPLIER_FIELDS = {\n  tableItems: {\n    type: ArrayField,\n    virtualized: true,\n    totalCount: ({ totalCount }) => totalCount,\n    isRowLoaded: ({ isRowLoaded }) => isRowLoaded,\n    loadMoreRows: ({ loadMoreRows }) => loadMoreRows(),\n    isFirstPageLoaded: ({ isFirstPageLoaded }) => isFirstPageLoaded,\n    fields: {\n      palletName: {\n        type: LabelField,\n        label: \"react.stockMovement.packLevel1.label\",\n        defaultMessage: \"Pack level 1\",\n        getDynamicAttr: ({ isPalletNameEmpty }) => ({\n          hide: isPalletNameEmpty,\n        }),\n      },\n      boxName: {\n        type: LabelField,\n        label: \"react.stockMovement.packLevel2.label\",\n        defaultMessage: \"Pack level 2\",\n        getDynamicAttr: ({ isBoxNameEmpty }) => ({ hide: isBoxNameEmpty }),\n      },\n      productCode: {\n        type: LabelField,\n        label: \"react.stockMovement.code.label\",\n        defaultMessage: \"Code\",\n      },\n      product: {\n        type: LabelField,\n        label: \"react.stockMovement.product.label\",\n        defaultMessage: \"Product\",\n        headerAlign: \"left\",\n        getDynamicAttr: ({\n          fieldValue,\n          isBoxNameEmpty,\n          isPalletNameEmpty,\n        }) => ({\n          flexWidth:\n            12 + (isBoxNameEmpty ? 12 : 0) + (isPalletNameEmpty ? 12 : 0),\n          showValueTooltip: !!fieldValue?.displayNames?.default,\n          tooltipValue: fieldValue?.name,\n        }),\n        attributes: {\n          className: \"text-left\",\n          formatValue: formatProductDisplayName,\n        },\n      },\n      lotNumber: {\n        type: LabelField,\n        label: \"react.stockMovement.lot.label\",\n        defaultMessage: \"Lot\",\n      },\n      expirationDate: {\n        type: LabelField,\n        label: \"react.stockMovement.expiry.label\",\n        defaultMessage: \"Expiry\",\n        getDynamicAttr: ({ formatLocalizedDate }) => ({\n          formatValue: (value) => formatLocalizedDate(value, DateFormat.COMMON),\n        }),\n      },\n      quantityRequested: {\n        type: LabelField,\n        fixedWidth: \"150px\",\n        label: \"react.stockMovement.quantityPicked.label\",\n        defaultMessage: \"Qty Picked\",\n      },\n      \"recipient.name\": {\n        type: LabelField,\n        label: \"react.stockMovement.recipient.label\",\n        defaultMessage: \"Recipient\",\n      },\n    },\n  },\n};\n\n/**\n * The last step of stock movement where user can see the whole movement,\n * print documents, upload documents, add additional information and send it.\n */\nclass SendMovementPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shipmentTypes: [],\n      documents: [],\n      files: [],\n      values: { ...this.props.initialValues, tableItems: [] },\n      totalCount: 0,\n      isFirstPageLoaded: false,\n    };\n    this.props.showSpinner();\n    this.onDrop = this.onDrop.bind(this);\n    this.isRowLoaded = this.isRowLoaded.bind(this);\n    this.loadMoreRows = this.loadMoreRows.bind(this);\n    this.toggleDropdown = this.toggleDropdown.bind(this);\n    this.validate = this.validate.bind(this);\n\n    this.debouncedLocationsFetch = debounceLocationsFetch(\n      this.props.debounceTime,\n      this.props.minSearchLength,\n    );\n  }\n\n  componentDidMount() {\n    this.props.showSpinner();\n    if (this.props.stockMovementTranslationsFetched) {\n      this.dataFetched = true;\n\n      this.fetchStockMovementData();\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.stockMovementTranslationsFetched && !this.dataFetched) {\n      this.dataFetched = true;\n\n      this.fetchStockMovementData();\n    }\n  }\n\n  /**\n   * Updates files' array after dropping them to dropzone area.\n   * @param {object} newFiles\n   * @public\n   */\n  onDrop(newFiles) {\n    const { files } = this.state;\n    const difference = _.differenceBy(files, newFiles, \"name\");\n    this.setState({\n      files: _.concat(difference, newFiles),\n    });\n  }\n\n  onSave(values) {\n    this.props.showSpinner();\n\n    this.saveValues(values)\n      .then(() => {\n        this.props.hideSpinner();\n\n        if (values.statusCode === \"DISPATCHED\") {\n          this.fetchStockMovementData();\n        }\n        Alert.success(\n          this.props.translate(\n            \"react.stockMovement.alert.saveSuccess.label\",\n            \"Changes saved successfully\",\n          ),\n          { timeout: 3000 },\n        );\n      })\n      .catch(() => this.props.hideSpinner());\n  }\n\n  dataFetched = false;\n\n  saveValues(values) {\n    const payload = {\n      destination: { id: values.destination.id },\n      dateShipped: values.dateShipped,\n      shipmentType: values.shipmentType.id,\n      trackingNumber: values.trackingNumber || \"\",\n      driverName: values.driverName || \"\",\n      comments: values.comments || \"\",\n      expectedDeliveryDate: values.expectedDeliveryDate || \"\",\n    };\n\n    return this.saveShipment(payload);\n  }\n\n  /**\n   * Removes a file by name from files array\n   * @param {string} name\n   * @public\n   */\n  removeFile(name) {\n    const { files } = this.state;\n    _.remove(files, (file) => file.name === name);\n    this.setState({ files });\n  }\n\n  /**\n   * Removes a bulk of files by name from files array\n   * @param {Array} names\n   * @public\n   */\n  removeFiles(names) {\n    const { files } = this.state;\n    _.forEach(names, (name) => {\n      _.remove(files, (file) => file.name === name);\n    });\n    this.setState({ files });\n  }\n\n  /**\n   * Fetches available shipment types from API.\n   * @public\n   */\n  fetchShipmentTypes() {\n    const url = \"/api/generic/shipmentType\";\n\n    return apiClient\n      .get(url)\n      .then((response) => {\n        const shipmentTypes = _.map(response.data.data, (type) => {\n          const [en, fr] = _.split(type.name, \"|fr:\");\n          return {\n            ...type,\n            label: this.props.locale === \"fr\" && fr ? fr : en,\n          };\n        });\n\n        this.setState({ shipmentTypes }, () => this.props.hideSpinner());\n      })\n      .catch(() => this.props.hideSpinner());\n  }\n\n  fetchStockMovementItems() {\n    const url = `/api/stockMovements/${this.state.values.stockMovementId}/stockMovementItems?stepNumber=6`;\n    apiClient.get(url).then((response) => {\n      const { data } = response.data;\n      const tableItems = data;\n      this.setState((prev) => ({\n        values: {\n          ...prev.values,\n          tableItems,\n        },\n      }));\n    });\n  }\n\n  loadMoreRows({ startIndex }) {\n    if (this.state.totalCount) {\n      const url = `/api/stockMovements/${this.state.values.stockMovementId}/stockMovementItems?offset=${startIndex}&max=${this.props.pageSize}&stepNumber=6`;\n      apiClient.get(url).then((response) => {\n        const { data } = response.data;\n        const tableItemsData = _.map(data, (val) => ({\n          ...val,\n          productName: val.productName ? val.productName : val.product.name,\n        }));\n\n        const uniqBy = _.find(tableItemsData, \"id\") ? \"id\" : \"shipmentItemId\";\n\n        this.setState(\n          (prev) => ({\n            values: {\n              ...prev.values,\n              tableItems: _.uniqBy(\n                _.concat(prev.values.tableItems, tableItemsData),\n                uniqBy,\n              ),\n            },\n            isFirstPageLoaded: true,\n          }),\n          () => {\n            if (this.state.values.tableItems.length !== this.state.totalCount) {\n              this.loadMoreRows({\n                startIndex: startIndex + this.props.pageSize,\n              });\n            }\n          },\n        );\n      });\n    }\n  }\n\n  isRowLoaded({ index }) {\n    return !!this.state.values.tableItems[index];\n  }\n\n  /**\n   * Fetches 5th step data from current stock movement.\n   * @public\n   */\n  fetchStockMovementData() {\n    const url = `/api/stockMovements/${this.state.values.stockMovementId}?stepNumber=6`;\n\n    return apiClient\n      .get(url)\n      .then((response) => {\n        const stockMovementData = response.data.data;\n        const { associations } = response.data.data;\n        const { totalCount } = response.data;\n\n        const documents = _.filter(\n          associations.documents,\n          (doc) => doc.stepNumber === 5,\n        );\n        const destinationType = stockMovementData.destination.locationType;\n        this.setState(\n          (prev) => ({\n            documents,\n            totalCount,\n            values: {\n              ...prev.values,\n              dateShipped: stockMovementData.dateShipped,\n              shipmentType: {\n                ...stockMovementData.shipmentType,\n                label: splitTranslation(\n                  stockMovementData.shipmentType.name,\n                  this.props.locale,\n                ),\n              },\n              trackingNumber: stockMovementData.trackingNumber,\n              driverName: stockMovementData.driverName,\n              comments: stockMovementData.comments,\n              expectedDeliveryDate: stockMovementData.expectedDeliveryDate,\n              // Below values are reassigned in case of editing destination or description\n              name: stockMovementData.name,\n              description: stockMovementData.description,\n              destination: {\n                id: stockMovementData.destination.id,\n                type: destinationType ? destinationType.locationTypeCode : null,\n                name: stockMovementData.destination.name,\n                label: `${stockMovementData.destination.name}\n                [${destinationType ? destinationType.description : null}]`,\n              },\n            },\n          }),\n          () => {\n            this.props.nextPage(this.state.values);\n            this.fetchShipmentTypes();\n            if (!this.props.isPaginated) {\n              this.fetchStockMovementItems();\n            }\n          },\n        );\n      })\n      .catch(() => this.props.hideSpinner());\n  }\n\n  /**\n   * Sends files uploaded by user to backend.\n   * @param {object} file\n   * @public\n   */\n  sendFile(file) {\n    const url = `/stockMovement/uploadDocument/${this.state.values.stockMovementId}`;\n\n    const data = new FormData();\n    data.append(\"fileContents\", file);\n\n    return apiClient.post(url, data);\n  }\n\n  /**\n   * Bulk send of files uploaded by user to backend.\n   * @param {Array} files\n   * @public\n   */\n  sendFiles(files) {\n    const url = `/stockMovement/uploadDocuments/${this.state.values.stockMovementId}`;\n\n    const data = new FormData();\n    _.forEach(files, (file, idx) => {\n      data.append(`filesContents[${idx}]`, file);\n    });\n\n    return apiClient.post(url, data);\n  }\n\n  /**\n   * Saves data with shipment details.\n   * @param {object} payload\n   * @public\n   */\n  saveShipment(payload) {\n    const url = `/api/stockMovements/${this.state.values.stockMovementId}/updateShipment`;\n\n    return apiClient.post(url, payload);\n  }\n\n  /**\n   * Updates stock movement status to DISPATCHED with post method.\n   * @public\n   */\n  stateTransitionToSent() {\n    const url = `/api/stockMovements/${this.state.values.stockMovementId}/status`;\n    const payload = { status: \"DISPATCHED\" };\n\n    return apiClient.post(url, payload);\n  }\n\n  /**\n   * Uploads files and sends the whole stock movement.\n   * @param {object} values\n   * @public\n   */\n  sendFilesAndSave(values) {\n    const errors = this.validate(values);\n    if (_.isEmpty(errors)) {\n      this.props.showSpinner();\n      const { files } = this.state;\n      if (files.length > 1) {\n        this.sendFiles(files)\n          .then(() => {\n            Alert.success(\n              this.props.translate(\n                \"react.stockMovement.alert.filesSuccess.label\",\n                \"Files uploaded successfuly!\",\n              ),\n              { timeout: 3000 },\n            );\n            this.removeFiles(_.map(files, (file) => file.name));\n            this.prepareRequestAndSubmitStockMovement(values);\n          })\n          .catch(() =>\n            Alert.error(\n              this.props.translate(\n                \"react.stockMovement.alert.filesError.label\",\n                \"Error occured during files upload!\",\n              ),\n            ),\n          )\n          .finally(() => this.props.hideSpinner());\n      } else if (files.length === 1) {\n        this.sendFile(files[0])\n          .then(() => {\n            Alert.success(\n              this.props.translate(\n                \"react.stockMovement.alert.fileSuccess.label\",\n                \"File uploaded successfuly!\",\n              ),\n              { timeout: 3000 },\n            );\n            this.removeFile(files[0].name);\n            this.prepareRequestAndSubmitStockMovement(values);\n          })\n          .catch(() =>\n            Alert.error(\n              this.props.translate(\n                \"react.stockMovement.alert.fileError.label\",\n                \"Error occured during file upload!\",\n              ),\n            ),\n          )\n          .finally(() => this.props.hideSpinner());\n      } else {\n        this.prepareRequestAndSubmitStockMovement(values);\n      }\n    }\n  }\n\n  prepareRequestAndSubmitStockMovement(values) {\n    const payload = {\n      dateShipped: values.dateShipped,\n      shipmentType: values.shipmentType.id,\n      trackingNumber: values.trackingNumber || \"\",\n      driverName: values.driverName || \"\",\n      comments: values.comments || \"\",\n      expectedDeliveryDate: values.expectedDeliveryDate || \"\",\n    };\n\n    if (\n      this.props.currentLocationId !== values.origin.id &&\n      values.origin.type !== \"SUPPLIER\" &&\n      values.hasManageInventory\n    ) {\n      Alert.error(\n        this.props.translate(\n          \"react.stockMovement.alert.sendStockMovement.label\",\n          \"You are not able to send shipment from a location other than origin. Change your current location.\",\n        ),\n      );\n      this.props.hideSpinner();\n    } else if (\n      values.shipmentType.id ===\n      _.find(\n        this.state.shipmentTypes,\n        (shipmentType) => shipmentType.label === \"Default\",\n      ).id\n    ) {\n      Alert.error(\n        this.props.translate(\n          \"react.stockMovement.alert.populateShipmentType.label\",\n          \"Please populate shipment type before continuing\",\n        ),\n      );\n      this.props.hideSpinner();\n    } else {\n      this.saveShipment(payload)\n        .then(() => {\n          this.stateTransitionToSent()\n            .then(() => {\n              // redirect to requisition list\n              window.location = STOCK_MOVEMENT_URL.show(\n                this.state.values.stockMovementId,\n              );\n            })\n            .catch(() => this.props.hideSpinner());\n        })\n        .catch(() => this.props.hideSpinner());\n    }\n  }\n\n  /**\n   * Saves changes made by user in this step and go back to previous page\n   * @param {object} values\n   * @param {boolean} invalid\n   * @public\n   */\n  previousPage(values, invalid) {\n    if (!invalid) {\n      this.saveValues(values).then(() => this.props.previousPage(values));\n    } else {\n      confirmAlert({\n        title: this.props.translate(\n          \"react.stockMovement.confirmPreviousPage.label\",\n          \"Validation error\",\n        ),\n        message: this.props.translate(\n          \"react.stockMovement.confirmPreviousPage.message.label\",\n          \"Cannot save due to validation error on page\",\n        ),\n        buttons: [\n          {\n            label: this.props.translate(\n              \"react.stockMovement.confirmPreviousPage.correctError.label\",\n              \"Correct error\",\n            ),\n          },\n          {\n            label: this.props.translate(\n              \"react.stockMovement.confirmPreviousPage.continue.label\",\n              \"Continue (lose unsaved work)\",\n            ),\n            onClick: () => this.props.previousPage(values),\n          },\n        ],\n      });\n    }\n  }\n\n  /**\n   * Saves changes made by user in this step and redirects to the shipment view page\n   * @param {object} values\n   * @public\n   */\n  saveAndExit(values) {\n    const errors = this.validate(values);\n    if (_.isEmpty(errors)) {\n      this.saveValues(values).then(() => {\n        window.location = STOCK_MOVEMENT_URL.show(values.stockMovementId);\n      });\n    } else {\n      confirmAlert({\n        title: this.props.translate(\n          \"react.stockMovement.confirmExit.label\",\n          \"Confirm save\",\n        ),\n        message: this.props.translate(\n          \"react.stockMovement.confirmExit.message\",\n          \"Validation errors occurred. Are you sure you want to exit and lose unsaved data?\",\n        ),\n        buttons: [\n          {\n            label: this.props.translate(\"react.default.yes.label\", \"Yes\"),\n            onClick: () => {\n              window.location = STOCK_MOVEMENT_URL.show(values.stockMovementId);\n            },\n          },\n          {\n            label: this.props.translate(\"react.default.no.label\", \"No\"),\n          },\n        ],\n      });\n    }\n  }\n\n  /**\n   * Rollback stock movement if it has been shipped\n   * @public\n   */\n  rollbackStockMovement(values) {\n    this.props.showSpinner();\n    const url = `/api/stockMovements/${this.state.values.stockMovementId}/status`;\n    const payload = { rollback: true };\n\n    const isOrigin = this.props.currentLocationId === values.origin.id;\n    const isDestination =\n      this.props.currentLocationId === values.destination.id;\n\n    if (\n      (values.hasManageInventory && isOrigin) ||\n      (!values.hasManageInventory && isDestination)\n    ) {\n      apiClient.post(url, payload).then(() => {\n        this.props.hideSpinner();\n        window.location.reload();\n      });\n    } else {\n      this.props.hideSpinner();\n      Alert.error(\n        this.props.translate(\n          \"react.stockMovement.alert.rollbackShipment.label\",\n          \"You are not able to rollback shipment from your location.\",\n        ),\n      );\n    }\n  }\n\n  /**\n   * Toggle the downloadable files\n   */\n  toggleDropdown() {\n    const { isDropdownVisible } = this.state;\n    this.setState({\n      isDropdownVisible: !isDropdownVisible,\n    });\n  }\n\n  validate(values) {\n    const errors = {};\n    const date = moment(this.props.minimumExpirationDate, \"MM/DD/YYYY\");\n    const dateShipped = moment(values.dateShipped, \"MM/DD/YYYY\");\n    const expectedDeliveryDate = moment(\n      values.expectedDeliveryDate,\n      \"MM/DD/YYYY\",\n    );\n\n    if (date.diff(dateShipped) > 0) {\n      errors.dateShipped = \"react.stockMovement.error.invalidDate.label\";\n    }\n    if (!values.dateShipped) {\n      errors.dateShipped = \"react.default.error.requiredField.label\";\n    }\n    if (!values.shipmentType) {\n      errors.shipmentType = \"react.default.error.requiredField.label\";\n    }\n    if (!values.expectedDeliveryDate) {\n      errors.expectedDeliveryDate = \"react.default.error.requiredField.label\";\n    }\n    if (moment(dateShipped).diff(expectedDeliveryDate) > 0) {\n      errors.expectedDeliveryDate =\n        \"react.stockMovement.error.deliveryDateBeforeShipDate.label\";\n      errors.dateShipped =\n        \"react.stockMovement.error.deliveryDateBeforeShipDate.label\";\n    }\n\n    return errors;\n  }\n\n  render() {\n    return (\n      <div>\n        <Form\n          onSubmit={() => {}}\n          validate={this.validate}\n          mutators={{ ...arrayMutators }}\n          initialValues={this.state.values}\n          render={({ handleSubmit, values, invalid }) => (\n            <form onSubmit={handleSubmit}>\n              <div className=\"classic-form classic-form-condensed\">\n                <span className=\"buttons-container classic-form-buttons\">\n                  <div\n                    className={`dropzone float-right mb-1 btn btn-outline-secondary ${values.statusCode === \"DISPATCHED\" ? \"disabled\" : \"\"} align-self-end btn-xs mr-1`}\n                  >\n                    <Dropzone\n                      disabled={values.statusCode === \"DISPATCHED\"}\n                      onDrop={this.onDrop}\n                      multiple\n                    >\n                      {({ getRootProps, getInputProps }) => (\n                        <div {...getRootProps()}>\n                          <input {...getInputProps()} />\n                          <span>\n                            <i className=\"fa fa-upload pr-2\" />\n                            <Translate\n                              id=\"react.stockMovement.uploadDocuments.label\"\n                              defaultMessage=\"Upload Documents\"\n                            />\n                          </span>\n                          {_.map(this.state.files, (file) => (\n                            <div\n                              key={file.name}\n                              className=\"chosen-file d-flex justify-content-center align-items-center\"\n                            >\n                              <div className=\"text-truncate\">{file.name}</div>\n                              <a\n                                href=\"#\"\n                                className=\"remove-button\"\n                                onClick={(event) => {\n                                  this.removeFile(file.name);\n                                  event.stopPropagation();\n                                }}\n                              >\n                                <span className=\"fa fa-remove\" />\n                              </a>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </Dropzone>\n                  </div>\n                  <div className=\"dropdown\">\n                    <button\n                      type=\"button\"\n                      onClick={this.toggleDropdown}\n                      className=\"dropdown-button float-right mb-1 btn btn-outline-secondary align-self-end btn-xs mr-1\"\n                    >\n                      <span>\n                        <i className=\"fa fa-sign-out pr-2\" />\n                        <Translate\n                          id=\"react.default.button.download.label\"\n                          defaultMessage=\"Download\"\n                        />\n                      </span>\n                    </button>\n                    <div\n                      className={`dropdown-content print-buttons-container col-md-3 flex-grow-1 \n                      ${this.state.isDropdownVisible ? \"visible\" : \"\"}`}\n                    >\n                      {this.state.documents.length &&\n                        _.map(this.state.documents, (document, idx) => {\n                          if (document.hidden) {\n                            return null;\n                          }\n                          return (\n                            <DocumentButton\n                              link={document.uri}\n                              buttonTitle={document.name}\n                              {...document}\n                              key={idx}\n                              onClick={() => this.saveValues(values)}\n                              disabled={false}\n                            />\n                          );\n                        })}\n                    </div>\n                  </div>\n                  <span>\n                    <button\n                      type=\"button\"\n                      onClick={() => this.onSave(values)}\n                      className=\"btn btn-outline-secondary float-right btn-form btn-xs ml-1\"\n                      disabled={invalid}\n                    >\n                      <span>\n                        <i className=\"fa fa-save pr-2\" />\n                        <Translate\n                          id=\"react.default.button.save.label\"\n                          defaultMessage=\"Save\"\n                        />\n                      </span>\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => this.saveAndExit(values)}\n                      className=\"float-right mb-1 btn btn-outline-secondary align-self-end btn-xs\"\n                    >\n                      <span>\n                        <i className=\"fa fa-sign-out pr-2\" />\n                        <Translate\n                          id=\"react.default.button.saveAndExit.label\"\n                          defaultMessage=\"Save and exit\"\n                        />\n                      </span>\n                    </button>\n                  </span>\n                </span>\n                <div className=\"form-title\">\n                  <Translate\n                    id=\"react.attribute.options.label\"\n                    defaultMessage=\"Sending options\"\n                  />\n                </div>\n                {_.map(SHIPMENT_FIELDS, (fieldConfig, fieldName) =>\n                  renderFormField(fieldConfig, fieldName, {\n                    shipmentTypes: this.state.shipmentTypes,\n                    issued: values.statusCode === \"DISPATCHED\",\n                    received: values.received,\n                    canBeEdited: !values.received,\n                    debouncedLocationsFetch: this.debouncedLocationsFetch,\n                  }),\n                )}\n              </div>\n              <div>\n                <div className=\"submit-buttons\">\n                  <button\n                    type=\"submit\"\n                    className=\"btn btn-outline-primary btn-form btn-xs\"\n                    disabled={values.statusCode === \"DISPATCHED\"}\n                    onClick={() => this.previousPage(values, invalid)}\n                  >\n                    <Translate\n                      id=\"react.default.button.previous.label\"\n                      defaultMessage=\"Previous\"\n                    />\n                  </button>\n                  <button\n                    type=\"submit\"\n                    onClick={() => {\n                      this.sendFilesAndSave(values);\n                    }}\n                    className={`${values.shipped ? \"btn btn-outline-secondary\" : \"btn btn-outline-success\"} float-right btn-form btn-xs`}\n                    disabled={values.statusCode === \"DISPATCHED\"}\n                  >\n                    <Translate\n                      id=\"react.stockMovement.sendShipment.label\"\n                      defaultMessage=\"Send shipment\"\n                    />\n                  </button>\n                  {values.shipped && this.props.isUserAdmin ? (\n                    <button\n                      type=\"submit\"\n                      onClick={() => {\n                        this.rollbackStockMovement(values);\n                      }}\n                      className=\"btn btn-outline-success float-right btn-xs\"\n                      disabled={\n                        invalid || !(values.statusCode === \"DISPATCHED\")\n                      }\n                    >\n                      <span>\n                        <i className=\"fa fa-undo pr-2\" />\n                        <Translate\n                          id=\"react.default.button.rollback.label\"\n                          defaultMessage=\"Rollback\"\n                        />\n                      </span>\n                    </button>\n                  ) : null}\n                </div>\n                <div className=\"my-2 table-form\" data-testid=\"items-table\">\n                  {_.map(SUPPLIER_FIELDS, (fieldConfig, fieldName) =>\n                    renderFormField(fieldConfig, fieldName, {\n                      hasBinLocationSupport: this.props.hasBinLocationSupport,\n                      totalCount: this.state.totalCount,\n                      loadMoreRows: this.loadMoreRows,\n                      isRowLoaded: this.isRowLoaded,\n                      formatLocalizedDate: this.props.formatLocalizedDate,\n                      isPaginated: this.props.isPaginated,\n                      isFirstPageLoaded: this.state.isFirstPageLoaded,\n                      // eslint-disable-next-line max-len\n                      isBoxNameEmpty: _.every(\n                        this.state.values.tableItems,\n                        ({ boxName }) => !boxName,\n                      ),\n                      // eslint-disable-next-line max-len\n                      isPalletNameEmpty: _.every(\n                        this.state.values.tableItems,\n                        ({ palletName }) => !palletName,\n                      ),\n                    }),\n                  )}\n                </div>\n              </div>\n            </form>\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  translate: translateWithDefaultMessage(getTranslate(state.localize)),\n  currentLocationId: state.session.currentLocation.id,\n  stockMovementTranslationsFetched:\n    state.session.fetchedTranslations.stockMovement,\n  debounceTime: state.session.searchConfig.debounceTime,\n  minSearchLength: state.session.searchConfig.minSearchLength,\n  locale: state.session.activeLanguage,\n  isUserAdmin: state.session.isUserAdmin,\n  hasBinLocationSupport: state.session.currentLocation.hasBinLocationSupport,\n  isPaginated: state.session.isPaginated,\n  pageSize: state.session.pageSize,\n  minimumExpirationDate: state.session.minimumExpirationDate,\n  formatLocalizedDate: formatDate(state.localize),\n});\n\nexport default connect(mapStateToProps, { showSpinner, hideSpinner })(\n  SendMovementPage,\n);\n\nSendMovementPage.propTypes = {\n  /** Initial component's data */\n  initialValues: PropTypes.shape({}).isRequired,\n  /** Function returning user to the previous page */\n  previousPage: PropTypes.func.isRequired,\n  /** Function called when data is loading */\n  showSpinner: PropTypes.func.isRequired,\n  /** Function called when data has loaded */\n  hideSpinner: PropTypes.func.isRequired,\n  nextPage: PropTypes.func.isRequired,\n  translate: PropTypes.func.isRequired,\n  /** Name of the currently selected location */\n  currentLocationId: PropTypes.string.isRequired,\n  stockMovementTranslationsFetched: PropTypes.bool.isRequired,\n  debounceTime: PropTypes.number.isRequired,\n  minSearchLength: PropTypes.number.isRequired,\n  locale: PropTypes.string.isRequired,\n  isUserAdmin: PropTypes.bool.isRequired,\n  /** Is true when currently selected location supports bins */\n  hasBinLocationSupport: PropTypes.bool.isRequired,\n  /** Return true if pagination is enabled */\n  isPaginated: PropTypes.bool.isRequired,\n  pageSize: PropTypes.number.isRequired,\n  minimumExpirationDate: PropTypes.string.isRequired,\n  formatLocalizedDate: PropTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\n\nimport PropTypes from \"prop-types\";\nimport { getTranslate } from \"react-localize-redux\";\nimport { connect } from \"react-redux\";\n\nimport { fetchTranslations, hideSpinner, showSpinner } from \"actions\";\nimport AddItemsPage from \"components/stock-movement-wizard/inbound/AddItemsPage\";\nimport CreateStockMovement from \"components/stock-movement-wizard/inbound/CreateStockMovement\";\nimport SendMovementPage from \"components/stock-movement-wizard/inbound/SendMovementPage\";\nimport Wizard from \"components/wizard/Wizard\";\nimport DateFormat from \"consts/dateFormat\";\nimport apiClient from \"utils/apiClient\";\nimport { translateWithDefaultMessage } from \"utils/Translate\";\nimport { formatDate } from \"utils/translation-utils\";\n\nimport \"components/stock-movement-wizard/StockMovement.scss\";\n\n// TODO: Cleanup not required code\n// TODO: Revise docs\n\n/** Main inbound stock movement form's wizard component. */\nclass StockMovements extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      values: this.props.initialValues,\n      currentPage: 1,\n    };\n\n    this.updateWizardValues = this.updateWizardValues.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchTranslations(\"\", \"stockMovement\");\n\n    if (this.props.stockMovementTranslationsFetched) {\n      this.dataFetched = true;\n      this.fetchInitialValues();\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.locale && this.props.locale !== nextProps.locale) {\n      this.props.fetchTranslations(nextProps.locale, \"stockMovement\");\n    }\n\n    if (nextProps.stockMovementTranslationsFetched && !this.dataFetched) {\n      this.dataFetched = true;\n      this.fetchInitialValues();\n    }\n  }\n\n  /**\n   * Returns shipment's name containing shipment's origin, destination, requisition date,\n   * tracking number given by user on the last step, description and stock list if chosen.\n   * @public\n   */\n  get wizardTitle() {\n    const { values } = this.state;\n    if (!values.movementNumber && !values.trackingNumber) {\n      return [];\n    }\n    return [\n      {\n        text: this.props.translate(\n          \"react.stockMovement.label\",\n          \"Stock Movement\",\n        ),\n        color: \"#000000\",\n        delimeter: \" | \",\n      },\n      {\n        text: values.movementNumber,\n        color: \"#000000\",\n        delimeter: \" - \",\n      },\n      {\n        text: values.origin.name,\n        color: \"#004d40\",\n        delimeter: \" to \",\n      },\n      {\n        text: values.destination.name,\n        color: \"#01579b\",\n        delimeter: \", \",\n      },\n      {\n        text: this.props.formatLocalizedDate(\n          values.dateRequested,\n          DateFormat.COMMON,\n        ),\n        color: \"#4a148c\",\n        delimeter: \", \",\n      },\n      {\n        text: values.description,\n        color: \"#770838\",\n        delimeter: \"\",\n      },\n    ];\n  }\n\n  get additionalWizardTitle() {\n    const { currentPage, values } = this.state;\n    const shipped = values.shipped ? \"SHIPPED\" : \"\";\n    const received = values.received ? \"RECEIVED\" : \"\";\n    if (currentPage === 3) {\n      return (\n        <span className=\"shipment-status float-right\">\n          {`${shipped || received || \"PENDING\"}`}\n        </span>\n      );\n    }\n    return null;\n  }\n\n  /**\n   * Returns array of form steps.\n   * @public\n   */\n  get stepList() {\n    return [\n      this.props.translate(\"react.stockMovement.create.label\", \"Create\"),\n      this.props.translate(\"react.stockMovement.addItems.label\", \"Add items\"),\n      this.props.translate(\"react.stockMovement.send.label\", \"Send\"),\n    ];\n  }\n\n  updateWizardValues(currentPage, values) {\n    this.setState({ currentPage, values });\n  }\n\n  /**\n   * Returns array of form's components.\n   * @public\n   */\n  pageList = [CreateStockMovement, AddItemsPage, SendMovementPage];\n\n  dataFetched = false;\n\n  /**\n   * Fetches initial values from API.\n   * @public\n   */\n  fetchInitialValues() {\n    if (this.props.match.params.stockMovementId) {\n      this.props.showSpinner();\n      const url = `/api/stockMovements/${this.props.match.params.stockMovementId}`;\n      apiClient\n        .get(url)\n        .then((response) => {\n          const resp = response.data.data;\n          const originType = resp.origin.locationType;\n          const destinationType = resp.destination.locationType;\n          const values = {\n            ...resp,\n            stockMovementId: resp.id,\n            movementNumber: resp.identifier,\n            origin: {\n              id: resp.origin.id,\n              type: originType ? originType.locationTypeCode : null,\n              name: resp.origin.name,\n              label: `${resp.origin.name} [${originType ? originType.description : null}]`,\n            },\n            destination: {\n              id: resp.destination.id,\n              type: destinationType ? destinationType.locationTypeCode : null,\n              name: resp.destination.name,\n              label: `${resp.destination.name} [${destinationType ? destinationType.description : null}]`,\n            },\n            requestedBy: {\n              id: resp.requestedBy.id,\n              name: resp.requestedBy.name,\n              label: resp.requestedBy.name,\n            },\n          };\n\n          let currentPage = 1;\n          switch (values.statusCode) {\n            case \"NEW\":\n              break;\n            case \"CREATED\":\n            case \"REQUESTING\":\n              currentPage = 2;\n              break;\n            default:\n              currentPage = 3;\n              break;\n          }\n\n          this.setState({ values, currentPage });\n        })\n        .catch(() => this.props.hideSpinner());\n    }\n  }\n\n  render() {\n    const { values, currentPage } = this.state;\n\n    return (\n      <Wizard\n        pageList={this.pageList}\n        stepList={this.stepList}\n        initialValues={values}\n        title={this.wizardTitle}\n        additionalTitle={this.additionalWizardTitle}\n        currentPage={currentPage}\n        prevPage={currentPage === 1 ? 1 : currentPage - 1}\n        updateWizardValues={this.updateWizardValues}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  locale: state.session.activeLanguage,\n  stockMovementTranslationsFetched:\n    state.session.fetchedTranslations.stockMovement,\n  translate: translateWithDefaultMessage(getTranslate(state.localize)),\n  formatLocalizedDate: formatDate(state.localize),\n});\n\nexport default connect(mapStateToProps, {\n  showSpinner,\n  hideSpinner,\n  fetchTranslations,\n})(StockMovements);\n\nStockMovements.propTypes = {\n  /** React router's object which contains information about url variables and params */\n  match: PropTypes.shape({\n    params: PropTypes.shape({ stockMovementId: PropTypes.string }),\n  }).isRequired,\n  /** Function called when data is loading */\n  showSpinner: PropTypes.func.isRequired,\n  /** Function called when data has loaded */\n  hideSpinner: PropTypes.func.isRequired,\n  /** Initial components' data */\n  initialValues: PropTypes.shape({\n    shipmentStatus: PropTypes.string,\n  }),\n  locale: PropTypes.string.isRequired,\n  stockMovementTranslationsFetched: PropTypes.bool.isRequired,\n  fetchTranslations: PropTypes.func.isRequired,\n  translate: PropTypes.func.isRequired,\n  formatLocalizedDate: PropTypes.func.isRequired,\n};\n\nStockMovements.defaultProps = {\n  initialValues: {},\n};\n","import React from \"react\";\n\nimport BaseField from \"components/form-elements/BaseField\";\nimport ProductSelect from \"components/product-select/ProductSelect\";\n\nconst ProductSelectField = (props) => {\n  // eslint-disable-next-line react/prop-types\n  const renderInput = ({ className, ...attributes }) => (\n    <ProductSelect\n      {...attributes}\n      name={attributes.id}\n      className={`select-xs ${className || \"\"}`}\n      classNamePrefix=\"react-select\"\n    />\n  );\n\n  return <BaseField {...props} renderInput={renderInput} />;\n};\n\nexport default ProductSelectField;\n","import React from \"react\";\n\nimport _ from \"lodash\";\nimport { Tooltip } from \"react-tippy\";\n\nimport notification from \"components/Layout/notifications/notification\";\nimport NotificationType from \"consts/notificationTypes\";\nimport renderHandlingIcons from \"utils/product-handling-icons\";\n\nexport const getInvoiceDescription = (rowValue) => {\n  if (\n    !rowValue?.orderAdjustment &&\n    !rowValue?.isAdjustment &&\n    rowValue?.displayNames?.default\n  ) {\n    return (\n      <Tooltip\n        html={rowValue?.productName}\n        theme=\"transparent\"\n        delay=\"150\"\n        duration=\"250\"\n        hideDelay=\"50\"\n      >\n        {rowValue.displayNames?.default}\n      </Tooltip>\n    );\n  }\n  return rowValue?.description;\n};\n\nexport const formatProductSupplierSubtext = (productSupplier) =>\n  productSupplier?.name ? `(source: ${productSupplier?.name})` : null;\n\nexport const formatProductDisplayName = (rowValue) => (\n  <div className=\"d-flex\">\n    <span className=\"text-truncate\">\n      {rowValue?.displayName ||\n        rowValue?.displayNames?.default ||\n        rowValue?.name}\n    </span>\n    {renderHandlingIcons(rowValue?.handlingIcons)}\n  </div>\n);\n\nexport const getReceivingPayloadContainers = (formValues) =>\n  _.map(formValues.containers, (container) => ({\n    ...container,\n    shipmentItems: _.map(container.shipmentItems, (item) => {\n      if (!_.get(item, \"recipient.id\")) {\n        return _.omit(\n          {\n            ...item,\n            recipient: \"\",\n          },\n          \"product.displayNames\",\n        );\n      }\n      /** We have to omit product.displayNames, due to an error\n       *  while binding bindData(partialReceiptItem, shipmentItemMap)\n       *  it expects product.displayNames to have a setter, as we pass\n       *  product.displayNames.default: XYZ, to the update method, but it's not a\n       *  writable property.\n       *  With deprecated product.translatedName it was not the case, because\n       *  it was recognizing the transient, and we didn't access product.translatedName.something\n       *  but product.translatedName directly\n       * */\n      return _.omit(item, \"product.displayNames\");\n    }),\n  }));\n\nexport const matchesProductCodeOrName = ({ product, filterValue }) => {\n  const { productCode, name, displayNames } = product;\n  const value = filterValue?.toLowerCase();\n  return (\n    productCode?.toLowerCase()?.includes(value) ||\n    name?.toLowerCase()?.includes(value) ||\n    displayNames?.default?.toLowerCase()?.includes(value)\n  );\n};\n\nexport const showOutboundEditValidationErrors = ({ translate, errors }) => {\n  const errorMessage = `${translate(\"react.stockMovement.errors.errorInLine.label\", \"Error occurred in line\")}:`;\n  const errorDetails = errors.reduce(\n    (acc, message, key) => [\n      ...acc,\n      `${message && `${key + 1} - ${_.map(message, (val) => translate(`${val}`))}`}`,\n    ],\n    [],\n  );\n\n  notification(NotificationType.ERROR_OUTLINED)({\n    message: errorMessage,\n    detailsArray: errorDetails,\n  });\n};\n\nexport const omitEmptyValues = (values) =>\n  _.omitBy(values, (val) => {\n    // Do not omit boolean, numbers and date values\n    if (\n      typeof val === \"boolean\" ||\n      typeof val === \"number\" ||\n      val instanceof Date\n    ) {\n      return false;\n    }\n    return _.isEmpty(val);\n  });\n\nexport const mapStringToLimitedList = (value, elementsSeparator, lengthLimit) =>\n  (value?.length > lengthLimit\n    ? `${_.take(value, lengthLimit).join(\"\")}...`\n    : value\n  )?.split(elementsSeparator);\n","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nfunction handleClick(onClick, event, link) {\n  event.preventDefault();\n  const newWindow = window.open(\"\", \"_blank\");\n  if (onClick) {\n    onClick().then(() => {\n      newWindow.location.href = link;\n    });\n  } else {\n    newWindow.location.href = link;\n  }\n}\n\nconst DocumentButton = ({\n  buttonIcon,\n  buttonTitle,\n  link,\n  target,\n  disabled,\n  onClick,\n}) => (\n  <a\n    href={link}\n    className={`py-1 mb-1 btn btn-outline-secondary ${disabled ? \"disabled\" : \"\"}`}\n    target={target}\n    rel=\"noopener noreferrer\"\n    onClick={(event) => handleClick(onClick, event, link)}\n  >\n    <span>\n      <i className={`pr-2 fa ${buttonIcon}`} />\n      {buttonTitle}\n    </span>\n  </a>\n);\n\nexport default DocumentButton;\n\nDocumentButton.propTypes = {\n  /** String with font awesome icon class name */\n  buttonIcon: PropTypes.string,\n  /** String button title */\n  buttonTitle: PropTypes.string,\n  /** Link to document that will be set in href */\n  link: PropTypes.string.isRequired,\n  /** Target attribute, that specifies where to open the linked document (_blank by default) */\n  target: PropTypes.string,\n  disabled: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nDocumentButton.defaultProps = {\n  buttonIcon: \"fa-download\",\n  buttonTitle: \"Print Document\",\n  target: \"_blank\",\n};\n","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\nimport { Tooltip } from \"react-tippy\";\n\nimport Translate from \"utils/Translate\";\n\nconst ButtonField = (props) => {\n  const {\n    fieldName,\n    fieldConfig: {\n      buttonLabel: ButtonLabel,\n      buttonDefaultMessage,\n      getDynamicAttr,\n      attributes = { className: \"btn-outline-primary\" },\n    },\n  } = props;\n  const dynamicAttr = getDynamicAttr ? getDynamicAttr(props) : {};\n  const attr = { ...attributes, ...dynamicAttr };\n\n  return (\n    <button\n      type=\"button\"\n      key={fieldName}\n      {...attr}\n      className={`text-truncate btn btn-xs ${attr.className}`}\n    >\n      {typeof ButtonLabel === \"string\" ? (\n        <Tooltip\n          html={\n            ButtonLabel && (\n              <Translate\n                id={ButtonLabel}\n                defaultMessage={buttonDefaultMessage}\n              />\n            )\n          }\n          theme=\"transparent\"\n          arrow=\"true\"\n          delay=\"150\"\n          duration=\"250\"\n          hideDelay=\"50\"\n        >\n          {\" \"}\n          <Translate id={ButtonLabel} defaultMessage={buttonDefaultMessage} />\n        </Tooltip>\n      ) : (\n        <ButtonLabel />\n      )}\n    </button>\n  );\n};\n\nexport default ButtonField;\n\nButtonField.propTypes = {\n  fieldName: PropTypes.string.isRequired,\n  fieldConfig: PropTypes.shape({\n    getDynamicAttr: PropTypes.func,\n  }).isRequired,\n};\n"],"names":["productOptionLabel","_ref","productCode","displayName","displayNames","name","concat","Option","option","_option$displayNames","React","Tooltip","html","className","theme","disabled","position","style","color","label","renderHandlingIcons","handlingIcons","SelectedValue","showSelectedOptionColor","ProductSelect","_ref2","onExactProductSelected","locationId","fieldRef","includeUom","props","_objectWithoutProperties","_excluded","selectRef","useRef","_useState2","_slicedToArray","useState","isExactMatch","setIsExactMatch","_useState4","loadedOptions","setLoadedOptions","_useState6","searchTerm","setSearchTerm","_useSelector","useSelector","state","debounceTime","session","searchConfig","minSearchLength","debouncedProductsFetch","debounceProductsFetch","useEffect","length","exactMatches","filter","product","exactMatch","exactMatchProduct","_exactMatches","matchedByProductCode","find","_ref3","current","select","setValue","setTimeout","Select","_extends","el","async","options","loadOptions","searchString","callback","resultOptions","onMenuClose","filterOption","item","onEnterPress","event","preventDefault","stopPropagation","optionRenderer","valueRenderer","defaultProps","openOnClick","autoload","cache","showValueTooltip","undefined","propTypes","PropTypes","isRequired","DELETE_BUTTON_FIELD","type","ButtonField","defaultMessage","flexWidth","fieldKey","buttonLabel","buttonDefaultMessage","getDynamicAttr","fieldValue","removeItem","removeRow","updateTotalCount","onClick","id","then","statusCode","attributes","VENDOR_FIELDS","lineItems","ArrayField","arrowsNavigation","virtualized","totalCount","isRowLoaded","loadMoreRows","_ref4","isFirstPageLoaded","_ref5","addButton","_ref6","addRow","getSortOrder","isFromOrder","hidden","sortOrder","Translate","fields","palletName","TextField","_ref7","rowIndex","rowCount","updateRow","values","autoFocus","onBlur","boxName","_ref8","ProductSelectField","headerAlign","required","_ref9","originId","focusField","_ref10","lotNumber","_ref11","expirationDate","DateField","localizeDate","showLocalizedPlaceholder","autoComplete","_ref12","quantityRequested","_ref13","recipient","SelectField","_ref14","recipients","setRecipientValue","translate","headerHtml","placeholder","classNamePrefix","onChange","val","onTabPress","arrowRight","arrowDown","labelKey","deleteButton","AddItemsPage","_Component","_this","_classCallCheck","_defineProperty","_callSuper","currentLineItems","_objectSpread","initialValues","newItem","showSpinner","bind","importTemplate","confirmSave","confirmTransition","newItemAdded","validate","isValidForSave","_inherits","key","value","this","stockMovementTranslationsFetched","dataFetched","fetchAllData","nextProps","_this2","lineItemsToBeAdded","_","lineItemsWithStatus","lineItemsToBeUpdated","_item$inventoryItem","_item$inventoryItem2","oldItem","old","oldQty","parseInt","newQty","oldRecipient","newRecipient","keyIntersection","inventoryItem","push","setState","prev","response","startIndex","lineItemsData","_this3","data","Array","fill","isPaginated","pageSize","hideSpinner","index","update","$set","ignoreLotAndExpiry","errors","date","moment","minimumExpirationDate","dateRequested","diff","lotAndExpiryControl","every","onConfirm","confirmAlert","title","message","buttons","items","_item$product$display","fetchUsers","fetchAddItemsPageData","fetchLineItems","_this4","url","stockMovementId","apiClient","get","setLineItems","err","_this5","resp","hasManageInventory","_ref15","_this6","formValues","_this7","checkDuplicatesSaveAndTransitionToNextStep","_this8","itemsMap","itemsWithSameCode","origin","saveAndTransitionToNextStep","a","b","_this9","saveRequisitionItemsInCurrentStep","quantity","confirmInventoryItemExpirationDateUpdate","updateInventoryItemsAndTransitionToNextStep","transitionToNextStepAndChangePage","_this10","itemsToSave","getLineItemsToBeSaved","updateItemsUrl","payload","post","itemCandidatesToSave","_this11","lineItemsBackendData","Promise","reject","Error","resolve","_this12","saveItems","obj","_typeof","window","location","STOCK_MOVEMENT_URL","show","_this13","Alert","timeout","_this14","itemId","_this15","removeItemsUrl","_this16","status","_this17","transitionToNextStep","nextPage","saveItemsAndExportTemplate","_ref16","_this18","movementNumber","responseType","fileDownload","_this19","formData","FormData","file","target","files","append","slice","size","headers","invalid","_this20","previousPage","_this21","Form","onSubmit","mutators","arrayMutators","setColumnValue","render","_ref17","handleSubmit","form","htmlFor","display","accept","exportTemplate","refresh","save","saveAndExit","removeAll","fetchAndSetLineItems","fieldConfig","fieldName","renderFormField","stocklist","Component","connect","users","translateWithDefaultMessage","getTranslate","localize","fetchedTranslations","stockMovement","description","destination","requestedBy","FIELDS","filterOptions","debouncedLocationsFetch","fetchStockLists","isSuperuser","stocklists","valueKey","debouncedPeopleFetch","CreateStockMovement","setInitialValues","debouncePeopleFetch","debounceLocationsFetch","match","params","locationType","locationTypeCode","newValues","_this$props$initialVa","originLocs","isOldSupplier","isNewSupplier","checkOrigin","checkDest","checkStockList","clearStocklist","stockMovementUrl","history","editInbound","identifier","checkStockMovementChange","resetToInitialValues","saveStockMovement","args","utils","changeValue","withRouter","currentLocation","user","SHIPMENT_FIELDS","canBeEdited","hasStockList","formatValue","dateShipped","localizedDateFormat","DateFormat","DEFAULT","dateFormat","showTimeSelect","showError","issued","showOnly","shipmentType","shipmentTypes","received","trackingNumber","driverName","comments","expectedDeliveryDate","SUPPLIER_FIELDS","tableItems","LabelField","hide","isPalletNameEmpty","isBoxNameEmpty","_fieldValue$displayNa","tooltipValue","formatProductDisplayName","formatLocalizedDate","COMMON","fixedWidth","SendMovementPage","documents","onDrop","toggleDropdown","fetchStockMovementData","newFiles","difference","saveValues","saveShipment","names","_$split2","en","fr","locale","tableItemsData","productName","uniqBy","stockMovementData","associations","doc","stepNumber","destinationType","splitTranslation","fetchShipmentTypes","fetchStockMovementItems","idx","sendFiles","removeFiles","prepareRequestAndSubmitStockMovement","sendFile","removeFile","currentLocationId","stateTransitionToSent","isOrigin","isDestination","rollback","reload","isDropdownVisible","_ref18","Dropzone","multiple","_ref19","getRootProps","getInputProps","href","document","DocumentButton","link","uri","buttonTitle","onSave","sendFilesAndSave","shipped","isUserAdmin","rollbackStockMovement","hasBinLocationSupport","_ref20","_ref21","activeLanguage","formatDate","StockMovements","currentPage","updateWizardValues","fetchTranslations","fetchInitialValues","text","delimeter","_this$state","originType","_this$state2","Wizard","pageList","stepList","wizardTitle","additionalTitle","additionalWizardTitle","prevPage","shipmentStatus","BaseField","renderInput","getInvoiceDescription","rowValue","_rowValue$displayName","_rowValue$displayName2","orderAdjustment","isAdjustment","delay","duration","hideDelay","formatProductSupplierSubtext","productSupplier","_rowValue$displayName3","getReceivingPayloadContainers","containers","container","shipmentItems","matchesProductCodeOrName","_productCode$toLowerC","_name$toLowerCase","_displayNames$default","filterValue","toLowerCase","includes","showOutboundEditValidationErrors","errorMessage","errorDetails","reduce","acc","notification","NotificationType","ERROR_OUTLINED","detailsArray","omitEmptyValues","Date","mapStringToLimitedList","elementsSeparator","lengthLimit","join","split","buttonIcon","rel","newWindow","open","handleClick","_props$fieldConfig","ButtonLabel","_props$fieldConfig$at","dynamicAttr","attr","arrow"],"sourceRoot":""}