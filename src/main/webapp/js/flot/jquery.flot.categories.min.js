/* Javascript plotting library for jQuery, version 0.8.3.

Copyright (c) 2007-2014 IOLA and Ole Laursen.
Licensed under the MIT license.

*/
(function ($) {
  const options = { xaxis: { categories: null }, yaxis: { categories: null } }; function processRawData(plot, series, data, datapoints) {
    const xCategories = series.xaxis.options.mode == 'categories'; const yCategories = series.yaxis.options.mode == 'categories'; if (!(xCategories || yCategories)) return; let { format } = datapoints; if (!format) {
      const s = series; format = []; format.push({ x: true, number: true, required: true }); format.push({ y: true, number: true, required: true }); if (s.bars.show || s.lines.show && s.lines.fill) {
        const autoscale = !!(s.bars.show && s.bars.zero || s.lines.show && s.lines.zero); format.push({
          y: true, number: true, required: false, defaultValue: 0, autoscale,
        }); if (s.bars.horizontal) { delete format[format.length - 1].y; format[format.length - 1].x = true; }
      }datapoints.format = format;
    } for (let m = 0; m < format.length; ++m) { if (format[m].x && xCategories)format[m].number = false; if (format[m].y && yCategories)format[m].number = false; }
  } function getNextIndex(categories) { let index = -1; for (const v in categories) if (categories[v] > index)index = categories[v]; return index + 1; } function categoriesTickGenerator(axis) { const res = []; for (const label in axis.categories) { const v = axis.categories[label]; if (v >= axis.min && v <= axis.max)res.push([v, label]); }res.sort((a, b) => a[0] - b[0]); return res; } function setupCategoriesForAxis(series, axis, datapoints) { if (series[axis].options.mode != 'categories') return; if (!series[axis].categories) { const c = {}; const o = series[axis].options.categories || {}; if ($.isArray(o)) { for (let i = 0; i < o.length; ++i)c[o[i]] = i; } else { for (const v in o)c[v] = o[v]; }series[axis].categories = c; } if (!series[axis].options.ticks)series[axis].options.ticks = categoriesTickGenerator; transformPointsOnAxis(datapoints, axis, series[axis].categories); } function transformPointsOnAxis(datapoints, axis, categories) {
    const { points } = datapoints; const ps = datapoints.pointsize; const { format } = datapoints; const formatColumn = axis.charAt(0); let
      index = getNextIndex(categories); for (let i = 0; i < points.length; i += ps) { if (points[i] == null) continue; for (let m = 0; m < ps; ++m) { const val = points[i + m]; if (val == null || !format[m][formatColumn]) continue; if (!(val in categories)) { categories[val] = index; ++index; }points[i + m] = categories[val]; } }
  } function processDatapoints(plot, series, datapoints) { setupCategoriesForAxis(series, 'xaxis', datapoints); setupCategoriesForAxis(series, 'yaxis', datapoints); } function init(plot) { plot.hooks.processRawData.push(processRawData); plot.hooks.processDatapoints.push(processDatapoints); }$.plot.plugins.push({
    init, options, name: 'categories', version: '1.0',
  });
}(jQuery));
