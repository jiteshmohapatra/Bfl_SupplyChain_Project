/*!
 * jQuery JavaScript Library v1.6.2
 * http://jquery.com/
 *
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 * Copyright 2011, The Dojo Foundation
 * Released under the MIT, BSD, and GPL Licenses.
 *
 * Date: Thu Jun 30 14:16:56 2011 -0400
 */
(function (a9, K) {
  const aq = a9.document; const br = a9.navigator; const bi = a9.location; const b = (function () {
    var bC = function (bX, bY) { return new bC.fn.init(bX, bY, bA); }; const bS = a9.jQuery; const bE = a9.$; let bA; const bW = /^(?:[^<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/; const bK = /\S/; let bG = /^\s+/; let bB = /\s+$/; const bF = /\d/; const bx = /^<(\w+)\s*\/?>(?:<\/\1>)?$/; const bL = /^[\],:{}\s]*$/; const bU = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g; const bN = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g; const bH = /(?:^|:|,)(?:\s*\[)+/g; const bv = /(webkit)[ \/]([\w.]+)/; const bP = /(opera)(?:.*version)?[ \/]([\w.]+)/; const bO = /(msie) ([\w.]+)/; const bQ = /(mozilla)(?:.*? rv:([\w.]+))?/; const by = /-([a-z])/ig; const bR = function (bX, bY) { return bY.toUpperCase(); }; const bV = br.userAgent; let bT; let bz; let e; const bJ = Object.prototype.toString; const bD = Object.prototype.hasOwnProperty; const bw = Array.prototype.push; const bI = Array.prototype.slice; const bM = String.prototype.trim; const bs = Array.prototype.indexOf; const bu = {}; bC.fn = bC.prototype = {
      constructor: bC, init(bX, b1, b0) { let bZ; let b2; let bY; let b3; if (!bX) { return this; } if (bX.nodeType) { this.context = this[0] = bX; this.length = 1; return this; } if (bX === 'body' && !b1 && aq.body) { this.context = aq; this[0] = aq.body; this.selector = bX; this.length = 1; return this; } if (typeof bX === 'string') { if (bX.charAt(0) === '<' && bX.charAt(bX.length - 1) === '>' && bX.length >= 3) { bZ = [null, bX, null]; } else { bZ = bW.exec(bX); } if (bZ && (bZ[1] || !b1)) { if (bZ[1]) { b1 = b1 instanceof bC ? b1[0] : b1; b3 = (b1 ? b1.ownerDocument || b1 : aq); bY = bx.exec(bX); if (bY) { if (bC.isPlainObject(b1)) { bX = [aq.createElement(bY[1])]; bC.fn.attr.call(bX, b1, true); } else { bX = [b3.createElement(bY[1])]; } } else { bY = bC.buildFragment([bZ[1]], [b3]); bX = (bY.cacheable ? bC.clone(bY.fragment) : bY.fragment).childNodes; } return bC.merge(this, bX); } b2 = aq.getElementById(bZ[2]); if (b2 && b2.parentNode) { if (b2.id !== bZ[2]) { return b0.find(bX); } this.length = 1; this[0] = b2; } this.context = aq; this.selector = bX; return this; } if (!b1 || b1.jquery) { return (b1 || b0).find(bX); } return this.constructor(b1).find(bX); } if (bC.isFunction(bX)) { return b0.ready(bX); } if (bX.selector !== K) { this.selector = bX.selector; this.context = bX.context; } return bC.makeArray(bX, this); }, selector: '', jquery: '1.6.2', length: 0, size() { return this.length; }, toArray() { return bI.call(this, 0); }, get(bX) { return bX == null ? this.toArray() : (bX < 0 ? this[this.length + bX] : this[bX]); }, pushStack(bY, b0, bX) { const bZ = this.constructor(); if (bC.isArray(bY)) { bw.apply(bZ, bY); } else { bC.merge(bZ, bY); }bZ.prevObject = this; bZ.context = this.context; if (b0 === 'find') { bZ.selector = this.selector + (this.selector ? ' ' : '') + bX; } else if (b0) { bZ.selector = `${this.selector}.${b0}(${bX})`; } return bZ; }, each(bY, bX) { return bC.each(this, bY, bX); }, ready(bX) { bC.bindReady(); bz.done(bX); return this; }, eq(bX) { return bX === -1 ? this.slice(bX) : this.slice(bX, +bX + 1); }, first() { return this.eq(0); }, last() { return this.eq(-1); }, slice() { return this.pushStack(bI.apply(this, arguments), 'slice', bI.call(arguments).join(',')); }, map(bX) { return this.pushStack(bC.map(this, (bZ, bY) => bX.call(bZ, bY, bZ))); }, end() { return this.prevObject || this.constructor(null); }, push: bw, sort: [].sort, splice: [].splice,
    }; bC.fn.init.prototype = bC.fn; bC.extend = bC.fn.extend = function () { let b6; let bZ; let bX; let bY; let b3; let b4; let b2 = arguments[0] || {}; let b1 = 1; const b0 = arguments.length; let b5 = false; if (typeof b2 === 'boolean') { b5 = b2; b2 = arguments[1] || {}; b1 = 2; } if (typeof b2 !== 'object' && !bC.isFunction(b2)) { b2 = {}; } if (b0 === b1) { b2 = this; --b1; } for (;b1 < b0; b1++) { if ((b6 = arguments[b1]) != null) { for (bZ in b6) { bX = b2[bZ]; bY = b6[bZ]; if (b2 === bY) { continue; } if (b5 && bY && (bC.isPlainObject(bY) || (b3 = bC.isArray(bY)))) { if (b3) { b3 = false; b4 = bX && bC.isArray(bX) ? bX : []; } else { b4 = bX && bC.isPlainObject(bX) ? bX : {}; }b2[bZ] = bC.extend(b5, b4, bY); } else if (bY !== K) { b2[bZ] = bY; } } } } return b2; }; bC.extend({
      noConflict(bX) {
        if (a9.$ === bC) {
          a9.$ = bE;
        } if (bX && a9.jQuery === bC) { a9.jQuery = bS; } return bC;
      },
      isReady: false,
      readyWait: 1,
      holdReady(bX) { if (bX) { bC.readyWait++; } else { bC.ready(true); } },
      ready(bX) { if ((bX === true && !--bC.readyWait) || (bX !== true && !bC.isReady)) { if (!aq.body) { return setTimeout(bC.ready, 1); }bC.isReady = true; if (bX !== true && --bC.readyWait > 0) { return; }bz.resolveWith(aq, [bC]); if (bC.fn.trigger) { bC(aq).trigger('ready').unbind('ready'); } } },
      bindReady() { if (bz) { return; }bz = bC._Deferred(); if (aq.readyState === 'complete') { return setTimeout(bC.ready, 1); } if (aq.addEventListener) { aq.addEventListener('DOMContentLoaded', e, false); a9.addEventListener('load', bC.ready, false); } else if (aq.attachEvent) { aq.attachEvent('onreadystatechange', e); a9.attachEvent('onload', bC.ready); let bX = false; try { bX = a9.frameElement == null; } catch (bY) {} if (aq.documentElement.doScroll && bX) { bt(); } } },
      isFunction(bX) { return bC.type(bX) === 'function'; },
      isArray: Array.isArray || function (bX) { return bC.type(bX) === 'array'; },
      isWindow(bX) { return bX && typeof bX === 'object' && 'setInterval' in bX; },
      isNaN(bX) { return bX == null || !bF.test(bX) || isNaN(bX); },
      type(bX) { return bX == null ? String(bX) : bu[bJ.call(bX)] || 'object'; },
      isPlainObject(bY) { if (!bY || bC.type(bY) !== 'object' || bY.nodeType || bC.isWindow(bY)) { return false; } if (bY.constructor && !bD.call(bY, 'constructor') && !bD.call(bY.constructor.prototype, 'isPrototypeOf')) { return false; } let bX; for (bX in bY) {} return bX === K || bD.call(bY, bX); },
      isEmptyObject(bY) { for (const bX in bY) { return false; } return true; },
      error(bX) { throw bX; },
      parseJSON(bX) { if (typeof bX !== 'string' || !bX) { return null; }bX = bC.trim(bX); if (a9.JSON && a9.JSON.parse) { return a9.JSON.parse(bX); } if (bL.test(bX.replace(bU, '@').replace(bN, ']').replace(bH, ''))) { return (new Function(`return ${bX}`))(); }bC.error(`Invalid JSON: ${bX}`); },
      parseXML(bZ, bX, bY) { if (a9.DOMParser) { bY = new DOMParser(); bX = bY.parseFromString(bZ, 'text/xml'); } else { bX = new ActiveXObject('Microsoft.XMLDOM'); bX.async = 'false'; bX.loadXML(bZ); }bY = bX.documentElement; if (!bY || !bY.nodeName || bY.nodeName === 'parsererror') { bC.error(`Invalid XML: ${bZ}`); } return bX; },
      noop() {},
      globalEval(bX) { if (bX && bK.test(bX)) { (a9.execScript || function (bY) { a9.eval.call(a9, bY); })(bX); } },
      camelCase(bX) { return bX.replace(by, bR); },
      nodeName(bY, bX) { return bY.nodeName && bY.nodeName.toUpperCase() === bX.toUpperCase(); },
      each(b0, b3, bZ) { let bY; let b1 = 0; const b2 = b0.length; const bX = b2 === K || bC.isFunction(b0); if (bZ) { if (bX) { for (bY in b0) { if (b3.apply(b0[bY], bZ) === false) { break; } } } else { for (;b1 < b2;) { if (b3.apply(b0[b1++], bZ) === false) { break; } } } } else if (bX) { for (bY in b0) { if (b3.call(b0[bY], bY, b0[bY]) === false) { break; } } } else { for (;b1 < b2;) { if (b3.call(b0[b1], b1, b0[b1++]) === false) { break; } } } return b0; },
      trim: bM ? function (bX) { return bX == null ? '' : bM.call(bX); } : function (bX) { return bX == null ? '' : bX.toString().replace(bG, '').replace(bB, ''); },
      makeArray(b0, bY) { const bX = bY || []; if (b0 != null) { const bZ = bC.type(b0); if (b0.length == null || bZ === 'string' || bZ === 'function' || bZ === 'regexp' || bC.isWindow(b0)) { bw.call(bX, b0); } else { bC.merge(bX, b0); } } return bX; },
      inArray(bZ, b0) { if (bs) { return bs.call(b0, bZ); } for (let bX = 0, bY = b0.length; bX < bY; bX++) { if (b0[bX] === bZ) { return bX; } } return -1; },
      merge(b1, bZ) { let b0 = b1.length; let bY = 0; if (typeof bZ.length === 'number') { for (let bX = bZ.length; bY < bX; bY++) { b1[b0++] = bZ[bY]; } } else { while (bZ[bY] !== K) { b1[b0++] = bZ[bY++]; } }b1.length = b0; return b1; },
      grep(bY, b3, bX) { const bZ = []; let b2; bX = !!bX; for (let b0 = 0, b1 = bY.length; b0 < b1; b0++) { b2 = !!b3(bY[b0], b0); if (bX !== b2) { bZ.push(bY[b0]); } } return bZ; },
      map(bX, b4, b5) { let b2; let b3; const b1 = []; let bZ = 0; const bY = bX.length; const b0 = bX instanceof bC || bY !== K && typeof bY === 'number' && ((bY > 0 && bX[0] && bX[bY - 1]) || bY === 0 || bC.isArray(bX)); if (b0) { for (;bZ < bY; bZ++) { b2 = b4(bX[bZ], bZ, b5); if (b2 != null) { b1[b1.length] = b2; } } } else { for (b3 in bX) { b2 = b4(bX[b3], b3, b5); if (b2 != null) { b1[b1.length] = b2; } } } return b1.concat.apply([], b1); },
      guid: 1,
      proxy(b1, b0) {
        if (typeof b0 === 'string') { const bZ = b1[b0]; b0 = b1; b1 = bZ; } if (!bC.isFunction(b1)) { return K; } const bX = bI.call(arguments, 2); const bY = function () {
          return b1.apply(b0, bX.concat(bI.call(arguments)));
        }; bY.guid = b1.guid = b1.guid || bY.guid || bC.guid++; return bY;
      },
      access(bX, b5, b3, bZ, b2, b4) { const bY = bX.length; if (typeof b5 === 'object') { for (const b0 in b5) { bC.access(bX, b0, b5[b0], bZ, b2, b3); } return bX; } if (b3 !== K) { bZ = !b4 && bZ && bC.isFunction(b3); for (let b1 = 0; b1 < bY; b1++) { b2(bX[b1], b5, bZ ? b3.call(bX[b1], b1, b2(bX[b1], b5)) : b3, b4); } return bX; } return bY ? b2(bX[0], b5) : K; },
      now() { return (new Date()).getTime(); },
      uaMatch(bY) { bY = bY.toLowerCase(); const bX = bv.exec(bY) || bP.exec(bY) || bO.exec(bY) || bY.indexOf('compatible') < 0 && bQ.exec(bY) || []; return { browser: bX[1] || '', version: bX[2] || '0' }; },
      sub() { function bX(b0, b1) { return new bX.fn.init(b0, b1); }bC.extend(true, bX, this); bX.superclass = this; bX.fn = bX.prototype = this(); bX.fn.constructor = bX; bX.sub = this.sub; bX.fn.init = function bZ(b0, b1) { if (b1 && b1 instanceof bC && !(b1 instanceof bX)) { b1 = bX(b1); } return bC.fn.init.call(this, b0, b1, bY); }; bX.fn.init.prototype = bX.fn; var bY = bX(aq); return bX; },
      browser: {},
    }); bC.each('Boolean Number String Function Array Date RegExp Object'.split(' '), (bY, bX) => { bu[`[object ${bX}]`] = bX.toLowerCase(); }); bT = bC.uaMatch(bV); if (bT.browser) { bC.browser[bT.browser] = true; bC.browser.version = bT.version; } if (bC.browser.webkit) { bC.browser.safari = true; } if (bK.test('\xA0')) { bG = /^[\s\xA0]+/; bB = /[\s\xA0]+$/; }bA = bC(aq); if (aq.addEventListener) { e = function () { aq.removeEventListener('DOMContentLoaded', e, false); bC.ready(); }; } else if (aq.attachEvent) { e = function () { if (aq.readyState === 'complete') { aq.detachEvent('onreadystatechange', e); bC.ready(); } }; } function bt() { if (bC.isReady) { return; } try { aq.documentElement.doScroll('left'); } catch (bX) { setTimeout(bt, 1); return; }bC.ready(); } return bC;
  }()); const a = 'done fail isResolved isRejected promise then always pipe'.split(' '); const aF = [].slice; b.extend({
    _Deferred() {
      let bu = []; let bv; let bs; let bt; var e = {
        done() { if (!bt) { const bx = arguments; let by; let bB; let bA; let bz; let bw; if (bv) { bw = bv; bv = 0; } for (by = 0, bB = bx.length; by < bB; by++) { bA = bx[by]; bz = b.type(bA); if (bz === 'array') { e.done.apply(e, bA); } else if (bz === 'function') { bu.push(bA); } } if (bw) { e.resolveWith(bw[0], bw[1]); } } return this; }, resolveWith(bx, bw) { if (!bt && !bv && !bs) { bw = bw || []; bs = 1; try { while (bu[0]) { bu.shift().apply(bx, bw); } } finally { bv = [bx, bw]; bs = 0; } } return this; }, resolve() { e.resolveWith(this, arguments); return this; }, isResolved() { return !!(bs || bv); }, cancel() { bt = 1; bu = []; return this; },
      }; return e;
    },
    Deferred(bs) {
      const e = b._Deferred(); const bu = b._Deferred(); let bt; b.extend(e, {
        then(bw, bv) { e.done(bw).fail(bv); return this; }, always() { return e.done.apply(e, arguments).fail.apply(this, arguments); }, fail: bu.done, rejectWith: bu.resolveWith, reject: bu.resolve, isRejected: bu.isResolved, pipe(bw, bv) { return b.Deferred((bx) => { b.each({ done: [bw, 'resolve'], fail: [bv, 'reject'] }, (bz, bC) => { const by = bC[0]; const bB = bC[1]; let bA; if (b.isFunction(by)) { e[bz](function () { bA = by.apply(this, arguments); if (bA && b.isFunction(bA.promise)) { bA.promise().then(bx.resolve, bx.reject); } else { bx[bB](bA); } }); } else { e[bz](bx[bB]); } }); }).promise(); }, promise(bw) { if (bw == null) { if (bt) { return bt; }bt = bw = {}; } let bv = a.length; while (bv--) { bw[a[bv]] = e[a[bv]]; } return bw; },
      }); e.done(bu.cancel).fail(e.cancel); delete e.cancel; if (bs) { bs.call(e, e); } return e;
    },
    when(bx) { const bs = arguments; let bt = 0; const bw = bs.length; let bv = bw; const e = bw <= 1 && bx && b.isFunction(bx.promise) ? bx : b.Deferred(); function bu(by) { return function (bz) { bs[by] = arguments.length > 1 ? aF.call(arguments, 0) : bz; if (!(--bv)) { e.resolveWith(e, aF.call(bs, 0)); } }; } if (bw > 1) { for (;bt < bw; bt++) { if (bs[bt] && b.isFunction(bs[bt].promise)) { bs[bt].promise().then(bu(bt), e.reject); } else { --bv; } } if (!bv) { e.resolveWith(e, bs); } } else if (e !== bx) { e.resolveWith(e, bw ? [bx] : []); } return e.promise(); },
  }); b.support = (function () {
    let bC = aq.createElement('div'); const bJ = aq.documentElement; let bv; let bK; let bD; let bt; let bB; let bw; let bz; let bs; let bA; let bE; let by; let bI; let bG; let bu; let bx; let bF; let bL; bC.setAttribute('className', 't'); bC.innerHTML = "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>"; bv = bC.getElementsByTagName('*'); bK = bC.getElementsByTagName('a')[0]; if (!bv || !bv.length || !bK) { return {}; }bD = aq.createElement('select');
    bt = bD.appendChild(aq.createElement('option')); bB = bC.getElementsByTagName('input')[0]; bz = {
      leadingWhitespace: (bC.firstChild.nodeType === 3), tbody: !bC.getElementsByTagName('tbody').length, htmlSerialize: !!bC.getElementsByTagName('link').length, style: /top/.test(bK.getAttribute('style')), hrefNormalized: (bK.getAttribute('href') === '/a'), opacity: /^0.55$/.test(bK.style.opacity), cssFloat: !!bK.style.cssFloat, checkOn: (bB.value === 'on'), optSelected: bt.selected, getSetAttribute: bC.className !== 't', submitBubbles: true, changeBubbles: true, focusinBubbles: false, deleteExpando: true, noCloneEvent: true, inlineBlockNeedsLayout: false, shrinkWrapBlocks: false, reliableMarginRight: true,
    }; bB.checked = true; bz.noCloneChecked = bB.cloneNode(true).checked; bD.disabled = true; bz.optDisabled = !bt.disabled; try { delete bC.test; } catch (bH) { bz.deleteExpando = false; } if (!bC.addEventListener && bC.attachEvent && bC.fireEvent) { bC.attachEvent('onclick', () => { bz.noCloneEvent = false; }); bC.cloneNode(true).fireEvent('onclick'); }bB = aq.createElement('input'); bB.value = 't'; bB.setAttribute('type', 'radio'); bz.radioValue = bB.value === 't'; bB.setAttribute('checked', 'checked'); bC.appendChild(bB); bs = aq.createDocumentFragment(); bs.appendChild(bC.firstChild); bz.checkClone = bs.cloneNode(true).cloneNode(true).lastChild.checked; bC.innerHTML = ''; bC.style.width = bC.style.paddingLeft = '1px'; bA = aq.getElementsByTagName('body')[0]; by = aq.createElement(bA ? 'div' : 'body'); bI = {
      visibility: 'hidden', width: 0, height: 0, border: 0, margin: 0,
    }; if (bA) { b.extend(bI, { position: 'absolute', left: -1000, top: -1000 }); } for (bF in bI) { by.style[bF] = bI[bF]; }by.appendChild(bC); bE = bA || bJ; bE.insertBefore(by, bE.firstChild); bz.appendChecked = bB.checked; bz.boxModel = bC.offsetWidth === 2; if ('zoom' in bC.style) { bC.style.display = 'inline'; bC.style.zoom = 1; bz.inlineBlockNeedsLayout = (bC.offsetWidth === 2); bC.style.display = ''; bC.innerHTML = "<div style='width:4px;'></div>"; bz.shrinkWrapBlocks = (bC.offsetWidth !== 2); }bC.innerHTML = "<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>"; bG = bC.getElementsByTagName('td'); bL = (bG[0].offsetHeight === 0); bG[0].style.display = ''; bG[1].style.display = 'none'; bz.reliableHiddenOffsets = bL && (bG[0].offsetHeight === 0); bC.innerHTML = ''; if (aq.defaultView && aq.defaultView.getComputedStyle) { bw = aq.createElement('div'); bw.style.width = '0'; bw.style.marginRight = '0'; bC.appendChild(bw); bz.reliableMarginRight = (parseInt((aq.defaultView.getComputedStyle(bw, null) || { marginRight: 0 }).marginRight, 10) || 0) === 0; }by.innerHTML = ''; bE.removeChild(by); if (bC.attachEvent) { for (bF in { submit: 1, change: 1, focusin: 1 }) { bx = `on${bF}`; bL = (bx in bC); if (!bL) { bC.setAttribute(bx, 'return;'); bL = (typeof bC[bx] === 'function'); }bz[`${bF}Bubbles`] = bL; } }by = bs = bD = bt = bA = bw = bC = bB = null; return bz;
  }()); b.boxModel = b.support.boxModel; const aM = /^(?:\{.*\}|\[.*\])$/; const aw = /([a-z])([A-Z])/g; b.extend({
    cache: {},
    uuid: 0,
    expando: `jQuery${(b.fn.jquery + Math.random()).replace(/\D/g, '')}`,
    noData: { embed: true, object: 'clsid:D27CDB6E-AE6D-11cf-96B8-444553540000', applet: true },
    hasData(e) { e = e.nodeType ? b.cache[e[b.expando]] : e[b.expando]; return !!e && !T(e); },
    data(bu, bs, bw, bv) { if (!b.acceptData(bu)) { return; } const bz = b.expando; const by = typeof bs === 'string'; let bx; const bA = bu.nodeType; const e = bA ? b.cache : bu; let bt = bA ? bu[b.expando] : bu[b.expando] && b.expando; if ((!bt || (bv && bt && !e[bt][bz])) && by && bw === K) { return; } if (!bt) { if (bA) { bu[b.expando] = bt = ++b.uuid; } else { bt = b.expando; } } if (!e[bt]) { e[bt] = {}; if (!bA) { e[bt].toJSON = b.noop; } } if (typeof bs === 'object' || typeof bs === 'function') { if (bv) { e[bt][bz] = b.extend(e[bt][bz], bs); } else { e[bt] = b.extend(e[bt], bs); } }bx = e[bt]; if (bv) { if (!bx[bz]) { bx[bz] = {}; }bx = bx[bz]; } if (bw !== K) { bx[b.camelCase(bs)] = bw; } if (bs === 'events' && !bx[bs]) { return bx[bz] && bx[bz].events; } return by ? bx[b.camelCase(bs)] || bx[bs] : bx; },
    removeData(bv, bt, bw) {
      if (!b.acceptData(bv)) { return; } const by = b.expando; const bz = bv.nodeType; const bs = bz ? b.cache : bv; const bu = bz ? bv[b.expando] : b.expando; if (!bs[bu]) { return; } if (bt) { const bx = bw ? bs[bu][by] : bs[bu]; if (bx) { delete bx[bt]; if (!T(bx)) { return; } } } if (bw) { delete bs[bu][by]; if (!T(bs[bu])) { return; } } const e = bs[bu][by]; if (b.support.deleteExpando || bs != a9) {
        delete bs[bu];
      } else { bs[bu] = null; } if (e) { bs[bu] = {}; if (!bz) { bs[bu].toJSON = b.noop; }bs[bu][by] = e; } else if (bz) { if (b.support.deleteExpando) { delete bv[b.expando]; } else if (bv.removeAttribute) { bv.removeAttribute(b.expando); } else { bv[b.expando] = null; } }
    },
    _data(bs, e, bt) { return b.data(bs, e, bt, true); },
    acceptData(bs) { if (bs.nodeName) { const e = b.noData[bs.nodeName.toLowerCase()]; if (e) { return !(e === true || bs.getAttribute('classid') !== e); } } return true; },
  }); b.fn.extend({ data(bv, bx) { let bw = null; if (typeof bv === 'undefined') { if (this.length) { bw = b.data(this[0]); if (this[0].nodeType === 1) { const e = this[0].attributes; let bt; for (let bu = 0, bs = e.length; bu < bs; bu++) { bt = e[bu].name; if (bt.indexOf('data-') === 0) { bt = b.camelCase(bt.substring(5)); a2(this[0], bt, bw[bt]); } } } } return bw; } if (typeof bv === 'object') { return this.each(function () { b.data(this, bv); }); } const by = bv.split('.'); by[1] = by[1] ? `.${by[1]}` : ''; if (bx === K) { bw = this.triggerHandler(`getData${by[1]}!`, [by[0]]); if (bw === K && this.length) { bw = b.data(this[0], bv); bw = a2(this[0], bv, bw); } return bw === K && by[1] ? this.data(by[0]) : bw; } return this.each(function () { const bA = b(this); const bz = [by[0], bx]; bA.triggerHandler(`setData${by[1]}!`, bz); b.data(this, bv, bx); bA.triggerHandler(`changeData${by[1]}!`, bz); }); }, removeData(e) { return this.each(function () { b.removeData(this, e); }); } }); function a2(bu, bt, bv) { if (bv === K && bu.nodeType === 1) { const bs = `data-${bt.replace(aw, '$1-$2').toLowerCase()}`; bv = bu.getAttribute(bs); if (typeof bv === 'string') { try { bv = bv === 'true' ? true : bv === 'false' ? false : bv === 'null' ? null : !b.isNaN(bv) ? parseFloat(bv) : aM.test(bv) ? b.parseJSON(bv) : bv; } catch (bw) {}b.data(bu, bt, bv); } else { bv = K; } } return bv; } function T(bs) { for (const e in bs) { if (e !== 'toJSON') { return false; } } return true; } function be(bv, bu, bx) { const bt = `${bu}defer`; const bs = `${bu}queue`; const e = `${bu}mark`; const bw = b.data(bv, bt, K, true); if (bw && (bx === 'queue' || !b.data(bv, bs, K, true)) && (bx === 'mark' || !b.data(bv, e, K, true))) { setTimeout(() => { if (!b.data(bv, bs, K, true) && !b.data(bv, e, K, true)) { b.removeData(bv, bt, true); bw.resolve(); } }, 0); } }b.extend({
    _mark(bs, e) { if (bs) { e = `${e || 'fx'}mark`; b.data(bs, e, (b.data(bs, e, K, true) || 0) + 1, true); } }, _unmark(bv, bu, bs) { if (bv !== true) { bs = bu; bu = bv; bv = false; } if (bu) { bs = bs || 'fx'; const e = `${bs}mark`; const bt = bv ? 0 : ((b.data(bu, e, K, true) || 1) - 1); if (bt) { b.data(bu, e, bt, true); } else { b.removeData(bu, e, true); be(bu, bs, 'mark'); } } }, queue(bs, e, bu) { if (bs) { e = `${e || 'fx'}queue`; let bt = b.data(bs, e, K, true); if (bu) { if (!bt || b.isArray(bu)) { bt = b.data(bs, e, b.makeArray(bu), true); } else { bt.push(bu); } } return bt || []; } }, dequeue(bu, bt) { bt = bt || 'fx'; const e = b.queue(bu, bt); let bs = e.shift(); let bv; if (bs === 'inprogress') { bs = e.shift(); } if (bs) { if (bt === 'fx') { e.unshift('inprogress'); }bs.call(bu, () => { b.dequeue(bu, bt); }); } if (!e.length) { b.removeData(bu, `${bt}queue`, true); be(bu, bt, 'queue'); } },
  }); b.fn.extend({
    queue(e, bs) { if (typeof e !== 'string') { bs = e; e = 'fx'; } if (bs === K) { return b.queue(this[0], e); } return this.each(function () { const bt = b.queue(this, e, bs); if (e === 'fx' && bt[0] !== 'inprogress') { b.dequeue(this, e); } }); }, dequeue(e) { return this.each(function () { b.dequeue(this, e); }); }, delay(bs, e) { bs = b.fx ? b.fx.speeds[bs] || bs : bs; e = e || 'fx'; return this.queue(e, function () { const bt = this; setTimeout(() => { b.dequeue(bt, e); }, bs); }); }, clearQueue(e) { return this.queue(e || 'fx', []); }, promise(bA, bt) { if (typeof bA !== 'string') { bt = bA; bA = K; }bA = bA || 'fx'; const e = b.Deferred(); const bs = this; let bv = bs.length; let by = 1; const bw = `${bA}defer`; const bx = `${bA}queue`; const bz = `${bA}mark`; let bu; function bB() { if (!(--by)) { e.resolveWith(bs, [bs]); } } while (bv--) { if ((bu = b.data(bs[bv], bw, K, true) || (b.data(bs[bv], bx, K, true) || b.data(bs[bv], bz, K, true)) && b.data(bs[bv], bw, b._Deferred(), true))) { by++; bu.done(bB); } }bB(); return e.promise(); },
  }); const aK = /[\n\t\r]/g; const ac = /\s+/; const aO = /\r/g; const g = /^(?:button|input)$/i; const D = /^(?:button|input|object|select|textarea)$/i; const l = /^a(?:rea)?$/i; const ak = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i; const a5 = /\:|^on/; let a0; let aU; b.fn.extend({
    attr(e, bs) { return b.access(this, e, bs, true, b.attr); },
    removeAttr(e) {
      return this.each(function () {
        b.removeAttr(this, e);
      });
    },
    prop(e, bs) { return b.access(this, e, bs, true, b.prop); },
    removeProp(e) { e = b.propFix[e] || e; return this.each(function () { try { this[e] = K; delete this[e]; } catch (bs) {} }); },
    addClass(bv) { let bx; let bt; let bs; let bu; let bw; let by; let e; if (b.isFunction(bv)) { return this.each(function (bz) { b(this).addClass(bv.call(this, bz, this.className)); }); } if (bv && typeof bv === 'string') { bx = bv.split(ac); for (bt = 0, bs = this.length; bt < bs; bt++) { bu = this[bt]; if (bu.nodeType === 1) { if (!bu.className && bx.length === 1) { bu.className = bv; } else { bw = ` ${bu.className} `; for (by = 0, e = bx.length; by < e; by++) { if (!~bw.indexOf(` ${bx[by]} `)) { bw += `${bx[by]} `; } }bu.className = b.trim(bw); } } } } return this; },
    removeClass(bw) { let bx; let bt; let bs; let bv; let bu; let by; let e; if (b.isFunction(bw)) { return this.each(function (bz) { b(this).removeClass(bw.call(this, bz, this.className)); }); } if ((bw && typeof bw === 'string') || bw === K) { bx = (bw || '').split(ac); for (bt = 0, bs = this.length; bt < bs; bt++) { bv = this[bt]; if (bv.nodeType === 1 && bv.className) { if (bw) { bu = (` ${bv.className} `).replace(aK, ' '); for (by = 0, e = bx.length; by < e; by++) { bu = bu.replace(` ${bx[by]} `, ' '); }bv.className = b.trim(bu); } else { bv.className = ''; } } } } return this; },
    toggleClass(bu, bs) { const bt = typeof bu; const e = typeof bs === 'boolean'; if (b.isFunction(bu)) { return this.each(function (bv) { b(this).toggleClass(bu.call(this, bv, this.className, bs), bs); }); } return this.each(function () { if (bt === 'string') { let bx; let bw = 0; const bv = b(this); let by = bs; const bz = bu.split(ac); while ((bx = bz[bw++])) { by = e ? by : !bv.hasClass(bx); bv[by ? 'addClass' : 'removeClass'](bx); } } else if (bt === 'undefined' || bt === 'boolean') { if (this.className) { b._data(this, '__className__', this.className); } this.className = this.className || bu === false ? '' : b._data(this, '__className__') || ''; } }); },
    hasClass(e) { const bu = ` ${e} `; for (let bt = 0, bs = this.length; bt < bs; bt++) { if ((` ${this[bt].className} `).replace(aK, ' ').indexOf(bu) > -1) { return true; } } return false; },
    val(bu) { let e; let bs; const bt = this[0]; if (!arguments.length) { if (bt) { e = b.valHooks[bt.nodeName.toLowerCase()] || b.valHooks[bt.type]; if (e && 'get' in e && (bs = e.get(bt, 'value')) !== K) { return bs; }bs = bt.value; return typeof bs === 'string' ? bs.replace(aO, '') : bs == null ? '' : bs; } return K; } const bv = b.isFunction(bu); return this.each(function (bx) { const bw = b(this); let by; if (this.nodeType !== 1) { return; } if (bv) { by = bu.call(this, bx, bw.val()); } else { by = bu; } if (by == null) { by = ''; } else if (typeof by === 'number') { by += ''; } else if (b.isArray(by)) { by = b.map(by, (bz) => (bz == null ? '' : `${bz}`)); }e = b.valHooks[this.nodeName.toLowerCase()] || b.valHooks[this.type]; if (!e || !('set' in e) || e.set(this, by, 'value') === K) { this.value = by; } }); },
  }); b.extend({
    valHooks: { option: { get(e) { const bs = e.attributes.value; return !bs || bs.specified ? e.value : e.text; } }, select: { get(e) { let bx; const bv = e.selectedIndex; const by = []; const bz = e.options; const bu = e.type === 'select-one'; if (bv < 0) { return null; } for (let bs = bu ? bv : 0, bw = bu ? bv + 1 : bz.length; bs < bw; bs++) { const bt = bz[bs]; if (bt.selected && (b.support.optDisabled ? !bt.disabled : bt.getAttribute('disabled') === null) && (!bt.parentNode.disabled || !b.nodeName(bt.parentNode, 'optgroup'))) { bx = b(bt).val(); if (bu) { return bx; }by.push(bx); } } if (bu && !by.length && bz.length) { return b(bz[bv]).val(); } return by; }, set(bs, bt) { const e = b.makeArray(bt); b(bs).find('option').each(function () { this.selected = b.inArray(b(this).val(), e) >= 0; }); if (!e.length) { bs.selectedIndex = -1; } return e; } } },
    attrFn: {
      val: true, css: true, html: true, text: true, data: true, width: true, height: true, offset: true,
    },
    attrFix: { tabindex: 'tabIndex' },
    attr(bx, bu, by, bw) { const bs = bx.nodeType; if (!bx || bs === 3 || bs === 8 || bs === 2) { return K; } if (bw && bu in b.attrFn) { return b(bx)[bu](by); } if (!('getAttribute' in bx)) { return b.prop(bx, bu, by); } let bt; let e; const bv = bs !== 1 || !b.isXMLDoc(bx); if (bv) { bu = b.attrFix[bu] || bu; e = b.attrHooks[bu]; if (!e) { if (ak.test(bu)) { e = aU; } else if (a0 && bu !== 'className' && (b.nodeName(bx, 'form') || a5.test(bu))) { e = a0; } } } if (by !== K) { if (by === null) { b.removeAttr(bx, bu); return K; } if (e && 'set' in e && bv && (bt = e.set(bx, by, bu)) !== K) { return bt; } bx.setAttribute(bu, `${by}`); return by; } if (e && 'get' in e && bv && (bt = e.get(bx, bu)) !== null) { return bt; } bt = bx.getAttribute(bu); return bt === null ? K : bt; },
    removeAttr(bs, e) {
      let bt;
      if (bs.nodeType === 1) { e = b.attrFix[e] || e; if (b.support.getSetAttribute) { bs.removeAttribute(e); } else { b.attr(bs, e, ''); bs.removeAttributeNode(bs.getAttributeNode(e)); } if (ak.test(e) && (bt = b.propFix[e] || e) in bs) { bs[bt] = false; } }
    },
    attrHooks: { type: { set(e, bs) { if (g.test(e.nodeName) && e.parentNode) { b.error("type property can't be changed"); } else if (!b.support.radioValue && bs === 'radio' && b.nodeName(e, 'input')) { const bt = e.value; e.setAttribute('type', bs); if (bt) { e.value = bt; } return bs; } } }, tabIndex: { get(bs) { const e = bs.getAttributeNode('tabIndex'); return e && e.specified ? parseInt(e.value, 10) : D.test(bs.nodeName) || l.test(bs.nodeName) && bs.href ? 0 : K; } }, value: { get(bs, e) { if (a0 && b.nodeName(bs, 'button')) { return a0.get(bs, e); } return e in bs ? bs.value : null; }, set(bs, bt, e) { if (a0 && b.nodeName(bs, 'button')) { return a0.set(bs, bt, e); }bs.value = bt; } } },
    propFix: {
      tabindex: 'tabIndex', readonly: 'readOnly', for: 'htmlFor', class: 'className', maxlength: 'maxLength', cellspacing: 'cellSpacing', cellpadding: 'cellPadding', rowspan: 'rowSpan', colspan: 'colSpan', usemap: 'useMap', frameborder: 'frameBorder', contenteditable: 'contentEditable',
    },
    prop(bw, bu, bx) { const bs = bw.nodeType; if (!bw || bs === 3 || bs === 8 || bs === 2) { return K; } let bt; let e; const bv = bs !== 1 || !b.isXMLDoc(bw); if (bv) { bu = b.propFix[bu] || bu; e = b.propHooks[bu]; } if (bx !== K) { if (e && 'set' in e && (bt = e.set(bw, bx, bu)) !== K) { return bt; } return (bw[bu] = bx); } if (e && 'get' in e && (bt = e.get(bw, bu)) !== K) { return bt; } return bw[bu]; },
    propHooks: {},
  }); aU = { get(bs, e) { return b.prop(bs, e) ? e.toLowerCase() : K; }, set(bs, bu, e) { let bt; if (bu === false) { b.removeAttr(bs, e); } else { bt = b.propFix[e] || e; if (bt in bs) { bs[bt] = true; }bs.setAttribute(e, e.toLowerCase()); } return e; } }; if (!b.support.getSetAttribute) { b.attrFix = b.propFix; a0 = b.attrHooks.name = b.attrHooks.title = b.valHooks.button = { get(bt, bs) { let e; e = bt.getAttributeNode(bs); return e && e.nodeValue !== '' ? e.nodeValue : K; }, set(bt, bu, bs) { const e = bt.getAttributeNode(bs); if (e) { e.nodeValue = bu; return bu; } } }; b.each(['width', 'height'], (bs, e) => { b.attrHooks[e] = b.extend(b.attrHooks[e], { set(bt, bu) { if (bu === '') { bt.setAttribute(e, 'auto'); return bu; } } }); }); } if (!b.support.hrefNormalized) { b.each(['href', 'src', 'width', 'height'], (bs, e) => { b.attrHooks[e] = b.extend(b.attrHooks[e], { get(bu) { const bt = bu.getAttribute(e, 2); return bt === null ? K : bt; } }); }); } if (!b.support.style) { b.attrHooks.style = { get(e) { return e.style.cssText.toLowerCase() || K; }, set(e, bs) { return (e.style.cssText = `${bs}`); } }; } if (!b.support.optSelected) { b.propHooks.selected = b.extend(b.propHooks.selected, { get(bs) { const e = bs.parentNode; if (e) { e.selectedIndex; if (e.parentNode) { e.parentNode.selectedIndex; } } } }); } if (!b.support.checkOn) { b.each(['radio', 'checkbox'], function () { b.valHooks[this] = { get(e) { return e.getAttribute('value') === null ? 'on' : e.value; } }; }); }b.each(['radio', 'checkbox'], function () { b.valHooks[this] = b.extend(b.valHooks[this], { set(e, bs) { if (b.isArray(bs)) { return (e.checked = b.inArray(b(e).val(), bs) >= 0); } } }); }); const aW = /\.(.*)$/; const bb = /^(?:textarea|input|select)$/i; const N = /\./g; const bf = / /g; const aC = /[^\w\s.|`]/g; const G = function (e) { return e.replace(aC, '\\$&'); }; b.event = {
    add(bu, by, bD, bw) {
      if (bu.nodeType === 3 || bu.nodeType === 8) { return; } if (bD === false) { bD = bh; } else if (!bD) { return; } let bs; let bC; if (bD.handler) { bs = bD; bD = bs.handler; } if (!bD.guid) { bD.guid = b.guid++; } const bz = b._data(bu); if (!bz) { return; } let bE = bz.events; let bx = bz.handle; if (!bE) { bz.events = bE = {}; } if (!bx) { bz.handle = bx = function (bF) { return typeof b !== 'undefined' && (!bF || b.event.triggered !== bF.type) ? b.event.handle.apply(bx.elem, arguments) : K; }; }bx.elem = bu; by = by.split(' '); let bB; let bv = 0; let e; while ((bB = by[bv++])) {
        bC = bs ? b.extend({}, bs) : { handler: bD, data: bw }; if (bB.indexOf('.') > -1) { e = bB.split('.'); bB = e.shift(); bC.namespace = e.slice(0).sort().join('.'); } else { e = []; bC.namespace = ''; }bC.type = bB; if (!bC.guid) { bC.guid = bD.guid; } let bt = bE[bB]; const bA = b.event.special[bB] || {}; if (!bt) {
          bt = bE[bB] = []; if (!bA.setup || bA.setup.call(bu, bw, e, bx) === false) {
            if (bu.addEventListener) { bu.addEventListener(bB, bx, false); } else if (bu.attachEvent) {
              bu.attachEvent(`on${bB}`, bx);
            }
          }
        } if (bA.add) { bA.add.call(bu, bC); if (!bC.handler.guid) { bC.handler.guid = bD.guid; } }bt.push(bC); b.event.global[bB] = true;
      }bu = null;
    },
    global: {},
    remove(bG, bB, bt, bx) { if (bG.nodeType === 3 || bG.nodeType === 8) { return; } if (bt === false) { bt = bh; } let bJ; let bw; let by; let bD; let bE = 0; let bu; let bz; let bC; let bv; let bA; let e; let bI; const bF = b.hasData(bG) && b._data(bG); const bs = bF && bF.events; if (!bF || !bs) { return; } if (bB && bB.type) { bt = bB.handler; bB = bB.type; } if (!bB || typeof bB === 'string' && bB.charAt(0) === '.') { bB = bB || ''; for (bw in bs) { b.event.remove(bG, bw + bB); } return; }bB = bB.split(' '); while ((bw = bB[bE++])) { bI = bw; e = null; bu = bw.indexOf('.') < 0; bz = []; if (!bu) { bz = bw.split('.'); bw = bz.shift(); bC = new RegExp(`(^|\\.)${b.map(bz.slice(0).sort(), G).join('\\.(?:.*\\.)?')}(\\.|$)`); }bA = bs[bw]; if (!bA) { continue; } if (!bt) { for (bD = 0; bD < bA.length; bD++) { e = bA[bD]; if (bu || bC.test(e.namespace)) { b.event.remove(bG, bI, e.handler, bD); bA.splice(bD--, 1); } } continue; }bv = b.event.special[bw] || {}; for (bD = bx || 0; bD < bA.length; bD++) { e = bA[bD]; if (bt.guid === e.guid) { if (bu || bC.test(e.namespace)) { if (bx == null) { bA.splice(bD--, 1); } if (bv.remove) { bv.remove.call(bG, e); } } if (bx != null) { break; } } } if (bA.length === 0 || bx != null && bA.length === 1) { if (!bv.teardown || bv.teardown.call(bG, bz) === false) { b.removeEvent(bG, bw, bF.handle); }bJ = null; delete bs[bw]; } } if (b.isEmptyObject(bs)) { const bH = bF.handle; if (bH) { bH.elem = null; } delete bF.events; delete bF.handle; if (b.isEmptyObject(bF)) { b.removeData(bG, K, true); } } },
    customEvent: { getData: true, setData: true, changeData: true },
    trigger(e, by, bw, bD) { let bB = e.type || e; let bt = []; let bs; if (bB.indexOf('!') >= 0) { bB = bB.slice(0, -1); bs = true; } if (bB.indexOf('.') >= 0) { bt = bB.split('.'); bB = bt.shift(); bt.sort(); } if ((!bw || b.event.customEvent[bB]) && !b.event.global[bB]) { return; }e = typeof e === 'object' ? e[b.expando] ? e : new b.Event(bB, e) : new b.Event(bB); e.type = bB; e.exclusive = bs; e.namespace = bt.join('.'); e.namespace_re = new RegExp(`(^|\\.)${bt.join('\\.(?:.*\\.)?')}(\\.|$)`); if (bD || !bw) { e.preventDefault(); e.stopPropagation(); } if (!bw) { b.each(b.cache, function () { const bF = b.expando; const bE = this[bF]; if (bE && bE.events && bE.events[bB]) { b.event.trigger(e, by, bE.handle.elem); } }); return; } if (bw.nodeType === 3 || bw.nodeType === 8) { return; }e.result = K; e.target = bw; by = by != null ? b.makeArray(by) : []; by.unshift(e); let bC = bw; const bu = bB.indexOf(':') < 0 ? `on${bB}` : ''; do { const bz = b._data(bC, 'handle'); e.currentTarget = bC; if (bz) { bz.apply(bC, by); } if (bu && b.acceptData(bC) && bC[bu] && bC[bu].apply(bC, by) === false) { e.result = false; e.preventDefault(); }bC = bC.parentNode || bC.ownerDocument || bC === e.target.ownerDocument && a9; } while (bC && !e.isPropagationStopped()); if (!e.isDefaultPrevented()) { let bv; const bA = b.event.special[bB] || {}; if ((!bA._default || bA._default.call(bw.ownerDocument, e) === false) && !(bB === 'click' && b.nodeName(bw, 'a')) && b.acceptData(bw)) { try { if (bu && bw[bB]) { bv = bw[bu]; if (bv) { bw[bu] = null; }b.event.triggered = bB; bw[bB](); } } catch (bx) {} if (bv) { bw[bu] = bv; }b.event.triggered = K; } } return e.result; },
    handle(by) { by = b.event.fix(by || a9.event); const bs = ((b._data(this, 'events') || {})[by.type] || []).slice(0); const bx = !by.exclusive && !by.namespace; const bv = Array.prototype.slice.call(arguments, 0); bv[0] = by; by.currentTarget = this; for (let bu = 0, e = bs.length; bu < e; bu++) { const bw = bs[bu]; if (bx || by.namespace_re.test(bw.namespace)) { by.handler = bw.handler; by.data = bw.data; by.handleObj = bw; const bt = bw.handler.apply(this, bv); if (bt !== K) { by.result = bt; if (bt === false) { by.preventDefault(); by.stopPropagation(); } } if (by.isImmediatePropagationStopped()) { break; } } } return by.result; },
    props: 'altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which'.split(' '),
    fix(bv) {
      if (bv[b.expando]) { return bv; } const bs = bv; bv = b.Event(bs); for (var bt = this.props.length, bx; bt;) { bx = this.props[--bt]; bv[bx] = bs[bx]; } if (!bv.target) { bv.target = bv.srcElement || aq; } if (bv.target.nodeType === 3) { bv.target = bv.target.parentNode; } if (!bv.relatedTarget && bv.fromElement) {
        bv.relatedTarget = bv.fromElement === bv.target ? bv.toElement : bv.fromElement;
      } if (bv.pageX == null && bv.clientX != null) { const bu = bv.target.ownerDocument || aq; const bw = bu.documentElement; const e = bu.body; bv.pageX = bv.clientX + (bw && bw.scrollLeft || e && e.scrollLeft || 0) - (bw && bw.clientLeft || e && e.clientLeft || 0); bv.pageY = bv.clientY + (bw && bw.scrollTop || e && e.scrollTop || 0) - (bw && bw.clientTop || e && e.clientTop || 0); } if (bv.which == null && (bv.charCode != null || bv.keyCode != null)) { bv.which = bv.charCode != null ? bv.charCode : bv.keyCode; } if (!bv.metaKey && bv.ctrlKey) { bv.metaKey = bv.ctrlKey; } if (!bv.which && bv.button !== K) { bv.which = (bv.button & 1 ? 1 : (bv.button & 2 ? 3 : (bv.button & 4 ? 2 : 0))); } return bv;
    },
    guid: 100000000,
    proxy: b.proxy,
    special: { ready: { setup: b.bindReady, teardown: b.noop }, live: { add(e) { b.event.add(this, p(e.origType, e.selector), b.extend({}, e, { handler: ai, guid: e.handler.guid })); }, remove(e) { b.event.remove(this, p(e.origType, e.selector), e); } }, beforeunload: { setup(bt, bs, e) { if (b.isWindow(this)) { this.onbeforeunload = e; } }, teardown(bs, e) { if (this.onbeforeunload === e) { this.onbeforeunload = null; } } } },
  }; b.removeEvent = aq.removeEventListener ? function (bs, e, bt) { if (bs.removeEventListener) { bs.removeEventListener(e, bt, false); } } : function (bs, e, bt) { if (bs.detachEvent) { bs.detachEvent(`on${e}`, bt); } }; b.Event = function (bs, e) { if (!this.preventDefault) { return new b.Event(bs, e); } if (bs && bs.type) { this.originalEvent = bs; this.type = bs.type; this.isDefaultPrevented = (bs.defaultPrevented || bs.returnValue === false || bs.getPreventDefault && bs.getPreventDefault()) ? i : bh; } else { this.type = bs; } if (e) { b.extend(this, e); } this.timeStamp = b.now(); this[b.expando] = true; }; function bh() { return false; } function i() { return true; }b.Event.prototype = {
    preventDefault() { this.isDefaultPrevented = i; const bs = this.originalEvent; if (!bs) { return; } if (bs.preventDefault) { bs.preventDefault(); } else { bs.returnValue = false; } }, stopPropagation() { this.isPropagationStopped = i; const bs = this.originalEvent; if (!bs) { return; } if (bs.stopPropagation) { bs.stopPropagation(); }bs.cancelBubble = true; }, stopImmediatePropagation() { this.isImmediatePropagationStopped = i; this.stopPropagation(); }, isDefaultPrevented: bh, isPropagationStopped: bh, isImmediatePropagationStopped: bh,
  }; const ab = function (bt) { const bu = bt.relatedTarget; let e = false; const bs = bt.type; bt.type = bt.data; if (bu !== this) { if (bu) { e = b.contains(this, bu); } if (!e) { b.event.handle.apply(this, arguments); bt.type = bs; } } }; const aR = function (e) { e.type = e.data; b.event.handle.apply(this, arguments); }; b.each({ mouseenter: 'mouseover', mouseleave: 'mouseout' }, (bs, e) => { b.event.special[bs] = { setup(bt) { b.event.add(this, e, bt && bt.selector ? aR : ab, bs); }, teardown(bt) { b.event.remove(this, e, bt && bt.selector ? aR : ab); } }; }); if (!b.support.submitBubbles) { b.event.special.submit = { setup(bs, e) { if (!b.nodeName(this, 'form')) { b.event.add(this, 'click.specialSubmit', function (bv) { const bu = bv.target; const bt = bu.type; if ((bt === 'submit' || bt === 'image') && b(bu).closest('form').length) { aT('submit', this, arguments); } }); b.event.add(this, 'keypress.specialSubmit', function (bv) { const bu = bv.target; const bt = bu.type; if ((bt === 'text' || bt === 'password') && b(bu).closest('form').length && bv.keyCode === 13) { aT('submit', this, arguments); } }); } else { return false; } }, teardown(e) { b.event.remove(this, '.specialSubmit'); } }; } if (!b.support.changeBubbles) {
    let bk; const k = function (bs) { const e = bs.type; let bt = bs.value; if (e === 'radio' || e === 'checkbox') { bt = bs.checked; } else if (e === 'select-multiple') { bt = bs.selectedIndex > -1 ? b.map(bs.options, (bu) => bu.selected).join('-') : ''; } else if (b.nodeName(bs, 'select')) { bt = bs.selectedIndex; } return bt; }; const Z = function Z(bu) { const bs = bu.target; let bt; let bv; if (!bb.test(bs.nodeName) || bs.readOnly) { return; }bt = b._data(bs, '_change_data'); bv = k(bs); if (bu.type !== 'focusout' || bs.type !== 'radio') { b._data(bs, '_change_data', bv); } if (bt === K || bv === bt) { return; } if (bt != null || bv) { bu.type = 'change'; bu.liveFired = K; b.event.trigger(bu, arguments[1], bs); } }; b.event.special.change = {
      filters: {
        focusout: Z,
        beforedeactivate: Z,
        click(bu) { const bt = bu.target; const bs = b.nodeName(bt, 'input') ? bt.type : ''; if (bs === 'radio' || bs === 'checkbox' || b.nodeName(bt, 'select')) { Z.call(this, bu); } },
        keydown(bu) {
          const bt = bu.target; const bs = b.nodeName(bt, 'input') ? bt.type : '';
          if ((bu.keyCode === 13 && !b.nodeName(bt, 'textarea')) || (bu.keyCode === 32 && (bs === 'checkbox' || bs === 'radio')) || bs === 'select-multiple') { Z.call(this, bu); }
        },
        beforeactivate(bt) { const bs = bt.target; b._data(bs, '_change_data', k(bs)); },
      },
      setup(bt, bs) { if (this.type === 'file') { return false; } for (const e in bk) { b.event.add(this, `${e}.specialChange`, bk[e]); } return bb.test(this.nodeName); },
      teardown(e) { b.event.remove(this, '.specialChange'); return bb.test(this.nodeName); },
    }; bk = b.event.special.change.filters; bk.focus = bk.beforeactivate;
  } function aT(bs, bu, e) { const bt = b.extend({}, e[0]); bt.type = bs; bt.originalEvent = {}; bt.liveFired = K; b.event.handle.call(bu, bt); if (bt.isDefaultPrevented()) { e[0].preventDefault(); } } if (!b.support.focusinBubbles) { b.each({ focus: 'focusin', blur: 'focusout' }, (bu, e) => { let bs = 0; b.event.special[e] = { setup() { if (bs++ === 0) { aq.addEventListener(bu, bt, true); } }, teardown() { if (--bs === 0) { aq.removeEventListener(bu, bt, true); } } }; function bt(bv) { const bw = b.event.fix(bv); bw.type = e; bw.originalEvent = {}; b.event.trigger(bw, null, bw.target); if (bw.isDefaultPrevented()) { bv.preventDefault(); } } }); }b.each(['bind', 'one'], (bs, e) => { b.fn[e] = function (by, bz, bx) { let bw; if (typeof by === 'object') { for (const bv in by) { this[e](bv, bz, by[bv], bx); } return this; } if (arguments.length === 2 || bz === false) { bx = bz; bz = K; } if (e === 'one') { bw = function (bA) { b(this).unbind(bA, bw); return bx.apply(this, arguments); }; bw.guid = bx.guid || b.guid++; } else { bw = bx; } if (by === 'unload' && e !== 'one') { this.one(by, bz, bx); } else { for (let bu = 0, bt = this.length; bu < bt; bu++) { b.event.add(this[bu], by, bw, bz); } } return this; }; }); b.fn.extend({
    unbind(bv, bu) { if (typeof bv === 'object' && !bv.preventDefault) { for (const bt in bv) { this.unbind(bt, bv[bt]); } } else { for (let bs = 0, e = this.length; bs < e; bs++) { b.event.remove(this[bs], bv, bu); } } return this; }, delegate(e, bs, bu, bt) { return this.live(bs, bu, bt, e); }, undelegate(e, bs, bt) { if (arguments.length === 0) { return this.unbind('live'); } return this.die(bs, null, bt, e); }, trigger(e, bs) { return this.each(function () { b.event.trigger(e, bs, this); }); }, triggerHandler(e, bs) { if (this[0]) { return b.event.trigger(e, bs, this[0], true); } }, toggle(bu) { const bs = arguments; const e = bu.guid || b.guid++; let bt = 0; const bv = function (bw) { const bx = (b.data(this, `lastToggle${bu.guid}`) || 0) % bt; b.data(this, `lastToggle${bu.guid}`, bx + 1); bw.preventDefault(); return bs[bx].apply(this, arguments) || false; }; bv.guid = e; while (bt < bs.length) { bs[bt++].guid = e; } return this.click(bv); }, hover(e, bs) { return this.mouseenter(e).mouseleave(bs || e); },
  }); const aP = {
    focus: 'focusin', blur: 'focusout', mouseenter: 'mouseover', mouseleave: 'mouseout',
  }; b.each(['live', 'die'], (bs, e) => {
    b.fn[e] = function (bC, bz, bE, bv) {
      let bD; let bA = 0; let bB; let bu; let bG; const bx = bv || this.selector; const bt = bv ? this : b(this.context); if (typeof bC === 'object' && !bC.preventDefault) { for (const bF in bC) { bt[e](bF, bz, bC[bF], bx); } return this; } if (e === 'die' && !bC && bv && bv.charAt(0) === '.') { bt.unbind(bv); return this; } if (bz === false || b.isFunction(bz)) { bE = bz || bh; bz = K; }bC = (bC || '').split(' '); while ((bD = bC[bA++]) != null) {
        bB = aW.exec(bD); bu = ''; if (bB) { bu = bB[0]; bD = bD.replace(aW, ''); } if (bD === 'hover') { bC.push(`mouseenter${bu}`, `mouseleave${bu}`); continue; }bG = bD; if (aP[bD]) { bC.push(aP[bD] + bu); bD += bu; } else { bD = (aP[bD] || bD) + bu; } if (e === 'live') {
          for (let by = 0, bw = bt.length; by < bw; by++) {
            b.event.add(bt[by], `live.${p(bD, bx)}`, {
              data: bz, selector: bx, handler: bE, origType: bD, origHandler: bE, preType: bG,
            });
          }
        } else { bt.unbind(`live.${p(bD, bx)}`, bE); }
      } return this;
    };
  }); function ai(bC) {
    let bz; let bu; let bI; let bw; let e; let bE; let bB; let bD; let bA; let bH; let by; let bx; let bG; const bF = []; const bv = []; const bs = b._data(this, 'events'); if (bC.liveFired === this || !bs || !bs.live || bC.target.disabled || bC.button && bC.type === 'click') { return; } if (bC.namespace) { bx = new RegExp(`(^|\\.)${bC.namespace.split('.').join('\\.(?:.*\\.)?')}(\\.|$)`); }bC.liveFired = this; const bt = bs.live.slice(0); for (bB = 0; bB < bt.length; bB++) { e = bt[bB]; if (e.origType.replace(aW, '') === bC.type) { bv.push(e.selector); } else { bt.splice(bB--, 1); } }bw = b(bC.target).closest(bv, bC.currentTarget); for (bD = 0, bA = bw.length; bD < bA; bD++) {
      by = bw[bD]; for (bB = 0; bB < bt.length; bB++) {
        e = bt[bB]; if (by.selector === e.selector && (!bx || bx.test(e.namespace)) && !by.elem.disabled) {
          bE = by.elem;
          bI = null; if (e.preType === 'mouseenter' || e.preType === 'mouseleave') { bC.type = e.preType; bI = b(bC.relatedTarget).closest(e.selector)[0]; if (bI && b.contains(bE, bI)) { bI = bE; } } if (!bI || bI !== bE) { bF.push({ elem: bE, handleObj: e, level: by.level }); }
        }
      }
    } for (bD = 0, bA = bF.length; bD < bA; bD++) { bw = bF[bD]; if (bu && bw.level > bu) { break; }bC.currentTarget = bw.elem; bC.data = bw.handleObj.data; bC.handleObj = bw.handleObj; bG = bw.handleObj.origHandler.apply(bw.elem, arguments); if (bG === false || bC.isPropagationStopped()) { bu = bw.level; if (bG === false) { bz = false; } if (bC.isImmediatePropagationStopped()) { break; } } } return bz;
  } function p(bs, e) { return (bs && bs !== '*' ? `${bs}.` : '') + e.replace(N, '`').replace(bf, '&'); }b.each(('blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error').split(' '), (bs, e) => { b.fn[e] = function (bu, bt) { if (bt == null) { bt = bu; bu = null; } return arguments.length > 0 ? this.bind(e, bu, bt) : this.trigger(e); }; if (b.attrFn) { b.attrFn[e] = true; } });
  /*!
 * Sizzle CSS Selector Engine
 *  Copyright 2011, The Dojo Foundation
 *  Released under the MIT, BSD, and GPL Licenses.
 *  More information: http://sizzlejs.com/
 */
  (function () {
    const bC = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g; let bD = 0; const bG = Object.prototype.toString; let bx = false; let bw = true; const bE = /\\/g; const bK = /\W/; [0, 0].sort(() => { bw = false; return 0; }); var bu = function (bP, e, bS, bT) { bS = bS || []; e = e || aq; const bV = e; if (e.nodeType !== 1 && e.nodeType !== 9) { return []; } if (!bP || typeof bP !== 'string') { return bS; } let bM; let bX; let b0; let bL; let bW; let bZ; let bY; let bR; let bO = true; const bN = bu.isXML(e); let bQ = []; let bU = bP; do { bC.exec(''); bM = bC.exec(bU); if (bM) { bU = bM[3]; bQ.push(bM[1]); if (bM[2]) { bL = bM[3]; break; } } } while (bM); if (bQ.length > 1 && by.exec(bP)) { if (bQ.length === 2 && bz.relative[bQ[0]]) { bX = bH(bQ[0] + bQ[1], e); } else { bX = bz.relative[bQ[0]] ? [e] : bu(bQ.shift(), e); while (bQ.length) { bP = bQ.shift(); if (bz.relative[bP]) { bP += bQ.shift(); }bX = bH(bP, bX); } } } else { if (!bT && bQ.length > 1 && e.nodeType === 9 && !bN && bz.match.ID.test(bQ[0]) && !bz.match.ID.test(bQ[bQ.length - 1])) { bW = bu.find(bQ.shift(), e, bN); e = bW.expr ? bu.filter(bW.expr, bW.set)[0] : bW.set[0]; } if (e) { bW = bT ? { expr: bQ.pop(), set: bA(bT) } : bu.find(bQ.pop(), bQ.length === 1 && (bQ[0] === '~' || bQ[0] === '+') && e.parentNode ? e.parentNode : e, bN); bX = bW.expr ? bu.filter(bW.expr, bW.set) : bW.set; if (bQ.length > 0) { b0 = bA(bX); } else { bO = false; } while (bQ.length) { bZ = bQ.pop(); bY = bZ; if (!bz.relative[bZ]) { bZ = ''; } else { bY = bQ.pop(); } if (bY == null) { bY = e; }bz.relative[bZ](b0, bY, bN); } } else { b0 = bQ = []; } } if (!b0) { b0 = bX; } if (!b0) { bu.error(bZ || bP); } if (bG.call(b0) === '[object Array]') { if (!bO) { bS.push.apply(bS, b0); } else if (e && e.nodeType === 1) { for (bR = 0; b0[bR] != null; bR++) { if (b0[bR] && (b0[bR] === true || b0[bR].nodeType === 1 && bu.contains(e, b0[bR]))) { bS.push(bX[bR]); } } } else { for (bR = 0; b0[bR] != null; bR++) { if (b0[bR] && b0[bR].nodeType === 1) { bS.push(bX[bR]); } } } } else { bA(b0, bS); } if (bL) { bu(bL, bV, bS, bT); bu.uniqueSort(bS); } return bS; }; bu.uniqueSort = function (bL) { if (bF) { bx = bw; bL.sort(bF); if (bx) { for (let e = 1; e < bL.length; e++) { if (bL[e] === bL[e - 1]) { bL.splice(e--, 1); } } } } return bL; }; bu.matches = function (e, bL) { return bu(e, null, null, bL); }; bu.matchesSelector = function (e, bL) { return bu(bL, null, null, [e]).length > 0; }; bu.find = function (bR, e, bS) { let bQ; if (!bR) { return []; } for (let bN = 0, bM = bz.order.length; bN < bM; bN++) { var bO; const bP = bz.order[bN]; if ((bO = bz.leftMatch[bP].exec(bR))) { const bL = bO[1]; bO.splice(1, 1); if (bL.substr(bL.length - 1) !== '\\') { bO[1] = (bO[1] || '').replace(bE, ''); bQ = bz.find[bP](bO, e, bS); if (bQ != null) { bR = bR.replace(bz.match[bP], ''); break; } } } } if (!bQ) { bQ = typeof e.getElementsByTagName !== 'undefined' ? e.getElementsByTagName('*') : []; } return { set: bQ, expr: bR }; }; bu.filter = function (bV, bU, bY, bO) {
      let bQ; let e; let bM = bV; let b0 = []; let bS = bU; const bR = bU && bU[0] && bu.isXML(bU[0]); while (bV && bU.length) {
        for (const bT in bz.filter) {
          if ((bQ = bz.leftMatch[bT].exec(bV)) != null && bQ[2]) {
            var bZ; var bX; const bL = bz.filter[bT]; const bN = bQ[1]; e = false; bQ.splice(1, 1); if (bN.substr(bN.length - 1) === '\\') { continue; } if (bS === b0) { b0 = []; } if (bz.preFilter[bT]) {
              bQ = bz.preFilter[bT](bQ, bS, bY, b0, bO, bR); if (!bQ) { e = bZ = true; } else if (bQ === true) {
                continue;
              }
            } if (bQ) { for (let bP = 0; (bX = bS[bP]) != null; bP++) { if (bX) { bZ = bL(bX, bQ, bP, bS); const bW = bO ^ !!bZ; if (bY && bZ != null) { if (bW) { e = true; } else { bS[bP] = false; } } else if (bW) { b0.push(bX); e = true; } } } } if (bZ !== K) { if (!bY) { bS = b0; }bV = bV.replace(bz.match[bT], ''); if (!e) { return []; } break; }
          }
        } if (bV === bM) { if (e == null) { bu.error(bV); } else { break; } }bM = bV;
      } return bS;
    }; bu.error = function (e) { throw `Syntax error, unrecognized expression: ${e}`; }; var bz = bu.selectors = {
      order: ['ID', 'NAME', 'TAG'],
      match: {
        ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/, CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/, NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/, ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/, TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/, CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/, POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/, PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/,
      },
      leftMatch: {},
      attrMap: { class: 'className', for: 'htmlFor' },
      attrHandle: { href(e) { return e.getAttribute('href'); }, type(e) { return e.getAttribute('type'); } },
      relative: {
        '+': function (bQ, bL) { const bN = typeof bL === 'string'; const bP = bN && !bK.test(bL); const bR = bN && !bP; if (bP) { bL = bL.toLowerCase(); } for (var bM = 0, e = bQ.length, bO; bM < e; bM++) { if ((bO = bQ[bM])) { while ((bO = bO.previousSibling) && bO.nodeType !== 1) {}bQ[bM] = bR || bO && bO.nodeName.toLowerCase() === bL ? bO || false : bO === bL; } } if (bR) { bu.filter(bL, bQ, true); } }, '>': function (bQ, bL) { let bP; const bO = typeof bL === 'string'; let bM = 0; const e = bQ.length; if (bO && !bK.test(bL)) { bL = bL.toLowerCase(); for (;bM < e; bM++) { bP = bQ[bM]; if (bP) { const bN = bP.parentNode; bQ[bM] = bN.nodeName.toLowerCase() === bL ? bN : false; } } } else { for (;bM < e; bM++) { bP = bQ[bM]; if (bP) { bQ[bM] = bO ? bP.parentNode : bP.parentNode === bL; } } if (bO) { bu.filter(bL, bQ, true); } } }, '': function (bN, bL, bP) { let bO; const bM = bD++; let e = bI; if (typeof bL === 'string' && !bK.test(bL)) { bL = bL.toLowerCase(); bO = bL; e = bs; }e('parentNode', bL, bM, bN, bO, bP); }, '~': function (bN, bL, bP) { let bO; const bM = bD++; let e = bI; if (typeof bL === 'string' && !bK.test(bL)) { bL = bL.toLowerCase(); bO = bL; e = bs; }e('previousSibling', bL, bM, bN, bO, bP); },
      },
      find: { ID(bL, bM, bN) { if (typeof bM.getElementById !== 'undefined' && !bN) { const e = bM.getElementById(bL[1]); return e && e.parentNode ? [e] : []; } }, NAME(bM, bP) { if (typeof bP.getElementsByName !== 'undefined') { const bL = []; const bO = bP.getElementsByName(bM[1]); for (let bN = 0, e = bO.length; bN < e; bN++) { if (bO[bN].getAttribute('name') === bM[1]) { bL.push(bO[bN]); } } return bL.length === 0 ? null : bL; } }, TAG(e, bL) { if (typeof bL.getElementsByTagName !== 'undefined') { return bL.getElementsByTagName(e[1]); } } },
      preFilter: {
        CLASS(bN, bL, bM, e, bQ, bR) { bN = ` ${bN[1].replace(bE, '')} `; if (bR) { return bN; } for (var bO = 0, bP; (bP = bL[bO]) != null; bO++) { if (bP) { if (bQ ^ (bP.className && (` ${bP.className} `).replace(/[\t\n\r]/g, ' ').indexOf(bN) >= 0)) { if (!bM) { e.push(bP); } } else if (bM) { bL[bO] = false; } } } return false; }, ID(e) { return e[1].replace(bE, ''); }, TAG(bL, e) { return bL[1].replace(bE, '').toLowerCase(); }, CHILD(e) { if (e[1] === 'nth') { if (!e[2]) { bu.error(e[0]); }e[2] = e[2].replace(/^\+|\s*/g, ''); const bL = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(e[2] === 'even' && '2n' || e[2] === 'odd' && '2n+1' || !/\D/.test(e[2]) && `0n+${e[2]}` || e[2]); e[2] = (bL[1] + (bL[2] || 1)) - 0; e[3] = bL[3] - 0; } else if (e[2]) { bu.error(e[0]); }e[0] = bD++; return e; }, ATTR(bO, bL, bM, e, bP, bQ) { const bN = bO[1] = bO[1].replace(bE, ''); if (!bQ && bz.attrMap[bN]) { bO[1] = bz.attrMap[bN]; }bO[4] = (bO[4] || bO[5] || '').replace(bE, ''); if (bO[2] === '~=') { bO[4] = ` ${bO[4]} `; } return bO; }, PSEUDO(bO, bL, bM, e, bP) { if (bO[1] === 'not') { if ((bC.exec(bO[3]) || '').length > 1 || /^\w/.test(bO[3])) { bO[3] = bu(bO[3], null, null, bL); } else { const bN = bu.filter(bO[3], bL, bM, true ^ bP); if (!bM) { e.push.apply(e, bN); } return false; } } else if (bz.match.POS.test(bO[0]) || bz.match.CHILD.test(bO[0])) { return true; } return bO; }, POS(e) { e.unshift(true); return e; },
      },
      filters: {
        enabled(e) { return e.disabled === false && e.type !== 'hidden'; },
        disabled(e) { return e.disabled === true; },
        checked(e) { return e.checked === true; },
        selected(e) {
          if (e.parentNode) {
            e.parentNode.selectedIndex;
          } return e.selected === true;
        },
        parent(e) { return !!e.firstChild; },
        empty(e) { return !e.firstChild; },
        has(bM, bL, e) { return !!bu(e[3], bM).length; },
        header(e) { return (/h\d/i).test(e.nodeName); },
        text(bM) { const e = bM.getAttribute('type'); const bL = bM.type; return bM.nodeName.toLowerCase() === 'input' && bL === 'text' && (e === bL || e === null); },
        radio(e) { return e.nodeName.toLowerCase() === 'input' && e.type === 'radio'; },
        checkbox(e) { return e.nodeName.toLowerCase() === 'input' && e.type === 'checkbox'; },
        file(e) { return e.nodeName.toLowerCase() === 'input' && e.type === 'file'; },
        password(e) { return e.nodeName.toLowerCase() === 'input' && e.type === 'password'; },
        submit(bL) { const e = bL.nodeName.toLowerCase(); return (e === 'input' || e === 'button') && bL.type === 'submit'; },
        image(e) { return e.nodeName.toLowerCase() === 'input' && e.type === 'image'; },
        reset(bL) { const e = bL.nodeName.toLowerCase(); return (e === 'input' || e === 'button') && bL.type === 'reset'; },
        button(bL) { const e = bL.nodeName.toLowerCase(); return e === 'input' && bL.type === 'button' || e === 'button'; },
        input(e) { return (/input|select|textarea|button/i).test(e.nodeName); },
        focus(e) { return e === e.ownerDocument.activeElement; },
      },
      setFilters: {
        first(bL, e) { return e === 0; }, last(bM, bL, e, bN) { return bL === bN.length - 1; }, even(bL, e) { return e % 2 === 0; }, odd(bL, e) { return e % 2 === 1; }, lt(bM, bL, e) { return bL < e[3] - 0; }, gt(bM, bL, e) { return bL > e[3] - 0; }, nth(bM, bL, e) { return e[3] - 0 === bL; }, eq(bM, bL, e) { return e[3] - 0 === bL; },
      },
      filter: {
        PSEUDO(bM, bR, bQ, bS) { const e = bR[1]; const bL = bz.filters[e]; if (bL) { return bL(bM, bQ, bR, bS); } if (e === 'contains') { return (bM.textContent || bM.innerText || bu.getText([bM]) || '').indexOf(bR[3]) >= 0; } if (e === 'not') { const bN = bR[3]; for (let bP = 0, bO = bN.length; bP < bO; bP++) { if (bN[bP] === bM) { return false; } } return true; } bu.error(e); }, CHILD(e, bN) { const bQ = bN[1]; let bL = e; switch (bQ) { case 'only': case 'first': while ((bL = bL.previousSibling)) { if (bL.nodeType === 1) { return false; } } if (bQ === 'first') { return true; }bL = e; case 'last': while ((bL = bL.nextSibling)) { if (bL.nodeType === 1) { return false; } } return true; case 'nth': var bM = bN[2]; var bT = bN[3]; if (bM === 1 && bT === 0) { return true; } var bP = bN[0]; var bS = e.parentNode; if (bS && (bS.sizcache !== bP || !e.nodeIndex)) { let bO = 0; for (bL = bS.firstChild; bL; bL = bL.nextSibling) { if (bL.nodeType === 1) { bL.nodeIndex = ++bO; } }bS.sizcache = bP; } var bR = e.nodeIndex - bT; if (bM === 0) { return bR === 0; } return (bR % bM === 0 && bR / bM >= 0); } }, ID(bL, e) { return bL.nodeType === 1 && bL.getAttribute('id') === e; }, TAG(bL, e) { return (e === '*' && bL.nodeType === 1) || bL.nodeName.toLowerCase() === e; }, CLASS(bL, e) { return (` ${bL.className || bL.getAttribute('class')} `).indexOf(e) > -1; }, ATTR(bP, bN) { const bM = bN[1]; const e = bz.attrHandle[bM] ? bz.attrHandle[bM](bP) : bP[bM] != null ? bP[bM] : bP.getAttribute(bM); const bQ = `${e}`; const bO = bN[2]; const bL = bN[4]; return e == null ? bO === '!=' : bO === '=' ? bQ === bL : bO === '*=' ? bQ.indexOf(bL) >= 0 : bO === '~=' ? (` ${bQ} `).indexOf(bL) >= 0 : !bL ? bQ && e !== false : bO === '!=' ? bQ !== bL : bO === '^=' ? bQ.indexOf(bL) === 0 : bO === '$=' ? bQ.substr(bQ.length - bL.length) === bL : bO === '|=' ? bQ === bL || bQ.substr(0, bL.length + 1) === `${bL}-` : false; }, POS(bO, bL, bM, bP) { const e = bL[2]; const bN = bz.setFilters[e]; if (bN) { return bN(bO, bM, bL, bP); } },
      },
    }; var by = bz.match.POS; const bt = function (bL, e) { return `\\${e - 0 + 1}`; }; for (const bv in bz.match) { bz.match[bv] = new RegExp(bz.match[bv].source + (/(?![^\[]*\])(?![^\(]*\))/.source)); bz.leftMatch[bv] = new RegExp(/(^(?:.|\r|\n)*?)/.source + bz.match[bv].source.replace(/\\(\d+)/g, bt)); } var bA = function (bL, e) { bL = Array.prototype.slice.call(bL, 0); if (e) { e.push.apply(e, bL); return e; } return bL; }; try { Array.prototype.slice.call(aq.documentElement.childNodes, 0)[0].nodeType; } catch (bJ) { bA = function (bO, bN) { let bM = 0; const bL = bN || []; if (bG.call(bO) === '[object Array]') { Array.prototype.push.apply(bL, bO); } else if (typeof bO.length === 'number') { for (let e = bO.length; bM < e; bM++) { bL.push(bO[bM]); } } else { for (;bO[bM]; bM++) { bL.push(bO[bM]); } } return bL; }; } let bF; let bB; if (aq.documentElement.compareDocumentPosition) {
      bF = function (bL, e) {
        if (bL === e) {
          bx = true; return 0;
        } if (!bL.compareDocumentPosition || !e.compareDocumentPosition) { return bL.compareDocumentPosition ? -1 : 1; } return bL.compareDocumentPosition(e) & 4 ? -1 : 1;
      };
    } else { bF = function (bS, bR) { if (bS === bR) { bx = true; return 0; } if (bS.sourceIndex && bR.sourceIndex) { return bS.sourceIndex - bR.sourceIndex; } let bP; let bL; const bM = []; const e = []; const bO = bS.parentNode; const bQ = bR.parentNode; let bT = bO; if (bO === bQ) { return bB(bS, bR); } else { if (!bO) { return -1; } if (!bQ) { return 1; } } while (bT) { bM.unshift(bT); bT = bT.parentNode; }bT = bQ; while (bT) { e.unshift(bT); bT = bT.parentNode; }bP = bM.length; bL = e.length; for (var bN = 0; bN < bP && bN < bL; bN++) { if (bM[bN] !== e[bN]) { return bB(bM[bN], e[bN]); } } return bN === bP ? bB(bS, e[bN], -1) : bB(bM[bN], bR, 1); }; bB = function (bL, e, bM) { if (bL === e) { return bM; } let bN = bL.nextSibling; while (bN) { if (bN === e) { return -1; }bN = bN.nextSibling; } return 1; }; }bu.getText = function (e) { let bL = ''; let bN; for (let bM = 0; e[bM]; bM++) { bN = e[bM]; if (bN.nodeType === 3 || bN.nodeType === 4) { bL += bN.nodeValue; } else if (bN.nodeType !== 8) { bL += bu.getText(bN.childNodes); } } return bL; }; (function () { let bL = aq.createElement('div'); const bM = `script${(new Date()).getTime()}`; let e = aq.documentElement; bL.innerHTML = `<a name='${bM}'/>`; e.insertBefore(bL, e.firstChild); if (aq.getElementById(bM)) { bz.find.ID = function (bO, bP, bQ) { if (typeof bP.getElementById !== 'undefined' && !bQ) { const bN = bP.getElementById(bO[1]); return bN ? bN.id === bO[1] || typeof bN.getAttributeNode !== 'undefined' && bN.getAttributeNode('id').nodeValue === bO[1] ? [bN] : K : []; } }; bz.filter.ID = function (bP, bN) { const bO = typeof bP.getAttributeNode !== 'undefined' && bP.getAttributeNode('id'); return bP.nodeType === 1 && bO && bO.nodeValue === bN; }; }e.removeChild(bL); e = bL = null; }()); (function () { let e = aq.createElement('div'); e.appendChild(aq.createComment('')); if (e.getElementsByTagName('*').length > 0) { bz.find.TAG = function (bL, bP) { let bO = bP.getElementsByTagName(bL[1]); if (bL[1] === '*') { const bN = []; for (let bM = 0; bO[bM]; bM++) { if (bO[bM].nodeType === 1) { bN.push(bO[bM]); } }bO = bN; } return bO; }; }e.innerHTML = "<a href='#'></a>"; if (e.firstChild && typeof e.firstChild.getAttribute !== 'undefined' && e.firstChild.getAttribute('href') !== '#') { bz.attrHandle.href = function (bL) { return bL.getAttribute('href', 2); }; }e = null; }()); if (aq.querySelectorAll) { (function () { const e = bu; let bN = aq.createElement('div'); const bM = '__sizzle__'; bN.innerHTML = "<p class='TEST'></p>"; if (bN.querySelectorAll && bN.querySelectorAll('.TEST').length === 0) { return; }bu = function (bY, bP, bT, bX) { bP = bP || aq; if (!bX && !bu.isXML(bP)) { const bW = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(bY); if (bW && (bP.nodeType === 1 || bP.nodeType === 9)) { if (bW[1]) { return bA(bP.getElementsByTagName(bY), bT); } if (bW[2] && bz.find.CLASS && bP.getElementsByClassName) { return bA(bP.getElementsByClassName(bW[2]), bT); } } if (bP.nodeType === 9) { if (bY === 'body' && bP.body) { return bA([bP.body], bT); } else if (bW && bW[3]) { const bS = bP.getElementById(bW[3]); if (bS && bS.parentNode) { if (bS.id === bW[3]) { return bA([bS], bT); } } else { return bA([], bT); } } try { return bA(bP.querySelectorAll(bY), bT); } catch (bU) {} } else if (bP.nodeType === 1 && bP.nodeName.toLowerCase() !== 'object') { const bQ = bP; const bR = bP.getAttribute('id'); let bO = bR || bM; const b0 = bP.parentNode; const bZ = /^\s*[+~]/.test(bY); if (!bR) { bP.setAttribute('id', bO); } else { bO = bO.replace(/'/g, '\\$&'); } if (bZ && b0) { bP = bP.parentNode; } try { if (!bZ || b0) { return bA(bP.querySelectorAll(`[id='${bO}'] ${bY}`), bT); } } catch (bV) {} finally { if (!bR) { bQ.removeAttribute('id'); } } } } return e(bY, bP, bT, bX); }; for (const bL in e) { bu[bL] = e[bL]; }bN = null; }()); }(function () { const e = aq.documentElement; const bM = e.matchesSelector || e.mozMatchesSelector || e.webkitMatchesSelector || e.msMatchesSelector; if (bM) { const bO = !bM.call(aq.createElement('div'), 'div'); let bL = false; try { bM.call(aq.documentElement, "[test!='']:sizzle"); } catch (bN) { bL = true; }bu.matchesSelector = function (bQ, bS) { bS = bS.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']"); if (!bu.isXML(bQ)) { try { if (bL || !bz.match.PSEUDO.test(bS) && !/!=/.test(bS)) { const bP = bM.call(bQ, bS); if (bP || !bO || bQ.document && bQ.document.nodeType !== 11) { return bP; } } } catch (bR) {} } return bu(bS, null, null, [bQ]).length > 0; }; } }()); (function () {
      let e = aq.createElement('div'); e.innerHTML = "<div class='test e'></div><div class='test'></div>"; if (!e.getElementsByClassName || e.getElementsByClassName('e').length === 0) {
        return;
      }e.lastChild.className = 'e'; if (e.getElementsByClassName('e').length === 1) { return; }bz.order.splice(1, 0, 'CLASS'); bz.find.CLASS = function (bL, bM, bN) { if (typeof bM.getElementsByClassName !== 'undefined' && !bN) { return bM.getElementsByClassName(bL[1]); } }; e = null;
    }()); function bs(bL, bQ, bP, bT, bR, bS) { for (let bN = 0, bM = bT.length; bN < bM; bN++) { let e = bT[bN]; if (e) { let bO = false; e = e[bL]; while (e) { if (e.sizcache === bP) { bO = bT[e.sizset]; break; } if (e.nodeType === 1 && !bS) { e.sizcache = bP; e.sizset = bN; } if (e.nodeName.toLowerCase() === bQ) { bO = e; break; }e = e[bL]; }bT[bN] = bO; } } } function bI(bL, bQ, bP, bT, bR, bS) { for (let bN = 0, bM = bT.length; bN < bM; bN++) { let e = bT[bN]; if (e) { let bO = false; e = e[bL]; while (e) { if (e.sizcache === bP) { bO = bT[e.sizset]; break; } if (e.nodeType === 1) { if (!bS) { e.sizcache = bP; e.sizset = bN; } if (typeof bQ !== 'string') { if (e === bQ) { bO = true; break; } } else if (bu.filter(bQ, [e]).length > 0) { bO = e; break; } }e = e[bL]; }bT[bN] = bO; } } } if (aq.documentElement.contains) { bu.contains = function (bL, e) { return bL !== e && (bL.contains ? bL.contains(e) : true); }; } else if (aq.documentElement.compareDocumentPosition) { bu.contains = function (bL, e) { return !!(bL.compareDocumentPosition(e) & 16); }; } else { bu.contains = function () { return false; }; }bu.isXML = function (e) { const bL = (e ? e.ownerDocument || e : 0).documentElement; return bL ? bL.nodeName !== 'HTML' : false; }; var bH = function (e, bR) { let bP; const bN = []; let bO = ''; const bM = bR.nodeType ? [bR] : bR; while ((bP = bz.match.PSEUDO.exec(e))) { bO += bP[0]; e = e.replace(bz.match.PSEUDO, ''); }e = bz.relative[e] ? `${e}*` : e; for (let bQ = 0, bL = bM.length; bQ < bL; bQ++) { bu(e, bM[bQ], bN); } return bu.filter(bO, bN); }; b.find = bu; b.expr = bu.selectors; b.expr[':'] = b.expr.filters; b.unique = bu.uniqueSort; b.text = bu.getText; b.isXMLDoc = bu.isXML; b.contains = bu.contains;
  }()); const Y = /Until$/; const am = /^(?:parents|prevUntil|prevAll)/; const a7 = /,/; const bn = /^.[^:#\[\.,]*$/; const P = Array.prototype.slice; const H = b.expr.match.POS; const au = {
    children: true, contents: true, next: true, prev: true,
  }; b.fn.extend({
    find(e) { const bt = this; let bv; let bs; if (typeof e !== 'string') { return b(e).filter(function () { for (bv = 0, bs = bt.length; bv < bs; bv++) { if (b.contains(bt[bv], this)) { return true; } } }); } const bu = this.pushStack('', 'find', e); let bx; let by; let bw; for (bv = 0, bs = this.length; bv < bs; bv++) { bx = bu.length; b.find(e, this[bv], bu); if (bv > 0) { for (by = bx; by < bu.length; by++) { for (bw = 0; bw < bx; bw++) { if (bu[bw] === bu[by]) { bu.splice(by--, 1); break; } } } } } return bu; }, has(bs) { const e = b(bs); return this.filter(function () { for (let bu = 0, bt = e.length; bu < bt; bu++) { if (b.contains(this, e[bu])) { return true; } } }); }, not(e) { return this.pushStack(aB(this, e, false), 'not', e); }, filter(e) { return this.pushStack(aB(this, e, true), 'filter', e); }, is(e) { return !!e && (typeof e === 'string' ? b.filter(e, this).length > 0 : this.filter(e).length > 0); }, closest(bB, bs) { let by = []; let bv; let bt; let bA = this[0]; if (b.isArray(bB)) { let bx; let bu; const bw = {}; let e = 1; if (bA && bB.length) { for (bv = 0, bt = bB.length; bv < bt; bv++) { bu = bB[bv]; if (!bw[bu]) { bw[bu] = H.test(bu) ? b(bu, bs || this.context) : bu; } } while (bA && bA.ownerDocument && bA !== bs) { for (bu in bw) { bx = bw[bu]; if (bx.jquery ? bx.index(bA) > -1 : b(bA).is(bx)) { by.push({ selector: bu, elem: bA, level: e }); } }bA = bA.parentNode; e++; } } return by; } const bz = H.test(bB) || typeof bB !== 'string' ? b(bB, bs || this.context) : 0; for (bv = 0, bt = this.length; bv < bt; bv++) { bA = this[bv]; while (bA) { if (bz ? bz.index(bA) > -1 : b.find.matchesSelector(bA, bB)) { by.push(bA); break; } else { bA = bA.parentNode; if (!bA || !bA.ownerDocument || bA === bs || bA.nodeType === 11) { break; } } } }by = by.length > 1 ? b.unique(by) : by; return this.pushStack(by, 'closest', bB); }, index(e) { if (!e || typeof e === 'string') { return b.inArray(this[0], e ? b(e) : this.parent().children()); } return b.inArray(e.jquery ? e[0] : e, this); }, add(e, bs) { const bu = typeof e === 'string' ? b(e, bs) : b.makeArray(e && e.nodeType ? [e] : e); const bt = b.merge(this.get(), bu); return this.pushStack(C(bu[0]) || C(bt[0]) ? bt : b.unique(bt)); }, andSelf() { return this.add(this.prevObject); },
  }); function C(e) { return !e || !e.parentNode || e.parentNode.nodeType === 11; }b.each({
    parent(bs) { const e = bs.parentNode; return e && e.nodeType !== 11 ? e : null; },
    parents(e) { return b.dir(e, 'parentNode'); },
    parentsUntil(bs, e, bt) { return b.dir(bs, 'parentNode', bt); },
    next(e) {
      return b.nth(e, 2, 'nextSibling');
    },
    prev(e) { return b.nth(e, 2, 'previousSibling'); },
    nextAll(e) { return b.dir(e, 'nextSibling'); },
    prevAll(e) { return b.dir(e, 'previousSibling'); },
    nextUntil(bs, e, bt) { return b.dir(bs, 'nextSibling', bt); },
    prevUntil(bs, e, bt) { return b.dir(bs, 'previousSibling', bt); },
    siblings(e) { return b.sibling(e.parentNode.firstChild, e); },
    children(e) { return b.sibling(e.firstChild); },
    contents(e) { return b.nodeName(e, 'iframe') ? e.contentDocument || e.contentWindow.document : b.makeArray(e.childNodes); },
  }, (e, bs) => { b.fn[e] = function (bw, bt) { let bv = b.map(this, bs, bw); const bu = P.call(arguments); if (!Y.test(e)) { bt = bw; } if (bt && typeof bt === 'string') { bv = b.filter(bt, bv); }bv = this.length > 1 && !au[e] ? b.unique(bv) : bv; if ((this.length > 1 || a7.test(bt)) && am.test(e)) { bv = bv.reverse(); } return this.pushStack(bv, e, bu.join(',')); }; }); b.extend({
    filter(bt, e, bs) { if (bs) { bt = `:not(${bt})`; } return e.length === 1 ? b.find.matchesSelector(e[0], bt) ? [e[0]] : [] : b.find.matches(bt, e); }, dir(bt, bs, bv) { const e = []; let bu = bt[bs]; while (bu && bu.nodeType !== 9 && (bv === K || bu.nodeType !== 1 || !b(bu).is(bv))) { if (bu.nodeType === 1) { e.push(bu); }bu = bu[bs]; } return e; }, nth(bv, e, bt, bu) { e = e || 1; let bs = 0; for (;bv; bv = bv[bt]) { if (bv.nodeType === 1 && ++bs === e) { break; } } return bv; }, sibling(bt, bs) { const e = []; for (;bt; bt = bt.nextSibling) { if (bt.nodeType === 1 && bt !== bs) { e.push(bt); } } return e; },
  }); function aB(bu, bt, e) { bt = bt || 0; if (b.isFunction(bt)) { return b.grep(bu, (bw, bv) => { const bx = !!bt.call(bw, bv, bw); return bx === e; }); } else { if (bt.nodeType) { return b.grep(bu, (bw, bv) => (bw === bt) === e); } if (typeof bt === 'string') { const bs = b.grep(bu, (bv) => bv.nodeType === 1); if (bn.test(bt)) { return b.filter(bt, bs, !e); } bt = b.filter(bt, bs); } } return b.grep(bu, (bw, bv) => (b.inArray(bw, bt) >= 0) === e); } const ad = / jQuery\d+="(?:\d+|null)"/g; const an = /^\s+/; const S = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig; const d = /<([\w:]+)/; const w = /<tbody/i; const V = /<|&#?\w+;/; const O = /<(?:script|object|embed|option|style)/i; const n = /checked\s*(?:[^=]|=\s*.checked.)/i; const bj = /\/(java|ecma)script/i; const aJ = /^\s*<!(?:\[CDATA\[|\-\-)/; const at = {
    option: [1, "<select multiple='multiple'>", '</select>'], legend: [1, '<fieldset>', '</fieldset>'], thead: [1, '<table>', '</table>'], tr: [2, '<table><tbody>', '</tbody></table>'], td: [3, '<table><tbody><tr>', '</tr></tbody></table>'], col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'], area: [1, '<map>', '</map>'], _default: [0, '', ''],
  }; at.optgroup = at.option; at.tbody = at.tfoot = at.colgroup = at.caption = at.thead; at.th = at.td; if (!b.support.htmlSerialize) { at._default = [1, 'div<div>', '</div>']; }b.fn.extend({
    text(e) { if (b.isFunction(e)) { return this.each(function (bt) { const bs = b(this); bs.text(e.call(this, bt, bs.text())); }); } if (typeof e !== 'object' && e !== K) { return this.empty().append((this[0] && this[0].ownerDocument || aq).createTextNode(e)); } return b.text(this); },
    wrapAll(e) { if (b.isFunction(e)) { return this.each(function (bt) { b(this).wrapAll(e.call(this, bt)); }); } if (this[0]) { const bs = b(e, this[0].ownerDocument).eq(0).clone(true); if (this[0].parentNode) { bs.insertBefore(this[0]); }bs.map(function () { let bt = this; while (bt.firstChild && bt.firstChild.nodeType === 1) { bt = bt.firstChild; } return bt; }).append(this); } return this; },
    wrapInner(e) { if (b.isFunction(e)) { return this.each(function (bs) { b(this).wrapInner(e.call(this, bs)); }); } return this.each(function () { const bs = b(this); const bt = bs.contents(); if (bt.length) { bt.wrapAll(e); } else { bs.append(e); } }); },
    wrap(e) { return this.each(function () { b(this).wrapAll(e); }); },
    unwrap() { return this.parent().each(function () { if (!b.nodeName(this, 'body')) { b(this).replaceWith(this.childNodes); } }).end(); },
    append() { return this.domManip(arguments, true, function (e) { if (this.nodeType === 1) { this.appendChild(e); } }); },
    prepend() { return this.domManip(arguments, true, function (e) { if (this.nodeType === 1) { this.insertBefore(e, this.firstChild); } }); },
    before() {
      if (this[0] && this[0].parentNode) { return this.domManip(arguments, false, function (bs) { this.parentNode.insertBefore(bs, this); }); } if (arguments.length) {
        const e = b(arguments[0]);
        e.push.apply(e, this.toArray()); return this.pushStack(e, 'before', arguments);
      }
    },
    after() { if (this[0] && this[0].parentNode) { return this.domManip(arguments, false, function (bs) { this.parentNode.insertBefore(bs, this.nextSibling); }); } if (arguments.length) { const e = this.pushStack(this, 'after', arguments); e.push.apply(e, b(arguments[0]).toArray()); return e; } },
    remove(e, bu) { for (var bs = 0, bt; (bt = this[bs]) != null; bs++) { if (!e || b.filter(e, [bt]).length) { if (!bu && bt.nodeType === 1) { b.cleanData(bt.getElementsByTagName('*')); b.cleanData([bt]); } if (bt.parentNode) { bt.parentNode.removeChild(bt); } } } return this; },
    empty() { for (var e = 0, bs; (bs = this[e]) != null; e++) { if (bs.nodeType === 1) { b.cleanData(bs.getElementsByTagName('*')); } while (bs.firstChild) { bs.removeChild(bs.firstChild); } } return this; },
    clone(bs, e) { bs = bs == null ? false : bs; e = e == null ? bs : e; return this.map(function () { return b.clone(this, bs, e); }); },
    html(bu) { if (bu === K) { return this[0] && this[0].nodeType === 1 ? this[0].innerHTML.replace(ad, '') : null; } if (typeof bu === 'string' && !O.test(bu) && (b.support.leadingWhitespace || !an.test(bu)) && !at[(d.exec(bu) || ['', ''])[1].toLowerCase()]) { bu = bu.replace(S, '<$1></$2>'); try { for (let bt = 0, bs = this.length; bt < bs; bt++) { if (this[bt].nodeType === 1) { b.cleanData(this[bt].getElementsByTagName('*')); this[bt].innerHTML = bu; } } } catch (bv) { this.empty().append(bu); } } else if (b.isFunction(bu)) { this.each(function (bw) { const e = b(this); e.html(bu.call(this, bw, e.html())); }); } else { this.empty().append(bu); } return this; },
    replaceWith(e) { if (this[0] && this[0].parentNode) { if (b.isFunction(e)) { return this.each(function (bu) { const bt = b(this); const bs = bt.html(); bt.replaceWith(e.call(this, bu, bs)); }); } if (typeof e !== 'string') { e = b(e).detach(); } return this.each(function () { const bt = this.nextSibling; const bs = this.parentNode; b(this).remove(); if (bt) { b(bt).before(e); } else { b(bs).append(e); } }); } return this.length ? this.pushStack(b(b.isFunction(e) ? e() : e), 'replaceWith', e) : this; },
    detach(e) { return this.remove(e, true); },
    domManip(by, bC, bB) { let bu; let bv; let bx; let bA; const bz = by[0]; const bs = []; if (!b.support.checkClone && arguments.length === 3 && typeof bz === 'string' && n.test(bz)) { return this.each(function () { b(this).domManip(by, bC, bB, true); }); } if (b.isFunction(bz)) { return this.each(function (bE) { const bD = b(this); by[0] = bz.call(this, bE, bC ? bD.html() : K); bD.domManip(by, bC, bB); }); } if (this[0]) { bA = bz && bz.parentNode; if (b.support.parentNode && bA && bA.nodeType === 11 && bA.childNodes.length === this.length) { bu = { fragment: bA }; } else { bu = b.buildFragment(by, this, bs); }bx = bu.fragment; if (bx.childNodes.length === 1) { bv = bx = bx.firstChild; } else { bv = bx.firstChild; } if (bv) { bC = bC && b.nodeName(bv, 'tr'); for (let bt = 0, e = this.length, bw = e - 1; bt < e; bt++) { bB.call(bC ? a8(this[bt], bv) : this[bt], bu.cacheable || (e > 1 && bt < bw) ? b.clone(bx, true, true) : bx); } } if (bs.length) { b.each(bs, bm); } } return this; },
  }); function a8(e, bs) { return b.nodeName(e, 'table') ? (e.getElementsByTagName('tbody')[0] || e.appendChild(e.ownerDocument.createElement('tbody'))) : e; } function t(e, by) { if (by.nodeType !== 1 || !b.hasData(e)) { return; } const bx = b.expando; let bu = b.data(e); let bv = b.data(by, bu); if ((bu = bu[bx])) { const bz = bu.events; bv = bv[bx] = b.extend({}, bu); if (bz) { delete bv.handle; bv.events = {}; for (const bw in bz) { for (let bt = 0, bs = bz[bw].length; bt < bs; bt++) { b.event.add(by, bw + (bz[bw][bt].namespace ? '.' : '') + bz[bw][bt].namespace, bz[bw][bt], bz[bw][bt].data); } } } } } function ae(bs, e) { let bt; if (e.nodeType !== 1) { return; } if (e.clearAttributes) { e.clearAttributes(); } if (e.mergeAttributes) { e.mergeAttributes(bs); }bt = e.nodeName.toLowerCase(); if (bt === 'object') { e.outerHTML = bs.outerHTML; } else if (bt === 'input' && (bs.type === 'checkbox' || bs.type === 'radio')) { if (bs.checked) { e.defaultChecked = e.checked = bs.checked; } if (e.value !== bs.value) { e.value = bs.value; } } else if (bt === 'option') { e.selected = bs.defaultSelected; } else if (bt === 'input' || bt === 'textarea') { e.defaultValue = bs.defaultValue; }e.removeAttribute(b.expando); }b.buildFragment = function (bw, bu, bs) {
    let bv; let e; let bt; let bx; if (bu && bu[0]) { bx = bu[0].ownerDocument || bu[0]; } if (!bx.createDocumentFragment) { bx = aq; } if (bw.length === 1 && typeof bw[0] === 'string' && bw[0].length < 512 && bx === aq && bw[0].charAt(0) === '<' && !O.test(bw[0]) && (b.support.checkClone || !n.test(bw[0]))) {
      e = true;
      bt = b.fragments[bw[0]]; if (bt && bt !== 1) { bv = bt; }
    } if (!bv) { bv = bx.createDocumentFragment(); b.clean(bw, bx, bv, bs); } if (e) { b.fragments[bw[0]] = bt ? bv : 1; } return { fragment: bv, cacheable: e };
  }; b.fragments = {}; b.each({
    appendTo: 'append', prependTo: 'prepend', insertBefore: 'before', insertAfter: 'after', replaceAll: 'replaceWith',
  }, (e, bs) => { b.fn[e] = function (bt) { let bw = []; const bz = b(bt); const by = this.length === 1 && this[0].parentNode; if (by && by.nodeType === 11 && by.childNodes.length === 1 && bz.length === 1) { bz[bs](this[0]); return this; } for (let bx = 0, bu = bz.length; bx < bu; bx++) { const bv = (bx > 0 ? this.clone(true) : this).get(); b(bz[bx])[bs](bv); bw = bw.concat(bv); } return this.pushStack(bw, e, bz.selector); }; }); function bc(e) { if ('getElementsByTagName' in e) { return e.getElementsByTagName('*'); } if ('querySelectorAll' in e) { return e.querySelectorAll('*'); } return []; } function av(e) { if (e.type === 'checkbox' || e.type === 'radio') { e.defaultChecked = e.checked; } } function E(e) { if (b.nodeName(e, 'input')) { av(e); } else if ('getElementsByTagName' in e) { b.grep(e.getElementsByTagName('input'), av); } }b.extend({ clone(bv, bx, bt) { const bw = bv.cloneNode(true); let e; let bs; let bu; if ((!b.support.noCloneEvent || !b.support.noCloneChecked) && (bv.nodeType === 1 || bv.nodeType === 11) && !b.isXMLDoc(bv)) { ae(bv, bw); e = bc(bv); bs = bc(bw); for (bu = 0; e[bu]; ++bu) { ae(e[bu], bs[bu]); } } if (bx) { t(bv, bw); if (bt) { e = bc(bv); bs = bc(bw); for (bu = 0; e[bu]; ++bu) { t(e[bu], bs[bu]); } } }e = bs = null; return bw; }, clean(bt, bv, bE, bx) { let bC; bv = bv || aq; if (typeof bv.createElement === 'undefined') { bv = bv.ownerDocument || bv[0] && bv[0].ownerDocument || aq; } let bF = []; let by; for (var bB = 0, bw; (bw = bt[bB]) != null; bB++) { if (typeof bw === 'number') { bw += ''; } if (!bw) { continue; } if (typeof bw === 'string') { if (!V.test(bw)) { bw = bv.createTextNode(bw); } else { bw = bw.replace(S, '<$1></$2>'); const bH = (d.exec(bw) || ['', ''])[1].toLowerCase(); const bu = at[bH] || at._default; let bA = bu[0]; let bs = bv.createElement('div'); bs.innerHTML = bu[1] + bw + bu[2]; while (bA--) { bs = bs.lastChild; } if (!b.support.tbody) { const e = w.test(bw); const bz = bH === 'table' && !e ? bs.firstChild && bs.firstChild.childNodes : bu[1] === '<table>' && !e ? bs.childNodes : []; for (by = bz.length - 1; by >= 0; --by) { if (b.nodeName(bz[by], 'tbody') && !bz[by].childNodes.length) { bz[by].parentNode.removeChild(bz[by]); } } } if (!b.support.leadingWhitespace && an.test(bw)) { bs.insertBefore(bv.createTextNode(an.exec(bw)[0]), bs.firstChild); }bw = bs.childNodes; } } var bD; if (!b.support.appendChecked) { if (bw[0] && typeof (bD = bw.length) === 'number') { for (by = 0; by < bD; by++) { E(bw[by]); } } else { E(bw); } } if (bw.nodeType) { bF.push(bw); } else { bF = b.merge(bF, bw); } } if (bE) { bC = function (bI) { return !bI.type || bj.test(bI.type); }; for (bB = 0; bF[bB]; bB++) { if (bx && b.nodeName(bF[bB], 'script') && (!bF[bB].type || bF[bB].type.toLowerCase() === 'text/javascript')) { bx.push(bF[bB].parentNode ? bF[bB].parentNode.removeChild(bF[bB]) : bF[bB]); } else { if (bF[bB].nodeType === 1) { const bG = b.grep(bF[bB].getElementsByTagName('script'), bC); bF.splice.apply(bF, [bB + 1, 0].concat(bG)); }bE.appendChild(bF[bB]); } } } return bF; }, cleanData(bs) { let bv; let bt; const e = b.cache; const bA = b.expando; const by = b.event.special; const bx = b.support.deleteExpando; for (var bw = 0, bu; (bu = bs[bw]) != null; bw++) { if (bu.nodeName && b.noData[bu.nodeName.toLowerCase()]) { continue; }bt = bu[b.expando]; if (bt) { bv = e[bt] && e[bt][bA]; if (bv && bv.events) { for (const bz in bv.events) { if (by[bz]) { b.event.remove(bu, bz); } else { b.removeEvent(bu, bz, bv.handle); } } if (bv.handle) { bv.handle.elem = null; } } if (bx) { delete bu[b.expando]; } else if (bu.removeAttribute) { bu.removeAttribute(b.expando); } delete e[bt]; } } } }); function bm(e, bs) { if (bs.src) { b.ajax({ url: bs.src, async: false, dataType: 'script' }); } else { b.globalEval((bs.text || bs.textContent || bs.innerHTML || '').replace(aJ, '/*$0*/')); } if (bs.parentNode) { bs.parentNode.removeChild(bs); } } const ah = /alpha\([^)]*\)/i; const ap = /opacity=([^)]*)/; const z = /([A-Z]|^ms)/g; const ba = /^-?\d+(?:px)?$/i; const bl = /^-?\d/; const I = /^[+\-]=/; const ag = /[^+\-\.\de]+/g; const a4 = { position: 'absolute', visibility: 'hidden', display: 'block' }; const aj = ['Left', 'Right']; const aY = ['Top', 'Bottom']; let W; let aE; let aS; b.fn.css = function (e, bs) { if (arguments.length === 2 && bs === K) { return this; } return b.access(this, e, bs, true, (bu, bt, bv) => (bv !== K ? b.style(bu, bt, bv) : b.css(bu, bt))); }; b.extend({
    cssHooks: {
      opacity: {
        get(bt, bs) {
          if (bs) {
            const e = W(bt, 'opacity', 'opacity');
            return e === '' ? '1' : e;
          } return bt.style.opacity;
        },
      },
    },
    cssNumber: {
      fillOpacity: true, fontWeight: true, lineHeight: true, opacity: true, orphans: true, widows: true, zIndex: true, zoom: true,
    },
    cssProps: { float: b.support.cssFloat ? 'cssFloat' : 'styleFloat' },
    style(bu, bt, bA, bv) { if (!bu || bu.nodeType === 3 || bu.nodeType === 8 || !bu.style) { return; } let by; let bz; const bw = b.camelCase(bt); const bs = bu.style; const bB = b.cssHooks[bw]; bt = b.cssProps[bw] || bw; if (bA !== K) { bz = typeof bA; if (bz === 'number' && isNaN(bA) || bA == null) { return; } if (bz === 'string' && I.test(bA)) { bA = +bA.replace(ag, '') + parseFloat(b.css(bu, bt)); bz = 'number'; } if (bz === 'number' && !b.cssNumber[bw]) { bA += 'px'; } if (!bB || !('set' in bB) || (bA = bB.set(bu, bA)) !== K) { try { bs[bt] = bA; } catch (bx) {} } } else { if (bB && 'get' in bB && (by = bB.get(bu, false, bv)) !== K) { return by; } return bs[bt]; } },
    css(bv, bu, bs) { let bt; let e; bu = b.camelCase(bu); e = b.cssHooks[bu]; bu = b.cssProps[bu] || bu; if (bu === 'cssFloat') { bu = 'float'; } if (e && 'get' in e && (bt = e.get(bv, true, bs)) !== K) { return bt; } if (W) { return W(bv, bu); } },
    swap(bu, bt, bv) { const e = {}; for (var bs in bt) { e[bs] = bu.style[bs]; bu.style[bs] = bt[bs]; }bv.call(bu); for (bs in bt) { bu.style[bs] = e[bs]; } },
  }); b.curCSS = b.css; b.each(['height', 'width'], (bs, e) => { b.cssHooks[e] = { get(bv, bu, bt) { let bw; if (bu) { if (bv.offsetWidth !== 0) { return o(bv, e, bt); } b.swap(bv, a4, () => { bw = o(bv, e, bt); }); return bw; } }, set(bt, bu) { if (ba.test(bu)) { bu = parseFloat(bu); if (bu >= 0) { return `${bu}px`; } } else { return bu; } } }; }); if (!b.support.opacity) { b.cssHooks.opacity = { get(bs, e) { return ap.test((e && bs.currentStyle ? bs.currentStyle.filter : bs.style.filter) || '') ? `${parseFloat(RegExp.$1) / 100}` : e ? '1' : ''; }, set(bv, bw) { const bu = bv.style; const bs = bv.currentStyle; bu.zoom = 1; const e = b.isNaN(bw) ? '' : `alpha(opacity=${bw * 100})`; const bt = bs && bs.filter || bu.filter || ''; bu.filter = ah.test(bt) ? bt.replace(ah, e) : `${bt} ${e}`; } }; }b(() => { if (!b.support.reliableMarginRight) { b.cssHooks.marginRight = { get(bt, bs) { let e; b.swap(bt, { display: 'inline-block' }, () => { if (bs) { e = W(bt, 'margin-right', 'marginRight'); } else { e = bt.style.marginRight; } }); return e; } }; } }); if (aq.defaultView && aq.defaultView.getComputedStyle) { aE = function (bv, bt) { let bs; let bu; let e; bt = bt.replace(z, '-$1').toLowerCase(); if (!(bu = bv.ownerDocument.defaultView)) { return K; } if ((e = bu.getComputedStyle(bv, null))) { bs = e.getPropertyValue(bt); if (bs === '' && !b.contains(bv.ownerDocument.documentElement, bv)) { bs = b.style(bv, bt); } } return bs; }; } if (aq.documentElement.currentStyle) { aS = function (bv, bt) { let bw; let bs = bv.currentStyle && bv.currentStyle[bt]; const e = bv.runtimeStyle && bv.runtimeStyle[bt]; const bu = bv.style; if (!ba.test(bs) && bl.test(bs)) { bw = bu.left; if (e) { bv.runtimeStyle.left = bv.currentStyle.left; }bu.left = bt === 'fontSize' ? '1em' : (bs || 0); bs = `${bu.pixelLeft}px`; bu.left = bw; if (e) { bv.runtimeStyle.left = e; } } return bs === '' ? 'auto' : bs; }; }W = aE || aS; function o(bt, bs, e) { let bv = bs === 'width' ? bt.offsetWidth : bt.offsetHeight; const bu = bs === 'width' ? aj : aY; if (bv > 0) { if (e !== 'border') { b.each(bu, function () { if (!e) { bv -= parseFloat(b.css(bt, `padding${this}`)) || 0; } if (e === 'margin') { bv += parseFloat(b.css(bt, e + this)) || 0; } else { bv -= parseFloat(b.css(bt, `border${this}Width`)) || 0; } }); } return `${bv}px`; }bv = W(bt, bs, bs); if (bv < 0 || bv == null) { bv = bt.style[bs] || 0; }bv = parseFloat(bv) || 0; if (e) { b.each(bu, function () { bv += parseFloat(b.css(bt, `padding${this}`)) || 0; if (e !== 'padding') { bv += parseFloat(b.css(bt, `border${this}Width`)) || 0; } if (e === 'margin') { bv += parseFloat(b.css(bt, e + this)) || 0; } }); } return `${bv}px`; } if (b.expr && b.expr.filters) { b.expr.filters.hidden = function (bt) { const bs = bt.offsetWidth; const e = bt.offsetHeight; return (bs === 0 && e === 0) || (!b.support.reliableHiddenOffsets && (bt.style.display || b.css(bt, 'display')) === 'none'); }; b.expr.filters.visible = function (e) { return !b.expr.filters.hidden(e); }; } const j = /%20/g; const al = /\[\]$/; const bq = /\r?\n/g; const bo = /#.*$/; const az = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg; const aV = /^(?:color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i; const aI = /^(?:about|app|app\-storage|.+\-extension|file|widget):$/; const aL = /^(?:GET|HEAD)$/; const c = /^\/\//; const L = /\?/; const a3 = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi; const q = /^(?:select|textarea)/i; const h = /\s+/; const bp = /([?&])_=[^&]*/; const J = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/; const A = b.fn.load; const X = {}; const r = {}; let aA; let s;
  try { aA = bi.href; } catch (ar) { aA = aq.createElement('a'); aA.href = ''; aA = aA.href; }s = J.exec(aA.toLowerCase()) || []; function f(e) { return function (bv, bx) { if (typeof bv !== 'string') { bx = bv; bv = '*'; } if (b.isFunction(bx)) { const bu = bv.toLowerCase().split(h); let bt = 0; const bw = bu.length; let bs; let by; let bz; for (;bt < bw; bt++) { bs = bu[bt]; bz = /^\+/.test(bs); if (bz) { bs = bs.substr(1) || '*'; }by = e[bs] = e[bs] || []; by[bz ? 'unshift' : 'push'](bx); } } }; } function aQ(bs, bB, bw, bA, by, bu) { by = by || bB.dataTypes[0]; bu = bu || {}; bu[by] = true; const bx = bs[by]; let bt = 0; const e = bx ? bx.length : 0; const bv = (bs === X); let bz; for (;bt < e && (bv || !bz); bt++) { bz = bx[bt](bB, bw, bA); if (typeof bz === 'string') { if (!bv || bu[bz]) { bz = K; } else { bB.dataTypes.unshift(bz); bz = aQ(bs, bB, bw, bA, bz, bu); } } } if ((bv || !bz) && !bu['*']) { bz = aQ(bs, bB, bw, bA, '*', bu); } return bz; }b.fn.extend({
    load(bt, bw, bx) {
      if (typeof bt !== 'string' && A) { return A.apply(this, arguments); } if (!this.length) { return this; } const bv = bt.indexOf(' '); if (bv >= 0) { var e = bt.slice(bv, bt.length); bt = bt.slice(0, bv); } let bu = 'GET'; if (bw) { if (b.isFunction(bw)) { bx = bw; bw = K; } else if (typeof bw === 'object') { bw = b.param(bw, b.ajaxSettings.traditional); bu = 'POST'; } } const bs = this; b.ajax({
        url: bt, type: bu, dataType: 'html', data: bw, complete(bz, by, bA) { bA = bz.responseText; if (bz.isResolved()) { bz.done((bB) => { bA = bB; }); bs.html(e ? b('<div>').append(bA.replace(a3, '')).find(e) : bA); } if (bx) { bs.each(bx, [bA, by, bz]); } },
      }); return this;
    },
    serialize() { return b.param(this.serializeArray()); },
    serializeArray() { return this.map(function () { return this.elements ? b.makeArray(this.elements) : this; }).filter(function () { return this.name && !this.disabled && (this.checked || q.test(this.nodeName) || aV.test(this.type)); }).map(function (e, bs) { const bt = b(this).val(); return bt == null ? null : b.isArray(bt) ? b.map(bt, (bv, bu) => ({ name: bs.name, value: bv.replace(bq, '\r\n') })) : { name: bs.name, value: bt.replace(bq, '\r\n') }; }).get(); },
  }); b.each('ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend'.split(' '), (e, bs) => { b.fn[bs] = function (bt) { return this.bind(bs, bt); }; }); b.each(['get', 'post'], (e, bs) => {
    b[bs] = function (bt, bv, bw, bu) {
      if (b.isFunction(bv)) { bu = bu || bw; bw = bv; bv = K; } return b.ajax({
        type: bs, url: bt, data: bv, success: bw, dataType: bu,
      });
    };
  }); b.extend({
    getScript(e, bs) { return b.get(e, K, bs, 'script'); },
    getJSON(e, bs, bt) { return b.get(e, bs, bt, 'json'); },
    ajaxSetup(bt, e) { if (!e) { e = bt; bt = b.extend(true, b.ajaxSettings, e); } else { b.extend(true, bt, b.ajaxSettings, e); } for (const bs in { context: 1, url: 1 }) { if (bs in e) { bt[bs] = e[bs]; } else if (bs in b.ajaxSettings) { bt[bs] = b.ajaxSettings[bs]; } } return bt; },
    ajaxSettings: {
      url: aA,
      isLocal: aI.test(s[1]),
      global: true,
      type: 'GET',
      contentType: 'application/x-www-form-urlencoded',
      processData: true,
      async: true,
      accepts: {
        xml: 'application/xml, text/xml', html: 'text/html', text: 'text/plain', json: 'application/json, text/javascript', '*': '*/*',
      },
      contents: { xml: /xml/, html: /html/, json: /json/ },
      responseFields: { xml: 'responseXML', text: 'responseText' },
      converters: {
        '* text': a9.String, 'text html': true, 'text json': b.parseJSON, 'text xml': b.parseXML,
      },
    },
    ajaxPrefilter: f(X),
    ajaxTransport: f(r),
    ajax(bw, bu) {
      if (typeof bw === 'object') { bu = bw; bw = K; }bu = bu || {}; const bA = b.ajaxSetup({}, bu); const bP = bA.context || bA; const bD = bP !== bA && (bP.nodeType || bP instanceof b) ? b(bP) : b.event; const bO = b.Deferred(); const bK = b._Deferred(); let by = bA.statusCode || {}; let bz; const bE = {}; const bL = {}; let bN; let bv; let bI; let bB; let bF; let bx = 0; let bt; let bH; const bG = {
        readyState: 0, setRequestHeader(bQ, bR) { if (!bx) { const e = bQ.toLowerCase(); bQ = bL[e] = bL[e] || bQ; bE[bQ] = bR; } return this; }, getAllResponseHeaders() { return bx === 2 ? bN : null; }, getResponseHeader(bQ) { let e; if (bx === 2) { if (!bv) { bv = {}; while ((e = az.exec(bN))) { bv[e[1].toLowerCase()] = e[2]; } }e = bv[bQ.toLowerCase()]; } return e === K ? null : e; }, overrideMimeType(e) { if (!bx) { bA.mimeType = e; } return this; }, abort(e) { e = e || 'abort'; if (bI) { bI.abort(e); }bC(0, e); return this; },
      }; function bC(bV, bT, bW, bS) {
        if (bx === 2) { return; }bx = 2; if (bB) { clearTimeout(bB); }bI = K; bN = bS || ''; bG.readyState = bV ? 4 : 0; let bQ; let b0; let bZ; const bU = bW ? bg(bA, bG, bW) : K; let bR; let bY; if (bV >= 200 && bV < 300 || bV === 304) {
          if (bA.ifModified) {
            if ((bR = bG.getResponseHeader('Last-Modified'))) { b.lastModified[bz] = bR; } if ((bY = bG.getResponseHeader('Etag'))) {
              b.etag[bz] = bY;
            }
          } if (bV === 304) { bT = 'notmodified'; bQ = true; } else { try { b0 = F(bA, bU); bT = 'success'; bQ = true; } catch (bX) { bT = 'parsererror'; bZ = bX; } }
        } else { bZ = bT; if (!bT || bV) { bT = 'error'; if (bV < 0) { bV = 0; } } }bG.status = bV; bG.statusText = bT; if (bQ) { bO.resolveWith(bP, [b0, bT, bG]); } else { bO.rejectWith(bP, [bG, bT, bZ]); }bG.statusCode(by); by = K; if (bt) { bD.trigger(`ajax${bQ ? 'Success' : 'Error'}`, [bG, bA, bQ ? b0 : bZ]); }bK.resolveWith(bP, [bG, bT]); if (bt) { bD.trigger('ajaxComplete', [bG, bA]); if (!(--b.active)) { b.event.trigger('ajaxStop'); } }
      }bO.promise(bG); bG.success = bG.done; bG.error = bG.fail; bG.complete = bK.done; bG.statusCode = function (bQ) { if (bQ) { let e; if (bx < 2) { for (e in bQ) { by[e] = [by[e], bQ[e]]; } } else { e = bQ[bG.status]; bG.then(e, e); } } return this; }; bA.url = (`${bw || bA.url}`).replace(bo, '').replace(c, `${s[1]}//`); bA.dataTypes = b.trim(bA.dataType || '*').toLowerCase().split(h); if (bA.crossDomain == null) { bF = J.exec(bA.url.toLowerCase()); bA.crossDomain = !!(bF && (bF[1] != s[1] || bF[2] != s[2] || (bF[3] || (bF[1] === 'http:' ? 80 : 443)) != (s[3] || (s[1] === 'http:' ? 80 : 443)))); } if (bA.data && bA.processData && typeof bA.data !== 'string') { bA.data = b.param(bA.data, bA.traditional); }aQ(X, bA, bu, bG); if (bx === 2) { return false; }bt = bA.global; bA.type = bA.type.toUpperCase(); bA.hasContent = !aL.test(bA.type); if (bt && b.active++ === 0) { b.event.trigger('ajaxStart'); } if (!bA.hasContent) { if (bA.data) { bA.url += (L.test(bA.url) ? '&' : '?') + bA.data; }bz = bA.url; if (bA.cache === false) { const bs = b.now(); const bM = bA.url.replace(bp, `$1_=${bs}`); bA.url = bM + ((bM === bA.url) ? `${L.test(bA.url) ? '&' : '?'}_=${bs}` : ''); } } if (bA.data && bA.hasContent && bA.contentType !== false || bu.contentType) { bG.setRequestHeader('Content-Type', bA.contentType); } if (bA.ifModified) { bz = bz || bA.url; if (b.lastModified[bz]) { bG.setRequestHeader('If-Modified-Since', b.lastModified[bz]); } if (b.etag[bz]) { bG.setRequestHeader('If-None-Match', b.etag[bz]); } }bG.setRequestHeader('Accept', bA.dataTypes[0] && bA.accepts[bA.dataTypes[0]] ? bA.accepts[bA.dataTypes[0]] + (bA.dataTypes[0] !== '*' ? ', */*; q=0.01' : '') : bA.accepts['*']); for (bH in bA.headers) { bG.setRequestHeader(bH, bA.headers[bH]); } if (bA.beforeSend && (bA.beforeSend.call(bP, bG, bA) === false || bx === 2)) { bG.abort(); return false; } for (bH in { success: 1, error: 1, complete: 1 }) { bG[bH](bA[bH]); }bI = aQ(r, bA, bu, bG); if (!bI) { bC(-1, 'No Transport'); } else { bG.readyState = 1; if (bt) { bD.trigger('ajaxSend', [bG, bA]); } if (bA.async && bA.timeout > 0) { bB = setTimeout(() => { bG.abort('timeout'); }, bA.timeout); } try { bx = 1; bI.send(bE, bC); } catch (bJ) { if (status < 2) { bC(-1, bJ); } else { b.error(bJ); } } } return bG;
    },
    param(e, bt) { const bs = []; const bv = function (bw, bx) { bx = b.isFunction(bx) ? bx() : bx; bs[bs.length] = `${encodeURIComponent(bw)}=${encodeURIComponent(bx)}`; }; if (bt === K) { bt = b.ajaxSettings.traditional; } if (b.isArray(e) || (e.jquery && !b.isPlainObject(e))) { b.each(e, function () { bv(this.name, this.value); }); } else { for (const bu in e) { v(bu, e[bu], bt, bv); } } return bs.join('&').replace(j, '+'); },
  }); function v(bt, bv, bs, bu) { if (b.isArray(bv)) { b.each(bv, (bx, bw) => { if (bs || al.test(bt)) { bu(bt, bw); } else { v(`${bt}[${typeof bw === 'object' || b.isArray(bw) ? bx : ''}]`, bw, bs, bu); } }); } else if (!bs && bv != null && typeof bv === 'object') { for (const e in bv) { v(`${bt}[${e}]`, bv[e], bs, bu); } } else { bu(bt, bv); } }b.extend({ active: 0, lastModified: {}, etag: {} }); function bg(bA, bz, bw) { const bs = bA.contents; const by = bA.dataTypes; const bt = bA.responseFields; let bv; let bx; let bu; let e; for (bx in bt) { if (bx in bw) { bz[bt[bx]] = bw[bx]; } } while (by[0] === '*') { by.shift(); if (bv === K) { bv = bA.mimeType || bz.getResponseHeader('content-type'); } } if (bv) { for (bx in bs) { if (bs[bx] && bs[bx].test(bv)) { by.unshift(bx); break; } } } if (by[0] in bw) { bu = by[0]; } else { for (bx in bw) { if (!by[0] || bA.converters[`${bx} ${by[0]}`]) { bu = bx; break; } if (!e) { e = bx; } }bu = bu || e; } if (bu) { if (bu !== by[0]) { by.unshift(bu); } return bw[bu]; } } function F(bE, bw) {
    if (bE.dataFilter) { bw = bE.dataFilter(bw, bE.dataType); } const bA = bE.dataTypes; const bD = {}; let bx; let bB; const bt = bA.length; let by; let bz = bA[0]; let bu; let bv; let bC; let bs; let e; for (bx = 1; bx < bt; bx++) {
      if (bx === 1) { for (bB in bE.converters) { if (typeof bB === 'string') { bD[bB.toLowerCase()] = bE.converters[bB]; } } }bu = bz; bz = bA[bx]; if (bz === '*') { bz = bu; } else if (bu !== '*' && bu !== bz) {
        bv = `${bu} ${bz}`; bC = bD[bv] || bD[`* ${bz}`]; if (!bC) {
          e = K; for (bs in bD) {
            by = bs.split(' '); if (by[0] === bu || by[0] === '*') {
              e = bD[`${by[1]} ${bz}`];
              if (e) { bs = bD[bs]; if (bs === true) { bC = e; } else if (e === true) { bC = bs; } break; }
            }
          }
        } if (!(bC || e)) { b.error(`No conversion from ${bv.replace(' ', ' to ')}`); } if (bC !== true) { bw = bC ? bC(bw) : e(bs(bw)); }
      }
    } return bw;
  } let ay = b.now(); const u = /(\=)\?(&|$)|\?\?/i; b.ajaxSetup({ jsonp: 'callback', jsonpCallback() { return `${b.expando}_${ay++}`; } }); b.ajaxPrefilter('json jsonp', (bA, bx, bz) => { const bu = bA.contentType === 'application/x-www-form-urlencoded' && (typeof bA.data === 'string'); if (bA.dataTypes[0] === 'jsonp' || bA.jsonp !== false && (u.test(bA.url) || bu && u.test(bA.data))) { let by; const bt = bA.jsonpCallback = b.isFunction(bA.jsonpCallback) ? bA.jsonpCallback() : bA.jsonpCallback; const bw = a9[bt]; let e = bA.url; let bv = bA.data; const bs = `$1${bt}$2`; if (bA.jsonp !== false) { e = e.replace(u, bs); if (bA.url === e) { if (bu) { bv = bv.replace(u, bs); } if (bA.data === bv) { e += `${(/\?/.test(e) ? '&' : '?') + bA.jsonp}=${bt}`; } } }bA.url = e; bA.data = bv; a9[bt] = function (bB) { by = [bB]; }; bz.always(() => { a9[bt] = bw; if (by && b.isFunction(bw)) { a9[bt](by[0]); } }); bA.converters['script json'] = function () { if (!by) { b.error(`${bt} was not called`); } return by[0]; }; bA.dataTypes[0] = 'json'; return 'script'; } }); b.ajaxSetup({ accepts: { script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript' }, contents: { script: /javascript|ecmascript/ }, converters: { 'text script': function (e) { b.globalEval(e); return e; } } }); b.ajaxPrefilter('script', (e) => { if (e.cache === K) { e.cache = false; } if (e.crossDomain) { e.type = 'GET'; e.global = false; } }); b.ajaxTransport('script', (bt) => { if (bt.crossDomain) { let e; const bs = aq.head || aq.getElementsByTagName('head')[0] || aq.documentElement; return { send(bu, bv) { e = aq.createElement('script'); e.async = 'async'; if (bt.scriptCharset) { e.charset = bt.scriptCharset; }e.src = bt.url; e.onload = e.onreadystatechange = function (bx, bw) { if (bw || !e.readyState || /loaded|complete/.test(e.readyState)) { e.onload = e.onreadystatechange = null; if (bs && e.parentNode) { bs.removeChild(e); }e = K; if (!bw) { bv(200, 'success'); } } }; bs.insertBefore(e, bs.firstChild); }, abort() { if (e) { e.onload(0, 1); } } }; } }); const B = a9.ActiveXObject ? function () { for (const e in M) { M[e](0, 1); } } : false; let y = 0; let M; function aH() { try { return new a9.XMLHttpRequest(); } catch (bs) {} } function af() { try { return new a9.ActiveXObject('Microsoft.XMLHTTP'); } catch (bs) {} }b.ajaxSettings.xhr = a9.ActiveXObject ? function () { return !this.isLocal && aH() || af(); } : aH; (function (e) { b.extend(b.support, { ajax: !!e, cors: !!e && ('withCredentials' in e) }); }(b.ajaxSettings.xhr())); if (b.support.ajax) { b.ajaxTransport((e) => { if (!e.crossDomain || b.support.cors) { let bs; return { send(by, bt) { const bx = e.xhr(); let bw; let bv; if (e.username) { bx.open(e.type, e.url, e.async, e.username, e.password); } else { bx.open(e.type, e.url, e.async); } if (e.xhrFields) { for (bv in e.xhrFields) { bx[bv] = e.xhrFields[bv]; } } if (e.mimeType && bx.overrideMimeType) { bx.overrideMimeType(e.mimeType); } if (!e.crossDomain && !by['X-Requested-With']) { by['X-Requested-With'] = 'XMLHttpRequest'; } try { for (bv in by) { bx.setRequestHeader(bv, by[bv]); } } catch (bu) {}bx.send((e.hasContent && e.data) || null); bs = function (bH, bB) { let bC; let bA; let bz; let bF; let bE; try { if (bs && (bB || bx.readyState === 4)) { bs = K; if (bw) { bx.onreadystatechange = b.noop; if (B) { delete M[bw]; } } if (bB) { if (bx.readyState !== 4) { bx.abort(); } } else { bC = bx.status; bz = bx.getAllResponseHeaders(); bF = {}; bE = bx.responseXML; if (bE && bE.documentElement) { bF.xml = bE; }bF.text = bx.responseText; try { bA = bx.statusText; } catch (bG) { bA = ''; } if (!bC && e.isLocal && !e.crossDomain) { bC = bF.text ? 200 : 404; } else if (bC === 1223) { bC = 204; } } } } catch (bD) { if (!bB) { bt(-1, bD); } } if (bF) { bt(bC, bA, bF, bz); } }; if (!e.async || bx.readyState === 4) { bs(); } else { bw = ++y; if (B) { if (!M) { M = {}; b(a9).unload(B); }M[bw] = bs; }bx.onreadystatechange = bs; } }, abort() { if (bs) { bs(0, 1); } } }; } }); } const Q = {}; let a6; let m; const ax = /^(?:toggle|show|hide)$/; const aN = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i; let aZ; const aD = [['height', 'marginTop', 'marginBottom', 'paddingTop', 'paddingBottom'], ['width', 'marginLeft', 'marginRight', 'paddingLeft', 'paddingRight'], ['opacity']]; let a1; const R = a9.webkitRequestAnimationFrame || a9.mozRequestAnimationFrame || a9.oRequestAnimationFrame; b.fn.extend({
    show(bu, bx, bw) {
      let bt; let bv; if (bu || bu === 0) { return this.animate(aX('show', 3), bu, bx, bw); }
      for (var bs = 0, e = this.length;
        bs < e; bs++) { bt = this[bs]; if (bt.style) { bv = bt.style.display; if (!b._data(bt, 'olddisplay') && bv === 'none') { bv = bt.style.display = ''; } if (bv === '' && b.css(bt, 'display') === 'none') { b._data(bt, 'olddisplay', x(bt.nodeName)); } } } for (bs = 0; bs < e; bs++) { bt = this[bs]; if (bt.style) { bv = bt.style.display; if (bv === '' || bv === 'none') { bt.style.display = b._data(bt, 'olddisplay') || ''; } } } return this;
    },
    hide(bt, bw, bv) { if (bt || bt === 0) { return this.animate(aX('hide', 3), bt, bw, bv); } for (var bs = 0, e = this.length; bs < e; bs++) { if (this[bs].style) { const bu = b.css(this[bs], 'display'); if (bu !== 'none' && !b._data(this[bs], 'olddisplay')) { b._data(this[bs], 'olddisplay', bu); } } } for (bs = 0; bs < e; bs++) { if (this[bs].style) { this[bs].style.display = 'none'; } } return this; },
    _toggle: b.fn.toggle,
    toggle(bt, bs, bu) { const e = typeof bt === 'boolean'; if (b.isFunction(bt) && b.isFunction(bs)) { this._toggle.apply(this, arguments); } else if (bt == null || e) { this.each(function () { const bv = e ? bt : b(this).is(':hidden'); b(this)[bv ? 'show' : 'hide'](); }); } else { this.animate(aX('toggle', 3), bt, bs, bu); } return this; },
    fadeTo(e, bu, bt, bs) {
      return this.filter(':hidden').css('opacity', 0).show().end()
        .animate({ opacity: bu }, e, bt, bs);
    },
    animate(bv, bs, bu, bt) { const e = b.speed(bs, bu, bt); if (b.isEmptyObject(bv)) { return this.each(e.complete, [false]); }bv = b.extend({}, bv); return this[e.queue === false ? 'each' : 'queue'](function () { if (e.queue === false) { b._mark(this); } const bz = b.extend({}, e); const bG = this.nodeType === 1; const bD = bG && b(this).is(':hidden'); let bw; let bA; let by; let bF; let bE; let bC; let bx; let bB; let bH; bz.animatedProperties = {}; for (by in bv) { bw = b.camelCase(by); if (by !== bw) { bv[bw] = bv[by]; delete bv[by]; }bA = bv[bw]; if (b.isArray(bA)) { bz.animatedProperties[bw] = bA[1]; bA = bv[bw] = bA[0]; } else { bz.animatedProperties[bw] = bz.specialEasing && bz.specialEasing[bw] || bz.easing || 'swing'; } if (bA === 'hide' && bD || bA === 'show' && !bD) { return bz.complete.call(this); } if (bG && (bw === 'height' || bw === 'width')) { bz.overflow = [this.style.overflow, this.style.overflowX, this.style.overflowY]; if (b.css(this, 'display') === 'inline' && b.css(this, 'float') === 'none') { if (!b.support.inlineBlockNeedsLayout) { this.style.display = 'inline-block'; } else { bF = x(this.nodeName); if (bF === 'inline') { this.style.display = 'inline-block'; } else { this.style.display = 'inline'; this.style.zoom = 1; } } } } } if (bz.overflow != null) { this.style.overflow = 'hidden'; } for (by in bv) { bE = new b.fx(this, bz, by); bA = bv[by]; if (ax.test(bA)) { bE[bA === 'toggle' ? bD ? 'show' : 'hide' : bA](); } else { bC = aN.exec(bA); bx = bE.cur(); if (bC) { bB = parseFloat(bC[2]); bH = bC[3] || (b.cssNumber[by] ? '' : 'px'); if (bH !== 'px') { b.style(this, by, (bB || 1) + bH); bx = ((bB || 1) / bE.cur()) * bx; b.style(this, by, bx + bH); } if (bC[1]) { bB = ((bC[1] === '-=' ? -1 : 1) * bB) + bx; }bE.custom(bx, bB, bH); } else { bE.custom(bx, bA, ''); } } } return true; }); },
    stop(bs, e) { if (bs) { this.queue([]); } this.each(function () { const bu = b.timers; let bt = bu.length; if (!e) { b._unmark(true, this); } while (bt--) { if (bu[bt].elem === this) { if (e) { bu[bt](true); }bu.splice(bt, 1); } } }); if (!e) { this.dequeue(); } return this; },
  }); function bd() { setTimeout(ao, 0); return (a1 = b.now()); } function ao() { a1 = K; } function aX(bs, e) { const bt = {}; b.each(aD.concat.apply([], aD.slice(0, e)), function () { bt[this] = bs; }); return bt; }b.each({
    slideDown: aX('show', 1), slideUp: aX('hide', 1), slideToggle: aX('toggle', 1), fadeIn: { opacity: 'show' }, fadeOut: { opacity: 'hide' }, fadeToggle: { opacity: 'toggle' },
  }, (e, bs) => { b.fn[e] = function (bt, bv, bu) { return this.animate(bs, bt, bv, bu); }; }); b.extend({
    speed(bt, bu, bs) { const e = bt && typeof bt === 'object' ? b.extend({}, bt) : { complete: bs || !bs && bu || b.isFunction(bt) && bt, duration: bt, easing: bs && bu || bu && !b.isFunction(bu) && bu }; e.duration = b.fx.off ? 0 : typeof e.duration === 'number' ? e.duration : e.duration in b.fx.speeds ? b.fx.speeds[e.duration] : b.fx.speeds._default; e.old = e.complete; e.complete = function (bv) { if (b.isFunction(e.old)) { e.old.call(this); } if (e.queue !== false) { b.dequeue(this); } else if (bv !== false) { b._unmark(this); } }; return e; }, easing: { linear(bt, bu, e, bs) { return e + bs * bt; }, swing(bt, bu, e, bs) { return ((-Math.cos(bt * Math.PI) / 2) + 0.5) * bs + e; } }, timers: [], fx(bs, e, bt) { this.options = e; this.elem = bs; this.prop = bt; e.orig = e.orig || {}; },
  }); b.fx.prototype = {
    update() {
      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }(b.fx.step[this.prop] || b.fx.step._default)(this);
    },
    cur() { if (this.elem[this.prop] != null && (!this.elem.style || this.elem.style[this.prop] == null)) { return this.elem[this.prop]; } let e; const bs = b.css(this.elem, this.prop); return isNaN(e = parseFloat(bs)) ? !bs || bs === 'auto' ? 0 : bs : e; },
    custom(bx, bw, bu) { const e = this; const bt = b.fx; let bv; this.startTime = a1 || bd(); this.start = bx; this.end = bw; this.unit = bu || this.unit || (b.cssNumber[this.prop] ? '' : 'px'); this.now = this.start; this.pos = this.state = 0; function bs(by) { return e.step(by); }bs.elem = this.elem; if (bs() && b.timers.push(bs) && !aZ) { if (R) { aZ = true; bv = function () { if (aZ) { R(bv); bt.tick(); } }; R(bv); } else { aZ = setInterval(bt.tick, bt.interval); } } },
    show() { this.options.orig[this.prop] = b.style(this.elem, this.prop); this.options.show = true; this.custom(this.prop === 'width' || this.prop === 'height' ? 1 : 0, this.cur()); b(this.elem).show(); },
    hide() { this.options.orig[this.prop] = b.style(this.elem, this.prop); this.options.hide = true; this.custom(this.cur(), 0); },
    step(bv) { const bu = a1 || bd(); let e = true; const bw = this.elem; const bs = this.options; let bt; let by; if (bv || bu >= bs.duration + this.startTime) { this.now = this.end; this.pos = this.state = 1; this.update(); bs.animatedProperties[this.prop] = true; for (bt in bs.animatedProperties) { if (bs.animatedProperties[bt] !== true) { e = false; } } if (e) { if (bs.overflow != null && !b.support.shrinkWrapBlocks) { b.each(['', 'X', 'Y'], (bz, bA) => { bw.style[`overflow${bA}`] = bs.overflow[bz]; }); } if (bs.hide) { b(bw).hide(); } if (bs.hide || bs.show) { for (const bx in bs.animatedProperties) { b.style(bw, bx, bs.orig[bx]); } }bs.complete.call(bw); } return false; } if (bs.duration == Infinity) { this.now = bu; } else { by = bu - this.startTime; this.state = by / bs.duration; this.pos = b.easing[bs.animatedProperties[this.prop]](this.state, by, 0, 1, bs.duration); this.now = this.start + ((this.end - this.start) * this.pos); } this.update(); return true; },
  }; b.extend(b.fx, {
    tick() { for (var bs = b.timers, e = 0; e < bs.length; ++e) { if (!bs[e]()) { bs.splice(e--, 1); } } if (!bs.length) { b.fx.stop(); } }, interval: 13, stop() { clearInterval(aZ); aZ = null; }, speeds: { slow: 600, fast: 200, _default: 400 }, step: { opacity(e) { b.style(e.elem, 'opacity', e.now); }, _default(e) { if (e.elem.style && e.elem.style[e.prop] != null) { e.elem.style[e.prop] = (e.prop === 'width' || e.prop === 'height' ? Math.max(0, e.now) : e.now) + e.unit; } else { e.elem[e.prop] = e.now; } } },
  }); if (b.expr && b.expr.filters) { b.expr.filters.animated = function (e) { return b.grep(b.timers, (bs) => e === bs.elem).length; }; } function x(bu) { if (!Q[bu]) { const e = aq.body; let bs = b(`<${bu}>`).appendTo(e); let bt = bs.css('display'); bs.remove(); if (bt === 'none' || bt === '') { if (!a6) { a6 = aq.createElement('iframe'); a6.frameBorder = a6.width = a6.height = 0; }e.appendChild(a6); if (!m || !a6.createElement) { m = (a6.contentWindow || a6.contentDocument).document; m.write(`${aq.compatMode === 'CSS1Compat' ? '<!doctype html>' : ''}<html><body>`); m.close(); }bs = m.createElement(bu); m.body.appendChild(bs); bt = b.css(bs, 'display'); e.removeChild(a6); }Q[bu] = bt; } return Q[bu]; } const U = /^t(?:able|d|h)$/i; const aa = /^(?:body|html)$/i; if ('getBoundingClientRect' in aq.documentElement) { b.fn.offset = function (bF) { const bv = this[0]; let by; if (bF) { return this.each(function (e) { b.offset.setOffset(this, bF, e); }); } if (!bv || !bv.ownerDocument) { return null; } if (bv === bv.ownerDocument.body) { return b.offset.bodyOffset(bv); } try { by = bv.getBoundingClientRect(); } catch (bC) {} const bE = bv.ownerDocument; const bt = bE.documentElement; if (!by || !b.contains(bt, bv)) { return by ? { top: by.top, left: by.left } : { top: 0, left: 0 }; } const bz = bE.body; const bA = aG(bE); const bx = bt.clientTop || bz.clientTop || 0; const bB = bt.clientLeft || bz.clientLeft || 0; const bs = bA.pageYOffset || b.support.boxModel && bt.scrollTop || bz.scrollTop; const bw = bA.pageXOffset || b.support.boxModel && bt.scrollLeft || bz.scrollLeft; const bD = by.top + bs - bx; const bu = by.left + bw - bB; return { top: bD, left: bu }; }; } else {
    b.fn.offset = function (bC) {
      let bw = this[0]; if (bC) { return this.each(function (bD) { b.offset.setOffset(this, bC, bD); }); } if (!bw || !bw.ownerDocument) { return null; } if (bw === bw.ownerDocument.body) { return b.offset.bodyOffset(bw); }b.offset.initialize(); let bz; let bt = bw.offsetParent; let bs = bw; const bB = bw.ownerDocument; const bu = bB.documentElement; const bx = bB.body; const by = bB.defaultView; let e = by ? by.getComputedStyle(bw, null) : bw.currentStyle; let bA = bw.offsetTop; let bv = bw.offsetLeft;
      while ((bw = bw.parentNode) && bw !== bx && bw !== bu) { if (b.offset.supportsFixedPosition && e.position === 'fixed') { break; }bz = by ? by.getComputedStyle(bw, null) : bw.currentStyle; bA -= bw.scrollTop; bv -= bw.scrollLeft; if (bw === bt) { bA += bw.offsetTop; bv += bw.offsetLeft; if (b.offset.doesNotAddBorder && !(b.offset.doesAddBorderForTableAndCells && U.test(bw.nodeName))) { bA += parseFloat(bz.borderTopWidth) || 0; bv += parseFloat(bz.borderLeftWidth) || 0; }bs = bt; bt = bw.offsetParent; } if (b.offset.subtractsBorderForOverflowNotVisible && bz.overflow !== 'visible') { bA += parseFloat(bz.borderTopWidth) || 0; bv += parseFloat(bz.borderLeftWidth) || 0; }e = bz; } if (e.position === 'relative' || e.position === 'static') { bA += bx.offsetTop; bv += bx.offsetLeft; } if (b.offset.supportsFixedPosition && e.position === 'fixed') { bA += Math.max(bu.scrollTop, bx.scrollTop); bv += Math.max(bu.scrollLeft, bx.scrollLeft); } return { top: bA, left: bv };
    };
  }b.offset = {
    initialize() {
      const e = aq.body; const bs = aq.createElement('div'); let bv; let bx; let bw; let by; const bt = parseFloat(b.css(e, 'marginTop')) || 0; const bu = "<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>"; b.extend(bs.style, {
        position: 'absolute', top: 0, left: 0, margin: 0, border: 0, width: '1px', height: '1px', visibility: 'hidden',
      }); bs.innerHTML = bu; e.insertBefore(bs, e.firstChild); bv = bs.firstChild; bx = bv.firstChild; by = bv.nextSibling.firstChild.firstChild; this.doesNotAddBorder = (bx.offsetTop !== 5); this.doesAddBorderForTableAndCells = (by.offsetTop === 5); bx.style.position = 'fixed'; bx.style.top = '20px'; this.supportsFixedPosition = (bx.offsetTop === 20 || bx.offsetTop === 15); bx.style.position = bx.style.top = ''; bv.style.overflow = 'hidden'; bv.style.position = 'relative'; this.subtractsBorderForOverflowNotVisible = (bx.offsetTop === -5); this.doesNotIncludeMarginInBodyOffset = (e.offsetTop !== bt); e.removeChild(bs); b.offset.initialize = b.noop;
    },
    bodyOffset(e) { let bt = e.offsetTop; let bs = e.offsetLeft; b.offset.initialize(); if (b.offset.doesNotIncludeMarginInBodyOffset) { bt += parseFloat(b.css(e, 'marginTop')) || 0; bs += parseFloat(b.css(e, 'marginLeft')) || 0; } return { top: bt, left: bs }; },
    setOffset(bu, bD, bx) { const by = b.css(bu, 'position'); if (by === 'static') { bu.style.position = 'relative'; } const bw = b(bu); const bs = bw.offset(); const e = b.css(bu, 'top'); const bB = b.css(bu, 'left'); const bC = (by === 'absolute' || by === 'fixed') && b.inArray('auto', [e, bB]) > -1; const bA = {}; let bz = {}; let bt; let bv; if (bC) { bz = bw.position(); bt = bz.top; bv = bz.left; } else { bt = parseFloat(e) || 0; bv = parseFloat(bB) || 0; } if (b.isFunction(bD)) { bD = bD.call(bu, bx, bs); } if (bD.top != null) { bA.top = (bD.top - bs.top) + bt; } if (bD.left != null) { bA.left = (bD.left - bs.left) + bv; } if ('using' in bD) { bD.using.call(bu, bA); } else { bw.css(bA); } },
  }; b.fn.extend({ position() { if (!this[0]) { return null; } const bt = this[0]; const bs = this.offsetParent(); const bu = this.offset(); const e = aa.test(bs[0].nodeName) ? { top: 0, left: 0 } : bs.offset(); bu.top -= parseFloat(b.css(bt, 'marginTop')) || 0; bu.left -= parseFloat(b.css(bt, 'marginLeft')) || 0; e.top += parseFloat(b.css(bs[0], 'borderTopWidth')) || 0; e.left += parseFloat(b.css(bs[0], 'borderLeftWidth')) || 0; return { top: bu.top - e.top, left: bu.left - e.left }; }, offsetParent() { return this.map(function () { let e = this.offsetParent || aq.body; while (e && (!aa.test(e.nodeName) && b.css(e, 'position') === 'static')) { e = e.offsetParent; } return e; }); } }); b.each(['Left', 'Top'], (bs, e) => { const bt = `scroll${e}`; b.fn[bt] = function (bw) { let bu; let bv; if (bw === K) { bu = this[0]; if (!bu) { return null; }bv = aG(bu); return bv ? ('pageXOffset' in bv) ? bv[bs ? 'pageYOffset' : 'pageXOffset'] : b.support.boxModel && bv.document.documentElement[bt] || bv.document.body[bt] : bu[bt]; } return this.each(function () { bv = aG(this); if (bv) { bv.scrollTo(!bs ? bw : b(bv).scrollLeft(), bs ? bw : b(bv).scrollTop()); } else { this[bt] = bw; } }); }; }); function aG(e) { return b.isWindow(e) ? e : e.nodeType === 9 ? e.defaultView || e.parentWindow : false; }b.each(['Height', 'Width'], (bs, e) => {
    const bt = e.toLowerCase(); b.fn[`inner${e}`] = function () { const bu = this[0]; return bu && bu.style ? parseFloat(b.css(bu, bt, 'padding')) : null; }; b.fn[`outer${e}`] = function (bv) {
      const bu = this[0];
      return bu && bu.style ? parseFloat(b.css(bu, bt, bv ? 'margin' : 'border')) : null;
    }; b.fn[bt] = function (bv) { const bw = this[0]; if (!bw) { return bv == null ? null : this; } if (b.isFunction(bv)) { return this.each(function (bA) { const bz = b(this); bz[bt](bv.call(this, bA, bz[bt]())); }); } if (b.isWindow(bw)) { const bx = bw.document.documentElement[`client${e}`]; return bw.document.compatMode === 'CSS1Compat' && bx || bw.document.body[`client${e}`] || bx; } if (bw.nodeType === 9) { return Math.max(bw.documentElement[`client${e}`], bw.body[`scroll${e}`], bw.documentElement[`scroll${e}`], bw.body[`offset${e}`], bw.documentElement[`offset${e}`]); } if (bv === K) { const by = b.css(bw, bt); const bu = parseFloat(by); return b.isNaN(bu) ? by : bu; } return this.css(bt, typeof bv === 'string' ? bv : `${bv}px`); };
  }); a9.jQuery = a9.$ = b;
}(window));
