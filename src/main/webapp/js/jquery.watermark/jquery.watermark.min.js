/*
	Watermark v3.1.3 (March 22, 2011) plugin for jQuery
	http://jquery-watermark.googlecode.com/
	Copyright (c) 2009-2011 Todd Northrop
	http://www.speednet.biz/
	Dual licensed under the MIT or GPL Version 2 licenses.
*/
(function (a, h, y) {
  const w = 'function'; const v = 'password'; const j = 'maxLength'; const n = 'type'; const b = ''; const c = true; const u = 'placeholder'; const i = false; const t = 'watermark'; const g = t; const f = 'watermarkClass'; const q = 'watermarkFocus'; const l = 'watermarkSubmit'; const o = 'watermarkMaxLength'; const e = 'watermarkPassword'; const d = 'watermarkText'; const k = /\r/g; const s = `input:data(${g}),textarea:data(${g})`; const m = 'input:text,input:password,input[type=search],input:not([type]),textarea'; const p = ['Page_ClientValidate']; let r = i; const x = u in document.createElement('input'); a.watermark = a.watermark || {
    version: '3.1.3', runOnce: c, options: { className: t, useNative: c, hideBeforeUnload: c }, hide(b) { a(b).filter(s).each(function () { a.watermark._hide(a(this)); }); }, _hide(a, r) { const p = a[0]; const q = (p.value || b).replace(k, b); const l = a.data(d) || b; const m = a.data(o) || 0; const i = a.data(f); if (l.length && q == l) { p.value = b; if (a.data(e)) if ((a.attr(n) || b) === 'text') { const g = a.data(e) || []; const c = a.parent() || []; if (g.length && c.length) { c[0].removeChild(a[0]); c[0].appendChild(g[0]); a = g; } } if (m) { a.attr(j, m); a.removeData(o); } if (r) { a.attr('autocomplete', 'off'); h.setTimeout(() => { a.select(); }, 1); } }i && a.removeClass(i); }, show(b) { a(b).filter(s).each(function () { a.watermark._show(a(this)); }); }, _show(g) { let p = g[0]; const u = (p.value || b).replace(k, b); const h = g.data(d) || b; const s = g.attr(n) || b; const t = g.data(f); if ((u.length == 0 || u == h) && !g.data(q)) { r = c; if (g.data(e)) if (s === v) { const m = g.data(e) || []; const l = g.parent() || []; if (m.length && l.length) { l[0].removeChild(g[0]); l[0].appendChild(m[0]); g = m; g.attr(j, h.length); p = g[0]; } } if (s === 'text' || s === 'search') { const i = g.attr(j) || 0; if (i > 0 && h.length > i) { g.data(o, i); g.attr(j, h.length); } }t && g.addClass(t); p.value = h; } else a.watermark._hide(g); }, hideAll() { if (r) { a.watermark.hide(m); r = i; } }, showAll() { a.watermark.show(m); },
  }; a.fn.watermark = a.fn.watermark || function (p, o) {
    const t = 'string'; if (!this.length) return this; let s = i; const r = typeof p === t; if (r)p = p.replace(k, b); if (typeof o === 'object') { s = typeof o.className === t; o = a.extend({}, a.watermark.options, o); } else if (typeof o === t) { s = c; o = a.extend({}, a.watermark.options, { className: o }); } else o = a.watermark.options; if (typeof o.useNative !== w)o.useNative = o.useNative ? function () { return c; } : function () { return i; }; return this.each(function () {
      const B = 'dragleave'; const A = 'dragenter'; const z = this; const i = a(z); if (!i.is(m)) return; if (i.data(g)) { if (r || s) { a.watermark._hide(i); r && i.data(d, p); s && i.data(f, o.className); } } else {
        if (x && o.useNative.call(z, i) && (i.attr('tagName') || b) !== 'TEXTAREA') { r && i.attr(u, p); return; }i.data(d, r ? p : b); i.data(f, o.className); i.data(g, 1); if ((i.attr(n) || b) === v) { const C = i.wrap('<span>').parent(); const t = a(C.html().replace(/type=["']?password["']?/i, 'type="text"')); t.data(d, i.data(d)); t.data(f, i.data(f)); t.data(g, 1); t.attr(j, p.length); t.focus(() => { a.watermark._hide(t, c); }).bind(A, () => { a.watermark._hide(t); }).bind('dragend', () => { h.setTimeout(() => { t.blur(); }, 1); }); i.blur(() => { a.watermark._show(i); }).bind(B, () => { a.watermark._show(i); }); t.data(e, i); i.data(e, t); } else {
          i.focus(() => { i.data(q, 1); a.watermark._hide(i, c); }).blur(() => { i.data(q, 0); a.watermark._show(i); }).bind(A, () => { a.watermark._hide(i); }).bind(B, () => { a.watermark._show(i); })
            .bind('dragend', () => { h.setTimeout(() => { a.watermark._show(i); }, 1); })
            .bind('drop', (e) => { const c = i[0]; const a = e.originalEvent.dataTransfer.getData('Text'); if ((c.value || b).replace(k, b).replace(a, b) === i.data(d))c.value = a; i.focus(); });
        } if (z.form) { const w = z.form; const y = a(w); if (!y.data(l)) { y.submit(a.watermark.hideAll); if (w.submit) { y.data(l, w.submit); w.submit = (function (c, b) { return function () { const d = b.data(l); a.watermark.hideAll(); if (d.apply)d.apply(c, Array.prototype.slice.call(arguments)); else d(); }; }(w, y)); } else { y.data(l, 1); w.submit = (function (b) { return function () { a.watermark.hideAll(); delete b.submit; b.submit(); }; }(w)); } } }
      }a.watermark._show(i);
    });
  }; if (a.watermark.runOnce) { a.watermark.runOnce = i; a.extend(a.expr[':'], { data(c, d, b) { return !!a.data(c, b[3]); } }); (function (c) { a.fn.val = function () { const e = this; if (!e.length) return arguments.length ? e : y; if (!arguments.length) if (e.data(g)) { const f = (e[0].value || b).replace(k, b); return f === (e.data(d) || b) ? b : f; } else return c.apply(e, arguments); c.apply(e, arguments); a.watermark.show(e); return e; }; }(a.fn.val)); p.length && a(() => { for (var b, c, d = p.length - 1; d >= 0; d--) { b = p[d]; c = h[b]; if (typeof c === w)h[b] = (function (b) { return function () { a.watermark.hideAll(); return b.apply(null, Array.prototype.slice.call(arguments)); }; }(c)); } }); a(h).bind('beforeunload', () => { a.watermark.options.hideBeforeUnload && a.watermark.hideAll(); }); }
}(jQuery, window));
